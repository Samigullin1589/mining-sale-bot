import os
import time
import json
import requests
import threading
from flask import Flask, request
from datetime import datetime, timedelta
from collections import defaultdict

import telebot

TOKEN = os.getenv('TELEGRAM_TOKEN')
CRYPTOPANIC_API_KEY = os.getenv('CRYPTOPANIC_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ADMIN_IDS = [7473992492, 5860994210]  # id –∞–¥–º–∏–Ω–æ–≤
CHAT_ID = -1002408729915  # –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç @Mining_Sale

app = Flask(__name__)
bot = telebot.TeleBot(TOKEN, threaded=False)

# –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
stats = defaultdict(int)
news_cache = {"time": 0, "text": ""}
last_news_time = 0

def is_admin(user_id):
    return user_id in ADMIN_IDS

# --- –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô ---

def fetch_crypto_news():
    global news_cache
    url = f"https://cryptopanic.com/api/v1/posts/?auth_token={CRYPTOPANIC_API_KEY}&public=true"
    try:
        res = requests.get(url, timeout=10)
        if res.status_code != 200:
            log_text = f"CryptoPanic –æ—à–∏–±–∫–∞ {res.status_code}:\n{res.text[:300]}"
            print(log_text)
            return None
        data = res.json()
        if "results" not in data or not data["results"]:
            print("CryptoPanic: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!")
            return None
        news_list = []
        for item in data["results"][:3]:
            title = item.get("title", "")
            url = item.get("url", "")
            news_list.append(f"‚Ä¢ [{title}]({url})")
        return "\n".join(news_list)
    except Exception as e:
        print(f"CryptoPanic –æ—à–∏–±–∫–∞: {e}")
        return None

# --- –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–¢–ü–†–ê–í–ö–ò –ù–û–í–û–°–¢–ï–ô ---

def send_news_job():
    global last_news_time
    while True:
        now = datetime.utcnow()
        if now.minute == 0 and now.hour % 3 == 0:  # —Ä–æ–≤–Ω–æ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
            if (time.time() - last_news_time) > 3600:  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
                send_news()
                last_news_time = time.time()
        time.sleep(60)

def send_news():
    news = fetch_crypto_news()
    if news:
        msg = (
            f"{news}\n\n"
            "üî• –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ? –°–ø–µ—Ü—É—Å–ª–æ–≤–∏—è —Ç—É—Ç: https://app.leadteh.ru/w/dTeKr"
        )
    else:
        msg = (
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.\n\n"
            "üî• –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ? –°–ø–µ—Ü—É—Å–ª–æ–≤–∏—è —Ç—É—Ç: https://app.leadteh.ru/w/dTeKr"
        )
    try:
        bot.send_message(CHAT_ID, msg, parse_mode="Markdown", disable_web_page_preview=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")

# --- –ö–û–ú–ê–ù–î–ê /stats ---

@bot.message_handler(commands=['stats', '—Å—Ç–∞—Ç–∞'])
def stats_command(message):
    if not is_admin(message.from_user.id):
        return
    day = datetime.utcnow().strftime('%Y-%m-%d')
    week = datetime.utcnow().isocalendar()[1]
    user_count = len(stats["users"]) if "users" in stats else 0
    reply = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('today', 0)}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('week', 0)}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_count}\n"
        f"–û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞: {stats.get('bot_replies', 0)}"
    )
    bot.reply_to(message, reply)

# --- –£–ú–ù–´–ô –ê–í–¢–û–û–¢–í–ï–¢–ß–ò–ö ---

KEYWORDS = {
    "–∫—É–ø–∏—Ç—å": "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: https://app.leadteh.ru/w/dTeKr",
    "—á—Ç–æ –≤—ã–±—Ä–∞—Ç—å": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å —Å –±—é–¥–∂–µ—Ç–æ–º –∏ —Ç—Ä–µ–±—É–µ–º–æ–π –º–æ—â–Ω–æ—Å—Ç—å—é. –ò–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö ‚Äî Whatsminer, Antminer.",
    "–≤–∞–ª—é—Ç–∞": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∏ –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî cryptopanic.com",
    "—Ä–æ–∑–µ—Ç–∫–∞": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –º–æ—â–Ω–æ—Å—Ç—å ASIC.",
    "–æ–±–∑–æ—Ä": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±–∑–æ—Ä—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Äî cryptopanic.com –∏ t.me/MiningClubStoreOfficialBOT",
    # ...–¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é
}

@bot.message_handler(func=lambda m: True, content_types=['text'])
def text_handler(message):
    user_id = message.from_user.id
    stats["today"] = stats.get("today", 0) + 1
    stats["week"] = stats.get("week", 0) + 1
    stats.setdefault("users", set()).add(user_id)

    text = message.text.lower()
    for k, v in KEYWORDS.items():
        if k in text:
            stats["bot_replies"] = stats.get("bot_replies", 0) + 1
            bot.reply_to(message, v)
            return
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º (–∏–ª–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å GPT-—Ä–µ–∂–∏–º)

# --- –ú–û–î–ï–†–ê–¢–û–† (–ü–†–û–°–¢–ï–ô–®–ò–ô –§–ò–õ–¨–¢–†) ---
# (–¥–æ–±–∞–≤—å—Ç–µ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

# --- FLASK WEBHOOK ---

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Only JSON allowed', 400

@app.route("/", methods=["GET"])
def index():
    return "Mining_Sale_Bot ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# --- –ó–ê–ü–£–°–ö –ü–û–¢–û–ö–ê –° –ù–û–í–û–°–¢–Ø–ú–ò ---

if __name__ == "__main__":
    threading.Thread(target=send_news_job, daemon=True).start()
    port = int(os.environ.get('PORT', 10000))
    app.run(host="0.0.0.0", port=port)
