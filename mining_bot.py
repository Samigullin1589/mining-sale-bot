 # -*- coding: utf-8 -*- 

 # ======================================================================================== 
 # 1. –ò–ú–ü–û–†–¢–´ 
 # ======================================================================================== 
import os 
import telebot 
import requests 
import time 
import threading 
import schedule 
import json 
import atexit 
import httpx 
import xml.etree.ElementTree as ET
from flask import Flask, request 
import gspread 
from google.oauth2.service_account import Credentials 
from telebot import types 
from openai import OpenAI 
from datetime import datetime, timedelta 
from bs4 import BeautifulSoup 
import matplotlib 
matplotlib.use('Agg') 
import matplotlib.pyplot as plt 
import io 
import re 
import random 
import logging 
import feedparser 
from dateutil import parser as date_parser 


 # ======================================================================================== 
 # 2. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ 
 # ======================================================================================== 
logging.basicConfig( 
    level=logging.INFO, 
    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s', 
    datefmt='%d/%b/%Y %H:%M:%S' 
) 
logger = logging.getLogger(__name__) 

class Config: 
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç.""" 
    BOT_TOKEN = os.getenv("TG_BOT_TOKEN") 
    WEBHOOK_URL = os.getenv("WEBHOOK_URL") 
    CRYPTO_API_KEY = os.getenv("CRYPTO_API_KEY") 
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") 
    NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID") 
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID") 
    GOOGLE_JSON_STR = os.getenv("GOOGLE_JSON") 
    SHEET_ID = os.getenv("SHEET_ID") 
    SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1") 
    GAME_DATA_FILE = "game_data.json" 
    PROFILES_DATA_FILE = "user_profiles.json" 
    ASIC_CACHE_FILE = "asic_data_cache.json" 
    DYNAMIC_KEYWORDS_FILE = "dynamic_keywords.json" 

    if not BOT_TOKEN: 
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.") 
        raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 

    PARTNER_URL = os.getenv("PARTNER_URL", "https://app.leadteh.ru/w/dTeKr") 
    PARTNER_BUTTON_TEXT_OPTIONS = ["üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"] 
    PARTNER_AD_TEXT_OPTIONS = [ 
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ BTC –≤ —Ä–µ–∞–ª—å–Ω—ã–µ? –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ! –ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.", 
        "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ. –ì–æ—Ç–æ–≤—ã –∫ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ–±—ã—á–µ? –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.", 
        "–í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ñ–µ—Ä–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –Ω–∞—Å—Ç–æ—è—â–µ–π. –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.", 
        "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∑–Ω–∞–Ω–∏—è –∏–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–µ –∂–µ–ª–µ–∑–æ. –ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ –≤—ã? –ù–∞–¥–µ–∂–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É–∂–µ –∂–¥—É—Ç." 
    ] 
    BOT_HINTS = [ 
        "üí° –£–∑–Ω–∞–π—Ç–µ –∫—É—Ä—Å –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π `/price`", "‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–º—ã–µ –¥–æ—Ö–æ–¥–Ω—ã–µ ASIC", 
        "‚õèÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –ø–æ–º–æ—â—å—é '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'", "üì∞ –•–æ—Ç–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏?", 
        "ü§ë –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–∏–º—É–ª—è—Ç–æ—Ä –º–∞–π–Ω–∏–Ω–≥–∞!", "üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏", 
        "üèÜ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å–µ–±—è —Å –ª—É—á—à–∏–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤", "üéì –ß—Ç–æ —Ç–∞–∫–æ–µ 'HODL'? –£–∑–Ω–∞–π—Ç–µ: `/word`", 
        "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ `/quiz`", "üõçÔ∏è –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π" 
    ] 
    HALVING_INTERVAL = 210000 

    CRYPTO_TERMS = ["–ë–ª–æ–∫—á–µ–π–Ω", "–ì–∞–∑ (Gas)", "–•–∞–ª–≤–∏–Ω–≥", "ICO", "DeFi", "NFT", "–°–∞—Ç–æ—à–∏", "–ö–∏—Ç (Whale)", "HODL", "DEX", "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"] 
    
    LEVEL_MULTIPLIERS = {1: 1, 2: 1.5, 3: 2.2, 4: 3.5, 5: 5} 
    UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1} 
    STREAK_BONUS_MULTIPLIER = 0.05 
    QUIZ_REWARD = 0.0001 
    QUIZ_MIN_CORRECT_FOR_REWARD = 3 
    QUIZ_QUESTIONS_COUNT = 5 
    
    SHOP_ITEMS = { 
        'boost': {'name': '‚ö°Ô∏è –ë—É—Å—Ç —Ö2 (24—á)', 'cost': 0.0005}, 
        'overclock': {'name': '‚öôÔ∏è –û–≤–µ—Ä–∫–ª–æ–∫–∏–Ω–≥-—á–∏–ø (+5% –Ω–∞–≤—Å–µ–≥–¥–∞)', 'cost': 0.002, 'effect': 0.05} 
    } 
    RANDOM_EVENT_CHANCE = 0.1 
    
    QUIZ_QUESTIONS = [ 
        {"question": "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º Bitcoin?", "options": ["–í–∏—Ç–∞–ª–∏–∫ –ë—É—Ç–µ—Ä–∏–Ω", "–°–∞—Ç–æ—à–∏ –ù–∞–∫–∞–º–æ—Ç–æ", "–ß–∞—Ä–ª–∏ –õ–∏", "–ò–ª–æ–Ω –ú–∞—Å–∫"], "correct_index": 1}, 
        {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –±–ª–æ–∫ –≤ —Å–µ—Ç–∏ Bitcoin –≤ –¥–≤–∞ —Ä–∞–∑–∞?", "options": ["–§–æ—Ä–∫", "–ê–∏—Ä–¥—Ä–æ–ø", "–•–∞–ª–≤–∏–Ω–≥", "–°–∂–∏–≥–∞–Ω–∏–µ"], "correct_index": 2}, 
        {"question": "–ö–∞–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ Bitcoin?", "options": ["Solana", "Ripple (XRP)", "Cardano", "Ethereum"], "correct_index": 3}, 
        {"question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç 'HODL' –≤ –∫—Ä–∏–ø—Ç–æ-—Å–æ–æ–±—â–µ—Å—Ç–≤–µ?", "options": ["–ü—Ä–æ–¥–∞–≤–∞—Ç—å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏", "–î–µ—Ä–∂–∞—Ç—å –∞–∫—Ç–∏–≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ", "–ë—ã—Å—Ç—Ä–∞—è —Å–ø–µ–∫—É–ª—è—Ü–∏—è", "–û–±–º–µ–Ω –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã –Ω–∞ –¥—Ä—É–≥—É—é"], "correct_index": 1}, 
        {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –Ω–µ–¥–µ–ª–∏–º–∞—è —á–∞—Å—Ç—å Bitcoin?", "options": ["–¶–µ–Ω—Ç", "–ì–≤–µ–π", "–°–∞—Ç–æ—à–∏", "–ö–æ–ø–µ–π–∫–∞"], "correct_index": 2}, 
    ] 
    
    SPAM_KEYWORDS = ['p2p', '–∞—Ä–±–∏—Ç—Ä–∞–∂', '–æ–±–º–µ–Ω', '—Å–∏–≥–Ω–∞–ª—ã', '–æ–±—É—á–µ–Ω–∏–µ', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–≤–ª–æ–∂–µ–Ω–∏—è', '—Å—Ö–µ–º–∞', '—Å–≤—è–∑–∫–∞'] 
    TECH_QUESTION_KEYWORDS = ['–ø–æ—á–µ–º—É', '–∫–∞–∫', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—Ç–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è', '–ø–µ—Ä–µ–≥—Ä–µ–≤–∞–µ—Ç—Å—è', '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å'] 
    TECH_SUBJECT_KEYWORDS = ['asic', '–∞—Å–∏–∫', '–º–∞–π–Ω–µ—Ä', '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', '–ø—Ä–æ—à–∏–≤–∫–∞', '—Ö–µ—à—Ä–µ–π—Ç', '–ø–ª–∞—Ç–∞', '–ø—É–ª'] 
    
    FALLBACK_ASICS = [ 
        {'name': 'Antminer S21', 'hashrate': '200.00 TH/s', 'power_watts': 3550.0, 'daily_revenue': 11.50}, 
        {'name': 'Whatsminer M60S', 'hashrate': '186.00 TH/s', 'power_watts': 3441.0, 'daily_revenue': 10.80}, 
        {'name': 'Antminer S19k Pro', 'hashrate': '120.00 TH/s', 'power_watts': 2760.0, 'daily_revenue': 6.50}, 
    ] 
    
    TICKER_ALIASES = { 
        '–±—Ç–∫': 'BTC', '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', '–±–∏—Ç–æ–∫': 'BTC', 
        'eth': 'ETH', '—ç—Ñ–∏—Ä': 'ETH', '—ç—Ñ–∏—Ä–∏—É–º': 'ETH', 
        'sol': 'SOL', '—Å–æ–ª–∞–Ω–∞': 'SOL', 
        'ltc': 'LTC', '–ª–∞–π—Ç–∫–æ–∏–Ω': 'LTC', '–ª–∞–π—Ç': 'LTC', 
        'doge': 'DOGE', '–¥–æ–≥–∏': 'DOGE', '–¥–æ–≥': 'DOGE', 
        'kas': 'KAS', '–∫–∞—Å–ø–∞': 'KAS' 
    } 
    COINGECKO_MAP = { 
        'BTC': 'bitcoin', 'ETH': 'ethereum', 'LTC': 'litecoin', 
        'DOGE': 'dogecoin', 'KAS': 'kaspa', 'SOL': 'solana' 
    } 
    POPULAR_TICKERS = ['BTC', 'ETH', 'LTC', 'DOGE', 'KAS'] 
    NEWS_RSS_FEEDS = [ 
        "https://forklog.com/feed", 
        "https://cointelegraph.com/rss", 
        "https://bits.media/rss/", 
        "https://www.rbc.ru/crypto/feed" 
    ] 
    
    WARN_LIMIT = 3 
    MUTE_DURATION_HOURS = 24 

 # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ --- 
class ExceptionHandler(telebot.ExceptionHandler): 
    def handle(self, exception): 
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ pyTelegramBotAPI:", exc_info=exception) 
        return True 

bot = telebot.TeleBot(Config.BOT_TOKEN, threaded=False, parse_mode='HTML', exception_handler=ExceptionHandler()) 
app = Flask(__name__) 

try: 
    if Config.OPENAI_API_KEY: 
        openai_client = OpenAI(api_key=Config.OPENAI_API_KEY, http_client=httpx.Client()) 
    else: 
        openai_client = None 
        logger.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å GPT –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.") 
except Exception as e: 
    openai_client = None 
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI: {e}", exc_info=True) 

user_quiz_states = {} 

 # ======================================================================================== 
 # 2. –ö–õ–ê–°–°–´ –õ–û–ì–ò–ö–ò (API, –ò–ì–†–ê, –ê–ù–¢–ò–°–ü–ê–ú) 
 # ======================================================================================== 
class ApiHandler: 
    def __init__(self): 
        self.asic_cache = self._load_asic_cache_from_file() 
        self.currency_cache = {"rate": None, "timestamp": None} 
        atexit.register(self._save_asic_cache_to_file) 

    def _make_request(self, url, timeout=15, is_json=True): 
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤.""" 
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
        }
        try: 
            response = requests.get(url, headers=headers, timeout=timeout) 
            response.raise_for_status() 
            return response.json() if is_json else response 
        except (requests.exceptions.RequestException, json.JSONDecodeError) as e: 
            logger.warning(f"–°–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è {url}: {e}") 
            return None 

    def _load_asic_cache_from_file(self): 
        try: 
            if os.path.exists(Config.ASIC_CACHE_FILE): 
                with open(Config.ASIC_CACHE_FILE, 'r', encoding='utf-8') as f: 
                    cache = json.load(f) 
                    if "timestamp" in cache and cache["timestamp"]: 
                        cache["timestamp"] = datetime.fromisoformat(cache["timestamp"]) 
                        if datetime.now() - cache["timestamp"] > timedelta(hours=24): 
                            logger.warning("–ö—ç—à ASIC —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.") 
                            return {"data": [], "timestamp": None} 
                    else: 
                        cache["timestamp"] = None 
                    logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à ASIC —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.") 
                    return cache 
        except json.JSONDecodeError: 
            logger.warning(f"–§–∞–π–ª –∫—ç—à–∞ {Config.ASIC_CACHE_FILE} –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.") 
        except Exception as e: 
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à ASIC: {e}") 
        return {"data": [], "timestamp": None} 

    def _save_asic_cache_to_file(self): 
        try: 
            with open(Config.ASIC_CACHE_FILE, 'w', encoding='utf-8') as f: 
                cache_to_save = self.asic_cache.copy() 
                if cache_to_save.get("timestamp"): 
                    cache_to_save["timestamp"] = cache_to_save["timestamp"].isoformat() 
                json.dump(cache_to_save, f, indent=4) 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ ASIC: {e}") 

    def get_gsheet(self): 
        try: 
            if not Config.GOOGLE_JSON_STR or not Config.GOOGLE_JSON_STR.strip(): return None 
            if not Config.GOOGLE_JSON_STR.strip().startswith('{'): 
                logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_JSON –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON –æ–±—ä–µ–∫—Ç–æ–º.") 
                return None 
            creds_dict = json.loads(Config.GOOGLE_JSON_STR) 
            creds = Credentials.from_service_account_info(creds_dict, scopes=['https://www.googleapis.com/auth/spreadsheets']) 
            return gspread.authorize(creds).open_by_key(Config.SHEET_ID).worksheet(Config.SHEET_NAME) 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}", exc_info=True); return None 

    def log_to_sheet(self, row_data: list): 
        try: 
            sheet = self.get_gsheet() 
            if sheet: sheet.append_row(row_data, value_input_option='USER_ENTERED') 
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}") 

    def _sanitize_html(self, html_string: str) -> str: 
        soup = BeautifulSoup(html_string, "html.parser") 
        allowed_tags = {'b', 'strong', 'i', 'em', 'u', 'ins', 's', 'strike', 'del', 'a', 'code', 'pre'} 
        for tag in soup.find_all(True): 
            if tag.name not in allowed_tags: 
                tag.unwrap() 
        clean_text = str(soup) 
        clean_text = re.sub(r'</?p>|<br\s*/?>', '\n', clean_text, flags=re.I) 
        return re.sub(r'\n{2,}', '\n\n', clean_text).strip() 

    def ask_gpt(self, prompt: str, model: str = "gpt-4o"): 
        if not openai_client: return "[‚ùå –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.]" 
        try: 
            res = openai_client.chat.completions.create(model=model, messages=[{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å HTML-—Ç–µ–≥–∞–º–∏: <b>, <i>, <a>, <code>, <pre>."}, {"role": "user", "content": prompt}], timeout=20.0) 
            raw_html = res.choices[0].message.content.strip() 
            return self._sanitize_html(raw_html) 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {e}"); return "[‚ùå –û—à–∏–±–∫–∞ GPT.]" 

    def get_crypto_price(self, ticker="BTC"): 
        ticker = ticker.upper() 
        coingecko_id = Config.COINGECKO_MAP.get(ticker) 
        
        sources = [ 
            {"name": "CoinGecko", "url": f"https://api.coingecko.com/api/v3/simple/price?ids={coingecko_id}&vs_currencies=usd", "parser": lambda data: data.get(coingecko_id, {}).get('usd'), "enabled": bool(coingecko_id)}, 
            {"name": "Bybit", "url": f"https://api.bybit.com/v5/market/tickers?category=spot&symbol={ticker}USDT", "parser": lambda data: data.get('result', {}).get('list', [{}])[0].get('lastPrice'), "enabled": True}, 
            {"name": "KuCoin", "url": f"https://api.kucoin.com/api/v1/market/orderbook/level1?symbol={ticker}-USDT", "parser": lambda data: data.get('data', {}).get('price'), "enabled": True}, 
            {"name": "Binance", "url": f"https://api.binance.com/api/v3/ticker/price?symbol={ticker}USDT", "parser": lambda data: data.get('price'), "enabled": True} 
        ] 

        for source in sources: 
            if not source['enabled']: continue 
            data = self._make_request(source['url'], timeout=4) 
            if data: 
                price_str = source['parser'](data) 
                if price_str: 
                    try: 
                        logger.info(f"–¶–µ–Ω–∞ –¥–ª—è {ticker} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å {source['name']}.") 
                        return (float(price_str), source['name']) 
                    except (ValueError, TypeError): 
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É –æ—Ç {source['name']}: {price_str}") 
                        continue 
        
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker} –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.") 
        return (None, None) 

    # ========================================================================================
    # –ë–õ–û–ö –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û–ë ASIC. –í–ï–†–°–ò–Ø 3.0 - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ù–ê–î–ï–ñ–ù–û–°–¢–¨
    # ========================================================================================
    def _get_asics_from_minerstat(self): 
        """–ò—Å—Ç–æ—á–Ω–∏–∫ #1: API –æ—Ç Minerstat."""
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #1 (API): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å minerstat.com...")
        url = "https://api.minerstat.com/v2/hardware" 
        all_hardware = self._make_request(url, is_json=True) 
        if not all_hardware: return None 
        try: 
            asics = []
            for device in all_hardware:
                if not isinstance(device, dict) or device.get("type") != "asic":
                    continue
                best_algo = None
                max_revenue = -1
                for algo_name, algo_data in device.get("algorithms", {}).items():
                    revenue = float(algo_data.get("revenue_in_usd", "0").replace("$", ""))
                    if revenue > max_revenue:
                        max_revenue = revenue
                        best_algo = algo_data
                if best_algo and max_revenue > 0:
                    hashrate_val = float(best_algo.get('speed', 0))
                    if hashrate_val / 1e12 >= 1: hashrate_str = f"{hashrate_val / 1e12:.2f} TH/s"
                    elif hashrate_val / 1e9 >= 1: hashrate_str = f"{hashrate_val / 1e9:.2f} GH/s"
                    else: hashrate_str = f"{hashrate_val / 1e6:.2f} MH/s"
                    asics.append({ 
                        'name': device.get("name", "N/A"), 'hashrate': hashrate_str, 
                        'power_watts': float(best_algo.get("power", 0)), 'daily_revenue': max_revenue
                    })
            if not asics: raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC –≤ API.") 
            return sorted(asics, key=lambda x: x['daily_revenue'], reverse=True) 
        except Exception as e: 
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å minerstat.com: {e}"); return None 

    def _get_asics_from_whattomine(self):
        """–ò—Å—Ç–æ—á–Ω–∏–∫ #2: JSON API –æ—Ç WhatToMine."""
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #2 (API): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å whattomine.com...")
        url = "https://whattomine.com/asics.json"
        data = self._make_request(url, is_json=True)
        if not data or 'asics' not in data: return None
        parsed_asics = []
        try:
            for name, asic_data in data['asics'].items():
                revenue_str = asic_data.get('revenue')
                if not revenue_str: continue
                revenue = float(re.sub(r'[^\d\.]', '', revenue_str))
                if revenue > 0 and asic_data.get('status') == 'Active':
                    parsed_asics.append({
                        'name': name, 'hashrate': f"{asic_data.get('hashrate')} {asic_data.get('algorithm')}",
                        'power_watts': float(asic_data.get('power', 0)), 'daily_revenue': revenue
                    })
            if not parsed_asics: raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC –≤ API WhatToMine.") 
            return sorted(parsed_asics, key=lambda x: x['daily_revenue'], reverse=True)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å whattomine.com: {e}"); return None

    def _get_asics_from_viabtc(self):
        """–ò—Å—Ç–æ—á–Ω–∏–∫ #3: API –æ—Ç ViaBTC."""
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #3 (API): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å viabtc.com...")
        url = "https://www.viabtc.com/api/v1/tools/miner/revenue?coin=BTC&unit=T"
        response = self._make_request(url, is_json=True)
        if not response or response.get('code') != 0 or not response.get('data'): return None
        parsed_asics = []
        try:
            for miner in response['data']:
                revenue = float(miner.get('revenue_usd', 0))
                if revenue > 0:
                    parsed_asics.append({
                        'name': miner.get('miner_name', 'N/A'),
                        'hashrate': f"{float(miner.get('hashrate', 0)):.2f} TH/s",
                        'power_watts': float(miner.get('power', 0)) * 1000,
                        'daily_revenue': revenue
                    })
            if not parsed_asics: raise ValueError("API ViaBTC –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC.")
            return sorted(parsed_asics, key=lambda x: x['daily_revenue'], reverse=True)
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ API ViaBTC: {e}", exc_info=True); return None
            
    def _get_asics_from_asicminervalue(self): 
        """–ò—Å—Ç–æ—á–Ω–∏–∫ #4: –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ asicminervalue.com."""
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #4 (–ü–∞—Ä—Å–∏–Ω–≥): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å asicminervalue.com...")
        response = self._make_request("https://www.asicminervalue.com", is_json=False) 
        if not response: return None 
        try: 
            soup = BeautifulSoup(response.text, "lxml") 
            parsed_asics = [] 
            rows = soup.select("tbody > tr") 
            if not rows: raise ValueError("–ü–∞—Ä—Å–∏–Ω–≥ (AMV): –¢–µ–≥ tbody –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ (AMV): –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫.") 
            COL_MODEL, COL_HASHRATE, COL_POWER, COL_PROFIT = 0, 2, 3, 6
            for row in rows: 
                cols = row.find_all("td") 
                if len(cols) <= COL_PROFIT: continue 
                try: 
                    name_tag = cols[COL_MODEL].find('a')
                    name = name_tag.get_text(strip=True) if name_tag else cols[COL_MODEL].get_text(strip=True)
                    if not name or name.strip() in ['N/A', '']: continue
                    hashrate_text = cols[COL_HASHRATE].get_text(strip=True) 
                    power_text = cols[COL_POWER].get_text(strip=True) 
                    power_match = re.search(r'([\d,]+)', power_text)
                    if not power_match: continue
                    power_val = float(power_match.group(1).replace(',', ''))
                    full_revenue_text = cols[COL_PROFIT].get_text(strip=True) 
                    revenue_match = re.search(r'(-?)\$?([\d\.]+)', full_revenue_text) 
                    if not revenue_match: continue 
                    sign = -1 if revenue_match.group(1) == '-' else 1 
                    revenue_val = float(revenue_match.group(2)) * sign 
                    if revenue_val > 0: 
                        parsed_asics.append({'name': name.strip(), 'hashrate': hashrate_text, 'power_watts': power_val, 'daily_revenue': revenue_val}) 
                except Exception as e: 
                    logger.warning(f"–ü–∞—Ä—Å–∏–Ω–≥ (AMV): –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {row.get_text(strip=True, separator='|')} - {e}") 
                    continue 
            if not parsed_asics: raise ValueError("–ü–∞—Ä—Å–∏–Ω–≥ (AMV): –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.") 
            return sorted(parsed_asics, key=lambda x: x['daily_revenue'], reverse=True) 
        except Exception as e: 
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ASICMinerValue: {e}", exc_info=True); return None 

    def _get_asics_from_hashrate_no(self):
        """–ò—Å—Ç–æ—á–Ω–∏–∫ #5: –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ hashrate.no."""
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #5 (–ü–∞—Ä—Å–∏–Ω–≥): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å hashrate.no...")
        url = "https://www.hashrate.no/asics"
        response = self._make_request(url, is_json=False)
        if not response: return None
        try:
            soup = BeautifulSoup(response.text, 'lxml')
            parsed_asics = []
            table = soup.find('table', id='asic-table')
            if not table: raise ValueError("–ü–∞—Ä—Å–∏–Ω–≥ (hashrate.no): –¢–∞–±–ª–∏—Ü–∞ —Å id='asic-table' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            rows = table.select('tbody tr')
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ (hashrate.no): –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫.")
            for row in rows:
                try:
                    cols = row.find_all('td')
                    if len(cols) < 7: continue
                    name_tag = cols[0].find('a');
                    if not name_tag: continue
                    name = name_tag.get_text(strip=True)
                    hashrate = cols[2].get_text(strip=True)
                    power_str = cols[3].get_text(strip=True)
                    power_val = float(re.search(r'[\d,]+', power_str).group(0).replace(',', ''))
                    revenue_str = cols[5].get_text(strip=True).replace('$', '').replace(',', '')
                    revenue_val = float(revenue_str)
                    if revenue_val > 0:
                        parsed_asics.append({'name': name, 'hashrate': hashrate, 'power_watts': power_val, 'daily_revenue': revenue_val})
                except Exception as e:
                    logger.warning(f"–ü–∞—Ä—Å–∏–Ω–≥ (hashrate.no): –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue
            if not parsed_asics: raise ValueError("–ü–∞—Ä—Å–∏–Ω–≥ (hashrate.no): –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ.")
            return sorted(parsed_asics, key=lambda x: x['daily_revenue'], reverse=True)
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ hashrate.no: {e}", exc_info=True); return None

    def _get_asics_from_2cryptocalc(self):
        """–ò—Å—Ç–æ—á–Ω–∏–∫ #6: API –æ—Ç 2CryptoCalc."""
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #6 (API): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å 2cryptocalc.com...")
        url = "https://2cryptocalc.com/api/v2/miners" # –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        logger.warning(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #6 ({url}) –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        return None

    def _get_asics_from_nicehash(self):
        """–ò—Å—Ç–æ—á–Ω–∏–∫ #7: API –æ—Ç NiceHash."""
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #7 (API): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å NiceHash...")
        url = "https://api2.nicehash.com/main/api/v2/public/profcalc/devices"
        response = self._make_request(url, is_json=True)
        if not response or not response.get('devices'): return None
        parsed_asics = []
        try:
            for device in response['devices']:
                revenue = float(device.get('paying', 0)) * 1000 * 1000 * 1000 # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ BTC/MH/day –≤ BTC/TH/day
                power = float(device.get('power', 0))
                if revenue > 0:
                    parsed_asics.append({
                        'name': f"NiceHash: {device.get('name', 'N/A')}",
                        'hashrate': f"{device.get('speed')} {device.get('speed_unit')}",
                        'power_watts': power,
                        'daily_revenue': revenue
                    })
            if not parsed_asics: raise ValueError("API NiceHash –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC.")
            
            # –ù—É–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ USD
            btc_price, _ = self.get_crypto_price('BTC')
            if not btc_price: 
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å NiceHash.")
                return None
            
            for asic in parsed_asics:
                asic['daily_revenue'] *= btc_price

            return sorted(parsed_asics, key=lambda x: x['daily_revenue'], reverse=True)
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ API NiceHash: {e}", exc_info=True); return None

    def get_top_asics(self, force_update: bool = False): 
        if not force_update and self.asic_cache.get("data") and self.asic_cache.get("timestamp") and (datetime.now() - self.asic_cache.get("timestamp") < timedelta(hours=1)): 
            logger.info("–ò—Å–ø–æ–ª—å–∑—É—é —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞.")
            return self.asic_cache.get("data") 

        asics = None
        source_functions = [
            self._get_asics_from_viabtc,
            self._get_asics_from_minerstat,
            self._get_asics_from_whattomine,
            self._get_asics_from_nicehash,
            self._get_asics_from_hashrate_no,
            self._get_asics_from_asicminervalue,
        ]

        for i, get_asics_func in enumerate(source_functions):
            try:
                asics = get_asics_func()
                if asics:
                    logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ #{i+1} ({get_asics_func.__name__}).")
                    break
                else:
                    logger.warning(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #{i+1} ({get_asics_func.__name__}) –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.")
            except Exception as e:
                logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ #{i+1} ({get_asics_func.__name__}): {e}", exc_info=True)
                continue

        if asics: 
            self.asic_cache = {"data": asics[:10], "timestamp": datetime.now()} 
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(self.asic_cache['data'])} ASIC.") 
            self._save_asic_cache_to_file() 
            return self.asic_cache["data"] 
        
        if self.asic_cache.get("data"): 
            logger.warning("–í—Å–µ –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞.") 
            return self.asic_cache.get("data") 
        
        logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í—Å–µ –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å–ø–∏—Å–æ–∫ ASIC.") 
        return Config.FALLBACK_ASICS 
    
    def get_fear_and_greed_index(self): 
        data = self._make_request("https://api.alternative.me/fng/?limit=1") 
        if not data or 'data' not in data or not data['data']: 
            return None, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]" 
        
        try: 
            value_data = data['data'][0] 
            value, classification = int(value_data['value']), value_data['value_classification'] 
            
            plt.style.use('dark_background'); fig, ax = plt.subplots(figsize=(8, 4.5), subplot_kw={'projection': 'polar'}) 
            ax.set_yticklabels([]); ax.set_xticklabels([]); ax.grid(False); ax.spines['polar'].set_visible(False); ax.set_ylim(0, 1) 
            colors = ['#d94b4b', '#e88452', '#ece36a', '#b7d968', '#73c269'] 
            for i in range(100): ax.barh(1, 0.0314, left=3.14 - (i * 0.0314), height=0.3, color=colors[min(len(colors) - 1, int(i / 25))]) 
            angle = 3.14 - (value * 0.0314) 
            ax.annotate('', xy=(angle, 1), xytext=(0, 0), arrowprops=dict(facecolor='white', shrink=0.05, width=4, headwidth=10)) 
            fig.text(0.5, 0.5, f"{value}", ha='center', va='center', fontsize=48, color='white', weight='bold') 
            fig.text(0.5, 0.35, classification, ha='center', va='center', fontsize=20, color='white') 
            buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=150, transparent=True); buf.seek(0); plt.close(fig) 
            
            prompt = f"–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –¥–ª—è –º–∞–π–Ω–µ—Ä–∞, –∫–∞–∫ '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{value} ({classification})' –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫. –ù–µ –±–æ–ª–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π." 
            explanation = self.ask_gpt(prompt) 
            text = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>\n\n{explanation}" 
            return buf, text 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}", exc_info=True) 
            return None, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]" 

    def get_usd_rub_rate(self):
        if self.currency_cache.get("rate") and (datetime.now() - self.currency_cache.get("timestamp", datetime.min) < timedelta(minutes=30)):
            return self.currency_cache["rate"], False

        # –ò—Å—Ç–æ—á–Ω–∏–∫ #1: API –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        try:
            today = datetime.now().strftime('%d/%m/%Y')
            cbr_url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req={today}"
            response = self._make_request(cbr_url, is_json=False)
            if response:
                root = ET.fromstring(response.content)
                usd_rate_str = root.find("./Valute[CharCode='USD']/Value").text
                rate = float(usd_rate_str.replace(',', '.'))
                self.currency_cache = {"rate": rate, "timestamp": datetime.now()}
                logger.info(f"–ö—É—Ä—Å USD/RUB –ø–æ–ª—É—á–µ–Ω —Å cbr.ru: {rate}")
                return rate, False
        except Exception as e:
            logger.warning(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #1 (cbr.ru) –Ω–µ —É–¥–∞–ª—Å—è: {e}")

        # –ö–∞—Å–∫–∞–¥ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö API
        sources = [
            ("https://api.exchangerate.host/latest?base=USD&symbols=RUB", lambda data: data.get('rates', {}).get('RUB')),
            ("https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.json", lambda data: data.get('usd', {}).get('rub')),
            ("https://open.er-api.com/v6/latest/USD", lambda data: data.get('rates', {}).get('RUB')),
            ("https://api.frankfurter.app/latest?from=USD&to=RUB", lambda data: data.get('rates', {}).get('RUB')),
            ("https://api.exchangerate-api.com/v4/latest/USD", lambda data: data.get('rates', {}).get('RUB')),
        ]
        
        for i, (url, parser) in enumerate(sources):
            try:
                data = self._make_request(url)
                if not data:
                    logger.warning(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–∞ #{i+2} ({url}) –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ.")
                    continue
                rate = parser(data)
                if rate:
                    logger.info(f"–ö—É—Ä—Å USD/RUB –ø–æ–ª—É—á–µ–Ω —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ #{i+2}: {rate}")
                    self.currency_cache = {"rate": float(rate), "timestamp": datetime.now()}
                    return float(rate), False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫—É—Ä—Å–∞ #{i+2} ({url}): {e}")
                continue

        logger.error("–í—Å–µ –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é –∞–≤–∞—Ä–∏–π–Ω—ã–π –∫—É—Ä—Å.")
        return 85.0, True # –ê–≤–∞—Ä–∏–π–Ω—ã–π –∫—É—Ä—Å –∏ —Ñ–ª–∞–≥, —á—Ç–æ –æ–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π

    def get_halving_info(self): 
        response = self._make_request("https://blockchain.info/q/getblockcount", is_json=False) 
        if not response: return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ]" 
        try: 
            current_block = int(response.text) 
            blocks_left = ((current_block // Config.HALVING_INTERVAL) + 1) * Config.HALVING_INTERVAL - current_block 
            if blocks_left <= 0: return "üéâ <b>–•–∞–ª–≤–∏–Ω–≥ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª!</b>" 
            days, rem_min = divmod(blocks_left * 10, 1440); hours, _ = divmod(rem_min, 60) 
            return f"‚è≥ <b>–î–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\nüóì <b>–î–Ω–µ–π:</b> <code>{days}</code> | ‚è∞ <b>–ß–∞—Å–æ–≤:</b> <code>{hours}</code>\nüß± <b>–ë–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞:</b> <code>{blocks_left:,}</code>" 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞: {e}"); return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ]" 

    def _get_news_from_cryptopanic(self): 
        if not Config.CRYPTO_API_KEY: return [] 
        url = f"https://cryptopanic.com/api/v1/posts/?auth_token={Config.CRYPTO_API_KEY}&public=true" 
        data = self._make_request(url) 
        if not data or 'results' not in data: return [] 
        
        news_items = [] 
        for post in data['results']: 
            try: 
                published_time = date_parser.parse(post.get('created_at')).replace(tzinfo=None) if post.get('created_at') else datetime.utcnow() 
                news_items.append({'title': post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'), 'link': post.get('url', ''), 'published': published_time}) 
            except Exception as e: 
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ CryptoPanic: {e}") 
                continue 
        return news_items 

    def _get_news_from_rss(self, url): 
        try: 
            user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' 
            feed = feedparser.parse(url, agent=user_agent) 
            
            if feed.bozo: logger.warning(f"–õ–µ–Ω—Ç–∞ {url} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π (bozo-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ): {feed.bozo_exception}") 

            news_items = [] 
            for entry in feed.entries: 
                try: 
                    published_time = date_parser.parse(entry.published).replace(tzinfo=None) if hasattr(entry, 'published') else datetime.utcnow() 
                    news_items.append({'title': entry.title, 'link': entry.link, 'published': published_time}) 
                except Exception as e: 
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è RSS-–Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {url}: {e}") 
                    continue 
            return news_items 
        except Exception as e: 
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {url}: {e}") 
            return [] 

    def get_crypto_news(self): 
        all_news = [] 
        
        logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç...") 
        for url in Config.NEWS_RSS_FEEDS: 
            all_news.extend(self._get_news_from_rss(url)) 

        if len(all_news) < 3 and Config.CRYPTO_API_KEY: 
            logger.info("–ò–∑ RSS –ø–æ–ª—É—á–µ–Ω–æ –º–∞–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –ø—Ä–æ–±—É—é CryptoPanic...") 
            all_news.extend(self._get_news_from_cryptopanic()) 

        if not all_news: 
            return "[üßê –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.]" 

        all_news.sort(key=lambda x: x['published'], reverse=True) 
        seen_titles = set() 
        unique_news = [] 
        for item in all_news: 
            if item['title'] not in seen_titles: 
                unique_news.append(item) 
                seen_titles.add(item['title']) 

        latest_news = unique_news[:3] 

        items = [] 
        for p in latest_news: 
            summary = self.ask_gpt(f"–°–¥–µ–ª–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: '{p['title']}'", "gpt-4o-mini") 
            clean_summary = summary.replace("[‚ùå –û—à–∏–±–∫–∞ GPT.]", p['title']) 
            items.append(f"üîπ <a href=\"{p.get('link', '')}\">{clean_summary}</a>") 
            
        return "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(items) 
    
    def get_eth_gas_price(self): 
        data = self._make_request("https://ethgas.watch/api/gas") 
        if not data: return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ]" 
        try: 
            return (f"‚õΩÔ∏è <b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ (Gwei):</b>\n\n" 
                    f"üê¢ <b>–ú–µ–¥–ª–µ–Ω–Ω–æ:</b> <code>{data.get('slow', {}).get('gwei', 'N/A')}</code>\n" 
                    f"üö∂‚Äç‚ôÇÔ∏è <b>–°—Ä–µ–¥–Ω–µ:</b> <code>{data.get('normal', {}).get('gwei', 'N/A')}</code>\n" 
                    f"üöÄ <b>–ë—ã—Å—Ç—Ä–æ:</b> <code>{data.get('fast', {}).get('gwei', 'N/A')}</code>\n\n" 
                    f"<i>–î–∞–Ω–Ω—ã–µ –æ—Ç ethgas.watch</i>") 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞–∑–µ: {e}"); return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ]" 

    def get_btc_network_status(self): 
        try: 
            session = requests.Session() 
            session.headers.update({'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}) 
            
            height_res = session.get("https://mempool.space/api/blocks/tip/height", timeout=5) 
            fees_res = session.get("https://mempool.space/api/v1/fees/recommended", timeout=5) 
            mempool_res = session.get("https://mempool.space/api/mempool", timeout=5) 

            height_res.raise_for_status(); fees_res.raise_for_status(); mempool_res.raise_for_status() 

            height = int(height_res.text) 
            fees = fees_res.json() 
            mempool = mempool_res.json() 

            unconfirmed_txs = mempool.get('count', 'N/A') 
            fastest_fee = fees.get('fastestFee', 'N/A') 
            half_hour_fee = fees.get('halfHourFee', 'N/A') 
            hour_fee = fees.get('hourFee', 'N/A') 
            
            return (f"üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin:</b>\n\n" 
                    f"üß± <b>–¢–µ–∫—É—â–∏–π –±–ª–æ–∫:</b> <code>{height:,}</code>\n" 
                    f"üìà <b>–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>{unconfirmed_txs:,}</code>\n\n" 
                    f"üí∏ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (sat/vB):</b>\n" 
                    f"  - üöÄ <b>–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <code>{fastest_fee}</code>\n" 
                    f"  - üö∂‚Äç‚ôÇÔ∏è <b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <code>{half_hour_fee}</code>\n" 
                    f"  - üê¢ <b>–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <code>{hour_fee}</code>") 

        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ Bitcoin: {e}") 
            return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏ Bitcoin.]" 
    
    def get_new_quiz_questions(self): 
        try: 
            count = min(Config.QUIZ_QUESTIONS_COUNT, len(Config.QUIZ_QUESTIONS)) 
            return random.sample(Config.QUIZ_QUESTIONS, count) 
        except Exception as e: 
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}") 
            return None 


class GameLogic: 
    def __init__(self, data_file): 
        self.data_file = data_file 
        self.user_rigs = self.load_data() 
        atexit.register(self.save_data) 

    def load_data(self): 
        try: 
            if os.path.exists(self.data_file): 
                with open(self.data_file, 'r', encoding='utf-8') as f: 
                    loaded_data = json.load(f) 
                    rigs = {int(uid): data for uid, data in loaded_data.items()} 
                    for rig_data in rigs.values(): 
                        for key, value in rig_data.items(): 
                            if isinstance(value, str) and ('until' in key or 'collected' in key): 
                                try: rig_data[key] = datetime.fromisoformat(value) 
                                except ValueError: rig_data[key] = None 
                    logger.info(f"–î–∞–Ω–Ω—ã–µ {len(rigs)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.") 
                    return rigs 
        except Exception as e: 
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True) 
        return {} 

    def save_data(self): 
        try: 
            with open(self.data_file, 'w', encoding='utf-8') as f: 
                data_to_save = json.loads(json.dumps(self.user_rigs, default=str)) 
                json.dump(data_to_save, f, indent=4, ensure_ascii=False) 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True) 

    def create_rig(self, user_id, user_name, asic_data): 
        if user_id in self.user_rigs: return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–µ—Ä–º–∞!" 
        
        btc_price, _ = api.get_crypto_price("BTC") 
        if not btc_price: btc_price = 60000  
        
        self.user_rigs[user_id] = { 
            'last_collected': None, 'balance': 0.0, 'level': 1, 'streak': 0,  
            'name': user_name, 'boost_active_until': None, 
            'asic_model': asic_data['name'], 
            'base_rate': asic_data['daily_revenue'] / btc_price, 
            'overclock_bonus': 0.0, 
            'penalty_multiplier': 1.0 
        } 
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ñ–µ—Ä–º–∞ —Å <b>{asic_data['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!" 

    def get_rig_info(self, user_id, user_name): 
        rig = self.user_rigs.get(user_id) 
        if not rig: 
            starter_asics = api.get_top_asics() 
            if not starter_asics: 
                return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None 
            
            markup = types.InlineKeyboardMarkup(row_width=1) 
            choices = random.sample(starter_asics, k=min(3, len(starter_asics))) 
            temp_user_choices[user_id] = choices 
            buttons = [types.InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {asic['name']}", callback_data=f"start_rig_{i}") for i, asic in enumerate(choices)] 
            markup.add(*buttons) 
            return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –ø–µ—Ä–≤—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ñ–µ—Ä–º—É. –í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–∞–∫–æ–≥–æ ASIC –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å:", markup 
        
        rig['name'] = user_name 

        next_level = rig['level'] + 1 
        upgrade_cost_text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: <code>{Config.UPGRADE_COSTS.get(next_level, 'N/A')}</code> BTC." if next_level in Config.UPGRADE_COSTS else "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!" 
        
        boost_status = "" 
        boost_until = rig.get('boost_active_until') 
        if boost_until and datetime.now() < boost_until: 
            time_left = boost_until - datetime.now() 
            h, rem = divmod(time_left.seconds, 3600); m, _ = divmod(rem, 60) 
            boost_status = f"‚ö°Ô∏è <b>–ë—É—Å—Ç x2 –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ: {h}—á {m}–º</b>\n" 
        
        base_rate = rig.get('base_rate', 0.0001) 
        overclock_bonus = rig.get('overclock_bonus', 0.0) 
        current_rate = base_rate * (1 + overclock_bonus) * Config.LEVEL_MULTIPLIERS.get(rig['level'], 1) 
        overclock_text = f"(+ {overclock_bonus:.1%})" if overclock_bonus > 0 else "" 

        text = (f"üñ•Ô∏è <b>–§–µ—Ä–º–∞ ¬´{telebot.util.escape(rig['name'])}¬ª</b>\n" 
                f"<i>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {rig.get('asic_model', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ')}</i>\n\n" 
                f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {rig['level']}\n" 
                f"<b>–ë–∞–∑–æ–≤–∞—è –¥–æ–±—ã—á–∞:</b> <code>{current_rate:.8f} BTC/–¥–µ–Ω—å</code> {overclock_text}\n" 
                f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{rig['balance']:.8f}</code> BTC\n" 
                f"<b>–î–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è:</b> {rig['streak']} üî• (–±–æ–Ω—É—Å <b>+{rig['streak'] * Config.STREAK_BONUS_MULTIPLIER:.0%}</b>)\n" 
                f"{boost_status}\n{upgrade_cost_text}") 
        return text, None 

    def collect_reward(self, user_id): 
        rig = self.user_rigs.get(user_id) 
        if not rig: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>." 
        
        now = datetime.now() 
        last_collected = rig.get('last_collected') 
        
        if last_collected and (now - last_collected) < timedelta(hours=23, minutes=55): 
            time_left = timedelta(hours=24) - (now - last_collected) 
            h, m = divmod(time_left.seconds, 3600)[0], divmod(time_left.seconds % 3600, 60)[0] 
            return f"–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ <b>{h}—á {m}–º</b>." 
        
        rig['streak'] = rig['streak'] + 1 if last_collected and (now - last_collected) < timedelta(hours=48) else 1 
        
        base_rate = rig.get('base_rate', 0.0001) 
        overclock_bonus = rig.get('overclock_bonus', 0.0) 
        level_multiplier = Config.LEVEL_MULTIPLIERS.get(rig['level'], 1) 
        base_mined = base_rate * (1 + overclock_bonus) * level_multiplier 

        streak_bonus = base_mined * rig['streak'] * Config.STREAK_BONUS_MULTIPLIER 
        
        boost_until = rig.get('boost_active_until') 
        boost_multiplier = 2 if boost_until and now < boost_until else 1 
        
        total_mined = (base_mined + streak_bonus) * boost_multiplier 
        
        penalty = rig.get('penalty_multiplier', 1.0) 
        total_mined *= penalty 
        penalty_text = "" 
        if penalty < 1.0: 
            penalty_text = f"\nüìâ <i>–ü—Ä–∏–º–µ–Ω–µ–Ω —à—Ç—Ä–∞—Ñ {penalty:.0%} –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.</i>" 
            rig['penalty_multiplier'] = 1.0 

        rig['balance'] += total_mined 
        rig['last_collected'] = now 

        event_text = "" 
        if random.random() < Config.RANDOM_EVENT_CHANCE: 
            if random.random() < 0.5: 
                bonus_pct = random.randint(5, 15) 
                bonus_amount = total_mined * (bonus_pct / 100) 
                rig['balance'] += bonus_amount 
                event_text = f"\n\nüéâ <b>–°–æ–±—ã—Ç–∏–µ: –ü–∞–º–ø –∫—É—Ä—Å–∞!</b> –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ <b>{bonus_pct}%</b> (+{bonus_amount:.8f} BTC)!" 
            else: 
                penalty_pct = random.randint(10, 25) 
                rig['penalty_multiplier'] = 1 - (penalty_pct / 100) 
                event_text = f"\n\nüí• <b>–°–æ–±—ã—Ç–∏–µ: –°–∫–∞—á–æ–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è!</b> –í–∞—à–∞ —Å–ª–µ–¥—É—é—â–∞—è –¥–æ–±—ã—á–∞ –±—É–¥–µ—Ç —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ <b>{penalty_pct}%</b>. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!" 
        
        return (f"‚úÖ –°–æ–±—Ä–∞–Ω–æ <b>{total_mined:.8f}</b> BTC{' (x2 –ë—É—Å—Ç!)' if boost_multiplier > 1 else ''}!\n" 
                f"  (–ë–∞–∑–∞: {base_mined:.8f} + –°–µ—Ä–∏—è: {streak_bonus:.8f}){penalty_text}\n" 
                f"üî• –í–∞—à–∞ —Å–µ—Ä–∏—è: <b>{rig['streak']} –¥–Ω–µ–π!</b>\n" 
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{rig['balance']:.8f}</code> BTC.{event_text}") 

    def buy_item(self, user_id, item_key): 
        rig = self.user_rigs.get(user_id) 
        if not rig: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã." 
        
        item = Config.SHOP_ITEMS.get(item_key) 
        if not item: return "‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç." 

        if rig['balance'] < item['cost']: 
            return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b> –ù—É–∂–Ω–æ {item['cost']:.4f} BTC." 

        rig['balance'] -= item['cost'] 
        
        if item_key == 'boost': 
            rig['boost_active_until'] = datetime.now() + timedelta(hours=24) 
            return f"‚ö°Ô∏è <b>–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±—É—Å—Ç –∫—É–ø–ª–µ–Ω!</b> –í–∞—à–∞ –¥–æ–±—ã—á–∞ —É–¥–≤–æ–µ–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞." 
        
        if item_key == 'overclock': 
            if rig.get('overclock_bonus', 0.0) > 0: 
                return "‚öôÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–≤–µ—Ä–∫–ª–æ–∫–∏–Ω–≥-—á–∏–ø!" 
            rig['overclock_bonus'] = item['effect'] 
            return f"‚öôÔ∏è <b>–û–≤–µ—Ä–∫–ª–æ–∫–∏–Ω–≥-—á–∏–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b> –í–∞—à–∞ –±–∞–∑–æ–≤–∞—è –¥–æ–±—ã—á–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {item['effect']:.0%}." 
        
        return "‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!" 

    def upgrade_rig(self, user_id): 
        rig = self.user_rigs.get(user_id) 
        if not rig: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>." 
        
        next_level = rig['level'] + 1 
        cost = Config.UPGRADE_COSTS.get(next_level) 
        if not cost: return "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã!" 
        
        if rig['balance'] >= cost: 
            rig['balance'] -= cost; rig['level'] = next_level 
            return f"üöÄ <b>–£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n–í–∞—à–∞ —Ñ–µ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ <b>{next_level}</b> —É—Ä–æ–≤–Ω—è!" 
        else: 
            return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>" 
            
    def get_top_miners(self): 
        if not self.user_rigs: return "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞." 
        sorted_rigs = sorted(self.user_rigs.values(), key=lambda r: r.get('balance', 0), reverse=True) 
        response = ["üèÜ <b>–¢–æ–ø-5 –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ú–∞–π–Ω–µ—Ä–æ–≤:</b>\n"] 
        for i, rig in enumerate(sorted_rigs[:5]): 
            response.append(f"<b>{i+1}.</b> {telebot.util.escape(rig.get('name','N/A'))} - <code>{rig.get('balance',0):.6f}</code> BTC (–£—Ä. {rig.get('level',1)})") 
        return "\n".join(response) 
        
    def apply_quiz_reward(self, user_id): 
        if user_id in self.user_rigs: 
            self.user_rigs[user_id]['balance'] += Config.QUIZ_REWARD 
            return f"\n\nüéÅ –ó–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{Config.QUIZ_REWARD:.4f} BTC!</b>" 
        return f"\n\nüéÅ –í—ã –±—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{Config.QUIZ_REWARD:.4f} BTC</b>, –µ—Å–ª–∏ –±—ã —É –≤–∞—Å –±—ã–ª–∞ —Ñ–µ—Ä–º–∞! –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>." 

class SpamAnalyzer: 
    def __init__(self, profiles_file, keywords_file): 
        self.profiles_file = profiles_file 
        self.keywords_file = keywords_file 
        self.user_profiles = self._load_json_file(self.profiles_file, is_profiles=True) 
        self.dynamic_keywords = self._load_json_file(self.keywords_file) 
        atexit.register(self.save_all_data) 

    def _load_json_file(self, file_path, is_profiles=False): 
        try: 
            if os.path.exists(file_path): 
                with open(file_path, 'r', encoding='utf-8') as f: 
                    data = json.load(f) 
                    return {int(k): v for k, v in data.items()} if is_profiles else data 
        except (json.JSONDecodeError, TypeError) as e: 
            logger.error(f"–§–∞–π–ª {file_path} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π. –û—à–∏–±–∫–∞: {e}") 
        except Exception as e: 
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}") 
        return {} if is_profiles else [] 

    def save_all_data(self): 
        try: 
            with open(self.profiles_file, 'w', encoding='utf-8') as f: 
                json.dump(self.user_profiles, f, indent=4, ensure_ascii=False) 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}") 
        
        try: 
            with open(self.keywords_file, 'w', encoding='utf-8') as f: 
                json.dump(self.dynamic_keywords, f, indent=4, ensure_ascii=False) 
        except Exception as e: 
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}") 

    def add_keywords_from_text(self, text): 
        if not text: return 
        words = re.findall(r'\b\w{5,}\b', text.lower()) 
        new_keywords = {word for word in words if not word.isdigit()} 
        
        added_count = 0 
        for keyword in new_keywords: 
            if keyword not in Config.SPAM_KEYWORDS and keyword not in self.dynamic_keywords: 
                self.dynamic_keywords.append(keyword) 
                added_count += 1 
        
        if added_count > 0: 
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä.") 
            self.save_all_data() 

    def process_message(self, msg: types.Message): 
        user = msg.from_user 
        text = msg.text or "" 
        
        profile = self.user_profiles.setdefault(user.id, { 
            'user_id': user.id, 'name': user.full_name, 'username': user.username, 
            'first_msg': datetime.utcnow().isoformat(), 'msg_count': 0, 'spam_count': 0, 
        }) 
        profile.update({'msg_count': profile.get('msg_count', 0) + 1, 'name': user.full_name, 'username': user.username, 'last_seen': datetime.utcnow().isoformat()}) 

        text_lower = text.lower() 
        all_keywords = Config.SPAM_KEYWORDS + self.dynamic_keywords 
        if any(keyword in text_lower for keyword in all_keywords): 
            self.handle_spam_detection(msg) 

    def handle_spam_detection(self, msg: types.Message):
        user = msg.from_user
        profile = self.user_profiles.get(user.id)
        if not profile: return

        original_text = msg.text or msg.caption or "[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"

        profile['spam_count'] = profile.get('spam_count', 0) + 1
        logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.full_name} ({user.id}). –°—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞: {profile['spam_count']}")

        try:
            bot.delete_message(msg.chat.id, msg.message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
        markup = types.InlineKeyboardMarkup()
        callback_data = f"not_spam_{user.id}_{msg.chat.id}"
        markup.add(types.InlineKeyboardButton("‚úÖ –ù–µ —Å–ø–∞–º", callback_data=callback_data))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        if Config.ADMIN_CHAT_ID:
            try:
                admin_text = (f"‚ùóÔ∏è<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ø–∞–º</b>\n\n"
                              f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {telebot.util.escape(user.full_name)} (<code>{user.id}</code>)\n"
                              f"<b>–ß–∞—Ç ID:</b> <code>{msg.chat.id}</code>\n"
                              f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.</b>\n\n"
                              f"<b>–¢–µ–∫—Å—Ç:</b>\n<blockquote>{telebot.util.escape(original_text)}</blockquote>\n\n"
                              f"<i>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.</i>")
                bot.send_message(Config.ADMIN_CHAT_ID, admin_text, reply_markup=markup)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ (–º—å—é—Ç) –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
        if profile['spam_count'] >= Config.WARN_LIMIT:
            try:
                mute_until = datetime.now() + timedelta(hours=Config.MUTE_DURATION_HOURS)
                bot.restrict_chat_member(msg.chat.id, user.id, until_date=int(mute_until.timestamp()))
                bot.send_message(msg.chat.id, f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telebot.util.escape(user.full_name)} –ø–æ–ª—É—á–∏–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ {Config.MUTE_DURATION_HOURS} —á–∞—Å–æ–≤.")
                profile['spam_count'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –º—å—é—Ç–∞
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –º—å—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
        else:
            remaining_warns = Config.WARN_LIMIT - profile['spam_count']
            bot.send_message(msg.chat.id, f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è {telebot.util.escape(user.full_name)}! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –º—å—é—Ç–∞: <b>{remaining_warns}</b>.\n\n<i>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>")

    def get_user_info_text(self, user_id: int) -> str: 
        profile = self.user_profiles.get(user_id) 
        if not profile: 
            return "üîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞–ª." 
        
        spam_factor = (profile.get('spam_count', 0) / profile.get('msg_count', 1) * 100) 
        
        return (f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n" 
                f"üë§ <b>ID:</b> <code>{profile['user_id']}</code>\n" 
                f"üîñ <b>–ò–º—è:</b> {telebot.util.escape(profile.get('name', 'N/A'))}\n" 
                f"üåê <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{profile.get('username', 'N/A')}\n\n" 
                f"üí¨ <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {profile.get('msg_count', 0)}\n" 
                f"üö® <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {profile.get('spam_count', 0)} (–∏–∑ {Config.WARN_LIMIT})\n" 
                f"üìà <b>–°–ø–∞–º-—Ñ–∞–∫—Ç–æ—Ä:</b> {spam_factor:.2f}%\n\n" 
                f"üóìÔ∏è <b>–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {datetime.fromisoformat(profile['first_msg']).strftime('%d %b %Y, %H:%M') if profile.get('first_msg') else 'N/A'}\n" 
                f"üëÄ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {datetime.fromisoformat(profile['last_seen']).strftime('%d %b %Y, %H:%M') if profile.get('last_seen') else 'N/A'}") 
    
    def get_chat_statistics(self, days=7): 
        now = datetime.utcnow() 
        week_ago = now - timedelta(days=days) 
        total_users = len(self.user_profiles) 
        total_messages = sum(p.get('msg_count', 0) for p in self.user_profiles.values()) 

        active_users = 0; new_users = 0 
        
        for profile in self.user_profiles.values(): 
            if profile.get('last_seen') and datetime.fromisoformat(profile['last_seen']) > week_ago: 
                active_users += 1 
            if profile.get('first_msg') and datetime.fromisoformat(profile['first_msg']) > week_ago: 
                new_users += 1 
        
        if not self.user_profiles: return "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n\n–ü–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö." 

        first_message_date_str = min((p['first_msg'] for p in self.user_profiles.values() if p.get('first_msg')), default=None) 
        days_since_first_msg = (now - datetime.fromisoformat(first_message_date_str)).days if first_message_date_str else 0 
        avg_messages_per_day = total_messages / days_since_first_msg if days_since_first_msg > 0 else total_messages 

        return (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n\n" 
                f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n" 
                f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {active_users}\n" 
                f"üå± <b>–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {new_users}\n\n" 
                f"üí¨ <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {total_messages}\n" 
                f"üìà <b>–°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å (–≤ —Å—Ä–µ–¥–Ω–µ–º):</b> {avg_messages_per_day:.2f}") 

api = ApiHandler() 
game = GameLogic(Config.GAME_DATA_FILE) 
spam_analyzer = SpamAnalyzer(Config.PROFILES_DATA_FILE, Config.DYNAMIC_KEYWORDS_FILE) 
temp_user_choices = {} 

 # ======================================================================================== 
 # 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê 
 # ======================================================================================== 
def get_main_keyboard(): 
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True) 
    buttons = ["üíπ –ö—É—Ä—Å", "‚öôÔ∏è –¢–æ–ø ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üì° –°—Ç–∞—Ç—É—Å BTC", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üéì –°–ª–æ–≤–æ –¥–Ω—è", "üïπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥"] 
    markup.add(*[types.KeyboardButton(text) for text in buttons]) 
    return markup 

def send_message_with_partner_button(chat_id, text, reply_markup=None): 
    try: 
        if not reply_markup: 
            reply_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(random.choice(Config.PARTNER_BUTTON_TEXT_OPTIONS), url=Config.PARTNER_URL)) 
        bot.send_message(chat_id, f"{text}\n\n---\n<i>{random.choice(Config.BOT_HINTS)}</i>", reply_markup=reply_markup, disable_web_page_preview=True) 
    except Exception as e: 
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}") 

def send_photo_with_partner_button(chat_id, photo, caption): 
    try: 
        if not photo: raise ValueError("–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –ø—É—Å—Ç–æ–π") 
        
        hint = f"\n\n---\n<i>{random.choice(Config.BOT_HINTS)}</i>" 
        max_caption_len = 1024 - len(hint) 
        if len(caption) > max_caption_len: 
            caption = caption[:max_caption_len - 3] + "..." 
            
        final_caption = f"{caption}{hint}" 
        
        markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(random.choice(Config.PARTNER_BUTTON_TEXT_OPTIONS), url=Config.PARTNER_URL)) 
        bot.send_photo(chat_id, photo, caption=final_caption, reply_markup=markup) 
    except Exception as e:  
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–º.");  
        send_message_with_partner_button(chat_id, caption) 

def is_admin(chat_id, user_id): 
    try: 
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –≤—Å–µ–≥–¥–∞ –∞–¥–º–∏–Ω
        if str(chat_id) == Config.ADMIN_CHAT_ID:
            return True
        return user_id in [admin.user.id for admin in bot.get_chat_administrators(chat_id)] 
    except Exception as e: 
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}") 
        return False 

 # ======================================================================================== 
 # 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô 
 # ======================================================================================== 
@bot.message_handler(commands=['start', 'help']) 
def handle_start_help(msg): 
    bot.send_message(msg.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n<b>–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤):</b>\n<code>/userinfo</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n<code>/spam</code> - –ø–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–ø–∞–º\n<code>/ban</code> - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n<code>/unban</code> - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n<code>/unmute</code> - —Å–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—å—é—Ç\n<code>/chatstats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç—É", reply_markup=get_main_keyboard()) 

@bot.message_handler(commands=['userinfo', 'ban', 'spam', 'unban', 'unmute', 'chatstats']) 
def handle_admin_commands(msg):
    command_raw = msg.text.split('@')[0].split(' ')[0]
    command = command_raw.lower()

    if not is_admin(msg.chat.id, msg.from_user.id):
        admin_command_descriptions = {
            '/userinfo': '–ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.',
            '/ban': '–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.',
            '/spam': '–æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Å–ø–∞–º –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            '/unban': '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            '/unmute': '—Å–Ω—è—Ç–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            '/chatstats': '–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞.'
        }
        description = admin_command_descriptions.get(command)
        if description:
            bot.reply_to(msg, f"üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ö–æ–º–∞–Ω–¥–∞ <code>{command}</code> –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {description}")
        return

    def get_target_user(message): 
        if message.reply_to_message: return message.reply_to_message.from_user, None 
        try: 
            user_id = int(message.text.split()[1]) 
            return bot.get_chat_member(message.chat.id, user_id).user, None 
        except (IndexError, ValueError): 
            return None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ ID." 
        except Exception as e: 
            return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}" 

    if command == '/userinfo': 
        target_user, error = get_target_user(msg) 
        if error: return bot.reply_to(msg, error) 
        if target_user: bot.send_message(msg.chat.id, spam_analyzer.get_user_info_text(target_user.id)) 

    elif command == '/unban': 
        target_user, error = get_target_user(msg) 
        if error: return bot.reply_to(msg, error) 
        if target_user: 
            try: 
                bot.unban_chat_member(msg.chat.id, target_user.id) 
                bot.reply_to(msg, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telebot.util.escape(target_user.full_name)} —Ä–∞–∑–±–∞–Ω–µ–Ω.") 
            except Exception as e: logger.error(e); bot.reply_to(msg, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å.") 

    elif command == '/unmute': 
        target_user, error = get_target_user(msg) 
        if error: return bot.reply_to(msg, error) 
        if target_user: 
            try: 
                bot.restrict_chat_member(msg.chat.id, target_user.id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True) 
                bot.reply_to(msg, f"–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telebot.util.escape(target_user.full_name)} —Å–Ω—è—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.") 
            except Exception as e: logger.error(e); bot.reply_to(msg, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –º—å—é—Ç.") 

    elif command in ['/ban', '/spam']: 
        if not msg.reply_to_message: return bot.reply_to(msg, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.") 
        
        user_to_act = msg.reply_to_message.from_user 
        original_message = msg.reply_to_message 
        
        try: 
            if command == '/ban': 
                spam_analyzer.add_keywords_from_text(original_message.text) 
                bot.ban_chat_member(msg.chat.id, user_to_act.id) 
                bot.delete_message(msg.chat.id, original_message.message_id) 
                bot.send_message(msg.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telebot.util.escape(user_to_act.full_name)} –∑–∞–±–∞–Ω–µ–Ω.\n<i>–ü—Ä–∏—á–∏–Ω–∞: –°–ø–∞–º. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ñ–∏–ª—å—Ç—Ä.</i>") 
            
            elif command == '/spam': 
                spam_analyzer.handle_spam_detection(original_message) 
                bot.delete_message(msg.chat.id, msg.message_id) 

        except Exception as e: 
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}"); bot.reply_to(msg, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.") 
            
    elif command == '/chatstats': 
        stats_text = spam_analyzer.get_chat_statistics() 
        bot.send_message(msg.chat.id, stats_text) 

@bot.message_handler(func=lambda msg: msg.text == "üíπ –ö—É—Ä—Å", content_types=['text']) 
def handle_price_request(msg): 
    markup = types.InlineKeyboardMarkup(row_width=3) 
    buttons = [types.InlineKeyboardButton(text=ticker, callback_data=f"price_{ticker}") for ticker in Config.POPULAR_TICKERS] 
    markup.add(*buttons) 
    markup.add(types.InlineKeyboardButton(text="‚û°Ô∏è –î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞", callback_data="price_other")) 
    bot.send_message(msg.chat.id, "–ö—É—Ä—Å –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup) 

@bot.callback_query_handler(func=lambda call: call.data.startswith('price_')) 
def handle_price_callback(call): 
    action = call.data.split('_')[1] 
    bot.answer_callback_query(call.id) 
    if action == "other": 
        sent = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: XRP, ADA, TON):", reply_markup=types.ReplyKeyboardRemove()) 
        bot.register_next_step_handler(sent, process_price_step) 
        try: bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None) 
        except Exception: pass 
    else: 
        ticker = action 
        price, source = api.get_crypto_price(ticker) 
        text = f"üíπ –ö—É—Ä—Å {ticker.upper()}/USD: <b>${price:,.2f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})</i>" if price else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {ticker.upper()}." 
        send_message_with_partner_button(call.message.chat.id, text) 
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard()) 


def process_price_step(msg): 
    user_input = msg.text.strip().lower() 
    ticker = Config.TICKER_ALIASES.get(user_input, user_input) 
    
    if not re.match(r'^[a-z0-9]{2,10}$', ticker): 
        text = f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: ¬´{msg.text}¬ª.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>BTC</b>, <b>ETH</b>, <b>SOL</b>." 
    else: 
        price, source = api.get_crypto_price(ticker) 
        text = f"üíπ –ö—É—Ä—Å {ticker.upper()}/USD: <b>${price:,.2f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})</i>" if price else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {ticker.upper()}." 
        
    send_message_with_partner_button(msg.chat.id, text) 
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard()) 

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –¢–æ–ø ASIC", content_types=['text']) 
def handle_asics_text(msg): 
    bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...") 
    asics = api.get_top_asics() 
    if not asics: return send_message_with_partner_button(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± ASIC.") 
    rows = [f"{a['name']:<22.21}| {a['hashrate']:<18.17}| {a['power_watts']:<5.0f}| ${a['daily_revenue']:<10.2f}" for a in asics] 
    response = (f"<pre>–ú–æ–¥–µ–ª—å                       | H/s                 | P, W | –î–æ—Ö–æ–¥/–¥–µ–Ω—å\n" 
                f"----------------------|---------------------|------|-----------\n" + "\n".join(rows) + "</pre>") 
    response += f"\n\n{api.ask_gpt('–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç–∞ –ø–æ —Å–ø–∏—Å–∫—É –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC.', 'gpt-4o-mini')}" 
    send_message_with_partner_button(msg.chat.id, response) 

@bot.message_handler(func=lambda msg: msg.text == "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", content_types=['text']) 
def handle_calculator_request(msg): 
    sent = bot.send_message(msg.chat.id, "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:", reply_markup=types.ReplyKeyboardRemove()) 
    bot.register_next_step_handler(sent, process_calculator_step) 

def process_calculator_step(msg):
    try:
        cost_rub = float(msg.text.replace(',', '.'))
    except ValueError:
        text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.5 –∏–ª–∏ 5)."
        send_message_with_partner_button(msg.chat.id, text)
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return

    rate, is_fallback = api.get_usd_rub_rate()
    
    asics_data = api.get_top_asics()
    if not asics_data:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ASIC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        send_message_with_partner_button(msg.chat.id, text)
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return

    cost_usd = cost_rub / rate
    result = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>"]
    if is_fallback:
        result.append(f"<i>(–í–Ω–∏–º–∞–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å: 1 USD ‚âà {rate:.2f} RUB)</i>")
    result.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞

    for asic in asics_data:
        daily_cost = (asic['power_watts'] / 1000) * 24 * cost_usd
        profit = asic['daily_revenue'] - daily_cost
        result.append(f"<b>{telebot.util.escape(asic['name'])}</b>\n  –ü—Ä–æ—Ñ–∏—Ç: <b>${profit:.2f}/–¥–µ–Ω—å</b>")
    
    text = "\n\n".join(result)
    send_message_with_partner_button(msg.chat.id, text)
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda msg: msg.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏", content_types=['text']) 
def handle_news(msg): bot.send_chat_action(msg.chat.id, 'typing'); send_message_with_partner_button(msg.chat.id, api.get_crypto_news()) 

@bot.message_handler(func=lambda msg: msg.text == "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", content_types=['text']) 
def handle_fear_and_greed(msg): bot.send_message(msg.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–µ–∫—Å–∞..."); image, text = api.get_fear_and_greed_index(); send_photo_with_partner_button(msg.chat.id, image, text) if image else send_message_with_partner_button(msg.chat.id, text) 

@bot.message_handler(func=lambda msg: msg.text == "‚è≥ –•–∞–ª–≤–∏–Ω–≥", content_types=['text']) 
def handle_halving(msg): send_message_with_partner_button(msg.chat.id, api.get_halving_info()) 

@bot.message_handler(func=lambda msg: msg.text == "üì° –°—Ç–∞—Ç—É—Å BTC", content_types=['text']) 
def handle_btc_status(msg): 
    bot.send_message(msg.chat.id, "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏ Bitcoin...") 
    status_text = api.get_btc_network_status() 
    send_message_with_partner_button(msg.chat.id, status_text) 

@bot.message_handler(commands=['gas']) 
def handle_gas(msg): send_message_with_partner_button(msg.chat.id, api.get_eth_gas_price()) 

@bot.message_handler(func=lambda msg: msg.text == "üéì –°–ª–æ–≤–æ –¥–Ω—è", content_types=['text']) 
def handle_word_of_the_day(msg): 
    term = random.choice(Config.CRYPTO_TERMS) 
    explanation = api.ask_gpt(f"–û–±—ä—è—Å–Ω–∏ —Ç–µ—Ä–º–∏–Ω '{term}' –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).", "gpt-4o-mini") 
    send_message_with_partner_button(msg.chat.id, f"üéì <b>–°–ª–æ–≤–æ –¥–Ω—è: {term}</b>\n\n{explanation}") 

@bot.message_handler(func=lambda msg: msg.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", content_types=['text']) 
def handle_quiz(msg): 
    bot.send_message(msg.chat.id, "‚è≥ –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã...") 
    questions = Config.QUIZ_QUESTIONS 
    random.shuffle(questions) 
    
    user_quiz_states[msg.from_user.id] = {'score': 0, 'question_index': 0, 'questions': questions[:Config.QUIZ_QUESTIONS_COUNT]} 
    bot.send_message(msg.chat.id, f"üî• <b>–ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∏–ø—Ç–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b>\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ {Config.QUIZ_QUESTIONS_COUNT} –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=types.ReplyKeyboardRemove()) 
    send_quiz_question(msg.from_user.id, msg.from_user.id) 

def send_quiz_question(chat_id, user_id): 
    state = user_quiz_states.get(user_id) 
    if not state: return 
    q_index, questions = state['question_index'], state['questions'] 
    
    if q_index >= len(questions): 
        reward_text = game.apply_quiz_reward(user_id) if state['score'] >= Config.QUIZ_MIN_CORRECT_FOR_REWARD else "" 
        bot.send_message(chat_id, f"üéâ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{state['score']} –∏–∑ {len(questions)}</b>.{reward_text}", reply_markup=get_main_keyboard()) 
        user_quiz_states.pop(user_id, None) 
        return 
        
    q_data = questions[q_index] 
    markup = types.InlineKeyboardMarkup(row_width=2).add(*[types.InlineKeyboardButton(opt, callback_data=f"quiz_{q_index}_{i}") for i, opt in enumerate(q_data['options'])]) 
    bot.send_message(chat_id, f"<b>–í–æ–ø—Ä–æ—Å {q_index + 1}:</b>\n{q_data['question']}", reply_markup=markup) 

@bot.callback_query_handler(func=lambda call: call.data.startswith('quiz_')) 
def handle_quiz_answer(call): 
    user_id = call.from_user.id; state = user_quiz_states.get(user_id) 
    if not state: return bot.answer_callback_query(call.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.") 
    
    try: _, q_index_str, answer_index_str = call.data.split('_'); q_index, answer_index = int(q_index_str), int(answer_index_str) 
    except (ValueError, IndexError): return bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.") 

    if q_index != state.get('question_index'): return bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏.") 
    
    q_data = state['questions'][q_index] 
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None) 
    
    if answer_index == q_data['correct_index']: 
        state['score'] += 1; bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!") 
    else: 
        bot.send_message(call.message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{q_data['options'][q_data['correct_index']]}</b>") 
    
    state['question_index'] += 1; time.sleep(1.5); send_quiz_question(call.message.chat.id, user_id) 
    bot.answer_callback_query(call.id) 

@bot.message_handler(func=lambda msg: msg.text == "üïπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥") 
def handle_game_hub(msg): 
    text, markup = get_game_menu(msg.from_user.id, msg.from_user.full_name) 
    bot.send_message(msg.chat.id, text, reply_markup=markup) 

def get_game_menu(user_id, user_name): 
    rig_info_text, rig_info_markup = game.get_rig_info(user_id, user_name) 
    if rig_info_markup: return rig_info_text, rig_info_markup 
    
    markup = types.InlineKeyboardMarkup(row_width=2) 
    buttons = [types.InlineKeyboardButton("üí∞ –°–æ–±—Ä–∞—Ç—å", callback_data="game_collect"), types.InlineKeyboardButton("üöÄ –£–ª—É—á—à–∏—Ç—å", callback_data="game_upgrade"), types.InlineKeyboardButton("üèÜ –¢–æ–ø –ú–∞–π–Ω–µ—Ä–æ–≤", callback_data="game_top"), types.InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="game_shop"), types.InlineKeyboardButton("üíµ –í—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∞–ª", callback_data="game_withdraw"), types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="game_rig")] 
    markup.add(*buttons) 
    return rig_info_text, markup 

@bot.callback_query_handler(func=lambda call: call.data.startswith('game_')) 
def handle_game_callbacks(call): 
    action = call.data.split('_')[1] 
    user_id = call.from_user.id; user_name = call.from_user.full_name; message = call.message 
    response_text = "" 
    
    if action == 'collect': response_text = game.collect_reward(user_id) 
    elif action == 'upgrade': response_text = game.upgrade_rig(user_id) 
    elif action == 'top': response_text = game.get_top_miners(); bot.answer_callback_query(call.id); return send_message_with_partner_button(message.chat.id, response_text) 
    elif action == 'shop': 
        markup = types.InlineKeyboardMarkup(row_width=1) 
        for key, item in Config.SHOP_ITEMS.items(): 
            markup.add(types.InlineKeyboardButton(f"{item['name']} ({item['cost']:.4f} BTC)", callback_data=f"game_buy_{key}")) 
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="game_rig")) 
        bot.edit_message_text("üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:</b>", message.chat.id, message.message_id, reply_markup=markup) 
        bot.answer_callback_query(call.id); return 
    elif action == 'buy': 
        item_key = call.data.split('_')[2] 
        response_text = game.buy_item(user_id, item_key) 
    elif action == 'withdraw': 
        response_text = f"{random.choice(Config.PARTNER_AD_TEXT_OPTIONS)}" 
        bot.answer_callback_query(call.id); return send_message_with_partner_button(message.chat.id, response_text) 
    
    bot.answer_callback_query(call.id) 
    text, markup = get_game_menu(user_id, user_name) 
    final_text = f"{response_text}\n\n{text}" if response_text else text 
    try: bot.edit_message_text(final_text, message.chat.id, message.message_id, reply_markup=markup) 
    except telebot.apihelper.ApiTelegramException as e: 
        if "message is not modified" not in str(e): logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é: {e}") 

@bot.callback_query_handler(func=lambda call: call.data.startswith('start_rig_')) 
def handle_start_rig_callback(call): 
    try: 
        user_id, user_name = call.from_user.id, call.from_user.full_name 
        starter_asics = temp_user_choices.get(user_id) 
        if not starter_asics: 
            starter_asics = api.get_top_asics() 
            if not starter_asics: return bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ASIC.", show_alert=True) 
        
        asic_index = int(call.data.split('_')[-1]) 
        selected_asic = starter_asics[asic_index] 

        creation_message = game.create_rig(user_id, user_name, selected_asic) 
        bot.answer_callback_query(call.id, "–§–µ—Ä–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è...") 
        
        text, markup = get_game_menu(user_id, user_name) 
        bot.edit_message_text(f"{creation_message}\n\n{text}", call.message.chat.id, call.message.message_id, reply_markup=markup) 
        if user_id in temp_user_choices: del temp_user_choices[user_id] 
    except Exception as e: 
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–µ—Ä–º—ã: {e}", exc_info=True) 
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.", show_alert=True) 

@bot.callback_query_handler(func=lambda call: call.data.startswith('not_spam_'))
def handle_not_spam_callback(call):
    try:
        _, user_id_str, chat_id_str = call.data.split('_')
        user_id = int(user_id_str)
        original_chat_id = int(chat_id_str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data –¥–ª—è not_spam: {e}")
        return bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∂–∞–≤—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
    if not is_admin(original_chat_id, call.from_user.id):
        return bot.answer_callback_query(call.id, "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞.", show_alert=True)

    # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = spam_analyzer.user_profiles.get(user_id)
    if profile:
        profile['spam_count'] = max(0, profile.get('spam_count', 0) - 1)
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª —Å–ø–∞–º-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ù–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫: {profile['spam_count']}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–µ
    try:
        original_text = call.message.html_text.split("–¢–µ–∫—Å—Ç:\n")[1].split("\n\n<i>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞")[0]
        original_text = original_text.replace("<blockquote>", "").replace("</blockquote>", "").strip()
    except IndexError:
        original_text = "[–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç]"
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç
    try:
        user_info = spam_analyzer.user_profiles.get(user_id, {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'})
        repost_text = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{telebot.util.escape(user_info['name'])}</b> –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n<blockquote>{telebot.util.escape(original_text)}</blockquote>"
        bot.send_message(original_chat_id, repost_text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {original_chat_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        updated_admin_text = call.message.html_text + f"\n\n<b>‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b> {call.from_user.full_name}"
        bot.edit_message_text(updated_admin_text, call.message.chat.id, call.message.message_id, reply_markup=None)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    bot.answer_callback_query(call.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ.")

@bot.message_handler(content_types=['text'], func=lambda msg: not msg.text.startswith('/')) 
def handle_non_command_text(msg): 
    spam_analyzer.process_message(msg) 
    
    try: 
        if msg.chat.type in ('group', 'supergroup'): 
            bot_username = f"@{bot.get_me().username}" 
            if not (msg.reply_to_message and msg.reply_to_message.from_user.id == bot.get_me().id) and bot_username not in msg.text: 
                return 

        text_lower = msg.text.lower() 
        if any(kw in text_lower for kw in Config.TECH_QUESTION_KEYWORDS) and any(kw in text_lower for kw in Config.TECH_SUBJECT_KEYWORDS) and '?' in msg.text: 
            handle_technical_question(msg) 
        elif any(w in text_lower for w in ["–ø—Ä–æ–¥–∞–º", "–∫—É–ø–∏—Ç—å", "–≤ –Ω–∞–ª–∏—á–∏–∏"]) and any(w in text_lower for w in ["asic", "–∞—Å–∏–∫", "whatsminer", "antminer"]): 
            api.log_to_sheet([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), msg.from_user.username or "N/A", msg.text]) 
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∏ –¥–∏–∞–ª–æ–≥. –¢–µ–∫—Å—Ç: '{msg.text}'" 
            response = api.ask_gpt(prompt) 
            send_message_with_partner_button(msg.chat.id, response) 
        else: 
            bot.send_chat_action(msg.chat.id, 'typing') 
            response = api.ask_gpt(msg.text) 
            send_message_with_partner_button(msg.chat.id, response) 
    except Exception as e: 
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_other_text!", exc_info=e) 

def handle_technical_question(msg): 
    try: 
        bot.send_chat_action(msg.chat.id, 'typing') 
        prompt = ("–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤ —á–∞—Ç–µ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É. " f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: \"{msg.text}\"\n\n" "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. " "–ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø—Ä–æ–≤–µ—Ä—å –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', '–æ–±–Ω–æ–≤–∏ –ø—Ä–æ—à–∏–≤–∫—É', '–ø—Ä–æ–≤–µ—Ä—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É'). " "–û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–æ –ø–æ –¥–µ–ª—É. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º.") 
        response = api.ask_gpt(prompt, "gpt-4o") 
        bot.reply_to(msg, response) 
    except Exception as e: 
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}") 


 # ======================================================================================== 
 # 6. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê 
 # ======================================================================================== 
@app.route('/webhook', methods=['POST']) 
def webhook(): 
    if request.headers.get('content-type') == 'application/json': 
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))]) 
        return '', 200 
    return 'Forbidden', 403 

@app.route("/") 
def index(): return "Bot is running!" 

def run_scheduler(): 
    if Config.WEBHOOK_URL: schedule.every(25).minutes.do(lambda: requests.get(Config.WEBHOOK_URL.rsplit('/', 1)[0])) 
    schedule.every(4).hours.do(auto_send_news) 
    schedule.every(6).hours.do(auto_check_status) 
    schedule.every(1).hours.do(api.get_top_asics, force_update=True) 
    schedule.every(5).minutes.do(game.save_data) 
    schedule.every(5).minutes.do(spam_analyzer.save_all_data) 
    
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.") 
    while True: 
        try: schedule.run_pending(); time.sleep(1) 
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}", exc_info=True) 

def auto_send_news(): 
    if Config.NEWS_CHAT_ID: 
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...") 
        news_text = api.get_crypto_news() 
        send_message_with_partner_button(Config.NEWS_CHAT_ID, news_text) 

def auto_check_status(): 
    if not Config.ADMIN_CHAT_ID: return 
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º...") 
    errors = [] 
    rate, _ = api.get_usd_rub_rate()
    if not rate: errors.append("API –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
    if openai_client and "[‚ùå" in api.ask_gpt("–¢–µ—Å—Ç"): errors.append("API OpenAI") 
    if Config.GOOGLE_JSON_STR and not api.get_gsheet(): errors.append("Google Sheets") 
    if not api.get_top_asics(force_update=True): errors.append("–ü–∞—Ä—Å–∏–Ω–≥ ASIC") 
    
    status = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ." if not errors else f"‚ö†Ô∏è –°–±–æ–π –≤: {', '.join(errors)}" 
    try: bot.send_message(Config.ADMIN_CHAT_ID, f"<b>–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ({datetime.now().strftime('%H:%M')})</b>\n{status}") 
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}") 

if __name__ == '__main__': 
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...") 
    threading.Thread(target=run_scheduler, daemon=True).start() 
    
    if Config.WEBHOOK_URL: 
        logger.info("–†–µ–∂–∏–º: –≤–µ–±—Ö—É–∫.") 
        bot.remove_webhook() 
        time.sleep(0.5) 
        bot.set_webhook(url=f"{Config.WEBHOOK_URL.rstrip('/')}/webhook") 
        app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000))) 
    else: 
        logger.info("–†–µ–∂–∏–º: long-polling.") 
        bot.remove_webhook() 
        bot.polling(none_stop=True)
