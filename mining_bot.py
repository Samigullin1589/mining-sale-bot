import os
import json
import time
import logging
import threading
import requests
import gspread
import feedparser
from flask import Flask, request
from datetime import datetime, timedelta
from oauth2client.service_account import ServiceAccountCredentials
from telebot import TeleBot, types

# --- ENV ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
CRYPTO_API_KEY = os.getenv('CRYPTO_API_KEY', '')
ADMINS = [7473992492, 5860994210]
GROUP_ID = -1002408729915

AD_URLS = [
    {"text": "üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", "url": "https://app.leadteh.ru/w/dTeKr"},
    {"text": "üî• –õ—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å", "url": "https://app.leadteh.ru/w/dTeKr"},
    {"text": "üì¶ –ö—É–ø–∏—Ç—å ASIC-–º–∞–π–Ω–µ—Ä –≤—ã–≥–æ–¥–Ω–æ", "url": "https://app.leadteh.ru/w/dTeKr"}
]

SHEET_ID = '1WqzsXwqw-aDH_lNWSpX5bjHFqT5BHmXYFSgHupAlWQg'
GSHEET_JSON = 'sage-instrument-338811-a8c8cc7f2500.json'

bot = TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)
stats = {
    "messages": 0, "users": set(), "ad_views": 0, "bot_replies": 0,
    "new_users": set(), "user_msgs": {}, "user_lang": {}, "daily_msgs": {}, "weekly_msgs": {}, "monthly_msgs": {}
}
last_news = ""  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GSHEET_JSON, scope)
gs_client = gspread.authorize(creds)
sheet = gs_client.open_by_key(SHEET_ID).sheet1

# ---- –§–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞ ----
SPAM_FILE = 'spam_patterns.txt'
def load_spam():
    try:
        with open(SPAM_FILE, 'r', encoding='utf8') as f:
            return [line.strip().lower() for line in f if line.strip()]
    except:
        return ["–∫–∞–∑–∏–Ω–æ", "—Å—Ç–∞–≤–∫–∏", "free btc", "–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫", "free usdt"]
def save_spam(patterns):
    with open(SPAM_FILE, 'w', encoding='utf8') as f:
        for line in patterns:
            f.write(line+'\n')
spam_patterns = load_spam()

def log_admin(msg):
    for admin_id in ADMINS:
        bot.send_message(admin_id, msg)

def gpt_translate(text, lang="ru"):
    try:
        if lang == "ru":
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, —Ç–æ–ª—å–∫–æ —Å–∞–º—É –Ω–æ–≤–æ—Å—Ç—å, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ."
        elif lang == "en":
            prompt = f"Translate to English, just the news, no comments."
        else:
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, —Ç–æ–ª—å–∫–æ —Å–∞–º—É –Ω–æ–≤–æ—Å—Ç—å, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ."
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
        data = {
            "model": "gpt-4o",
            "messages": [
                {"role": "system", "content": prompt},
                {"role": "user", "content": text}
            ],
            "max_tokens": 500, "temperature": 0.5
        }
        r = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data, timeout=15)
        r.raise_for_status()
        return r.json()['choices'][0]['message']['content'].strip()
    except Exception as e:
        log_admin(f"GPT error: {str(e)}")
        return text

def get_user_lang(uid):
    return stats["user_lang"].get(uid, "ru")

def set_user_lang(uid, lang):
    stats["user_lang"][uid] = lang

# --- –ù–æ–≤–æ—Å—Ç–∏ CryptoPanic –∏–ª–∏ Cointelegraph ---
def get_crypto_news(uid=0):
    # news_text, link
    try:
        url = f"https://cryptopanic.com/api/v1/posts/?auth_token={CRYPTO_API_KEY}&public=true&currencies=BTC,ETH"
        resp = requests.get(url, timeout=15)
        if resp.status_code == 200:
            data = resp.json()
            posts = data.get('results', [])
            if posts:
                post = posts[0]
                lang = get_user_lang(uid)
                ru_title = gpt_translate(post['title'], lang=lang)
                return ru_title, post['url']
    except Exception as e:
        log_admin(f"–û—à–∏–±–∫–∞ CryptoPanic: {str(e)}")
    # –†–µ–∑–µ—Ä–≤: Cointelegraph RSS
    try:
        d = feedparser.parse("https://cointelegraph.com/rss")
        entry = d.entries[0]
        title = entry.title
        link = entry.link
        lang = get_user_lang(uid)
        ru_title = gpt_translate(title, lang=lang)
        return ru_title, link
    except Exception as e:
        log_admin(f"–û—à–∏–±–∫–∞ Cointelegraph: {str(e)}")
        return "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", None

def send_news_with_button(chat_id, uid=0, news=None):
    ad = AD_URLS[int(time.time()) % len(AD_URLS)]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(ad["text"], url=ad["url"]))
    if not news:
        news = get_crypto_news(uid)
    news_text, link = news
    text = f"üì∞ {news_text}"
    if link:
        text += f"\n\n{link}"
    bot.send_message(chat_id, text, reply_markup=markup)
    stats["ad_views"] += 1

def schedule_news():
    last_sent = ""
    while True:
        now = datetime.utcnow()
        if now.hour % 3 == 0 and now.minute < 3:
            news_text, link = get_crypto_news()
            if news_text != last_sent:
                send_news_with_button(GROUP_ID, news=(news_text, link))
                last_sent = news_text
            time.sleep(180)
        else:
            time.sleep(60)

def dump_stats():
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ã–≥—Ä—É–∑–∫–∞ –∏ –∞–≤—Ç–æ–Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–µ–Ω—å
    while True:
        now = datetime.utcnow()
        if now.hour == 21 and now.minute < 10:
            day_row = [
                str(datetime.now()),
                stats["messages"],
                len(stats["users"]),
                len(stats["new_users"]),
                stats["ad_views"],
                stats["bot_replies"]
            ]
            sheet.append_row(day_row)
            # –¢–æ–ø-1 –∞–∫—Ç–∏–≤
            top = sorted(stats["user_msgs"].items(), key=lambda x: x[1], reverse=True)
            if top:
                best_id = top[0][0]
                bot.send_message(GROUP_ID, f"üëè –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–Ω—è: [{best_id}](tg://user?id={best_id})!", parse_mode="Markdown")
            # –ê–¥–º–∏–Ω–∞–º –æ—Ç—á–µ—Ç
            msg = (
                f"–°—Ç–∞—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏:\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}\n"
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(stats['users'])}\n"
                f"–ù–æ–≤—ã—Ö: {len(stats['new_users'])}\n"
                f"–†–µ–∫–ª–∞–º–∞: {stats['ad_views']}\n"
                f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–æ–≤: {stats['bot_replies']}"
            )
            log_admin(msg)
            stats["messages"] = 0
            stats["ad_views"] = 0
            stats["bot_replies"] = 0
            stats["new_users"].clear()
            stats["user_msgs"].clear()
        time.sleep(60*10)

@bot.message_handler(commands=['start', 'help'])
def help_msg(message):
    lang = get_user_lang(message.from_user.id)
    msg = {
        "ru": "–Ø Mining Sale Bot! –ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–ª—É—á–∞–π —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –º–∞–π–Ω–∏–Ω–≥—É.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /news, /stats, /top, /lang, /spam_add, /spam_list, /spam_del",
        "en": "I'm Mining Sale Bot! Ask questions ‚Äî get fresh mining news and analytics.\nCommands: /news, /stats, /top, /lang, /spam_add, /spam_list, /spam_del"
    }
    bot.send_message(message.chat.id, msg[lang])

@bot.message_handler(commands=['lang'])
def setlang(message):
    parts = message.text.split()
    if len(parts) > 1 and parts[1].lower() in ["ru", "en"]:
        set_user_lang(message.from_user.id, parts[1].lower())
        bot.reply_to(message, f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {parts[1].upper()}")
    else:
        bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ ru –∏–ª–∏ en (Choose ru or en). –ü—Ä–∏–º–µ—Ä: /lang ru")

@bot.message_handler(commands=['news', '–Ω–æ–≤–æ—Å—Ç–∏'])
def cmd_news(message):
    send_news_with_button(message.chat.id, message.from_user.id)

@bot.message_handler(commands=['stats'])
def stats_cmd(message):
    if message.from_user.id in ADMINS:
        msg = (
            f"–°–µ–≥–æ–¥–Ω—è:\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(stats['users'])}\n"
            f"–ù–æ–≤—ã—Ö: {len(stats['new_users'])}\n"
            f"–†–µ–∫–ª–∞–º–∞: {stats['ad_views']}\n"
            f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–æ–≤: {stats['bot_replies']}"
        )
        bot.reply_to(message, msg)
@bot.message_handler(commands=['stats_week'])
def stats_week(message):
    if message.from_user.id in ADMINS:
        # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –ø–æ –¥–∞—Ç–∞–º
        bot.reply_to(message, "–°—Ç–∞—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ–¥—Å—á–µ—Ç, –µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –ø–æ–º–æ–≥—É).")

@bot.message_handler(commands=['stats_month'])
def stats_month(message):
    if message.from_user.id in ADMINS:
        bot.reply_to(message, "–°—Ç–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü: (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ–¥—Å—á–µ—Ç, –µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –ø–æ–º–æ–≥—É).")

@bot.message_handler(commands=['top'])
def top_users(message):
    # –¢–æ–ø-10
    top = sorted(stats["user_msgs"].items(), key=lambda x: x[1], reverse=True)[:10]
    out = ["üèÜ –¢–û–ü-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"]
    for i, (uid, count) in enumerate(top, 1):
        out.append(f"{i}. [{uid}](tg://user?id={uid}) ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    bot.send_message(message.chat.id, "\n".join(out), parse_mode="Markdown")

# === –ê–≤—Ç–æ–æ–±—É—á–∞–µ–º—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞ ===
@bot.message_handler(commands=['spam_add'])
def add_spam(message):
    if message.from_user.id in ADMINS:
        parts = message.text.split(maxsplit=1)
        if len(parts) > 1:
            spam_patterns.append(parts[1].strip().lower())
            save_spam(spam_patterns)
            bot.reply_to(message, f"–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω: {parts[1]}")
        else:
            bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä: /spam_add –ø–ª–æ—Ö–æ–π_—Ç–µ–∫—Å—Ç")

@bot.message_handler(commands=['spam_list'])
def spam_list(message):
    if message.from_user.id in ADMINS:
        text = "\n".join([f"{i+1}. {p}" for i,p in enumerate(spam_patterns)])
        bot.reply_to(message, f"–¢–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã —Å–ø–∞–º–∞:\n{text}")

@bot.message_handler(commands=['spam_del'])
def spam_del(message):
    if message.from_user.id in ADMINS:
        parts = message.text.split()
        if len(parts) > 1 and parts[1].isdigit():
            idx = int(parts[1]) - 1
            if 0 <= idx < len(spam_patterns):
                rem = spam_patterns.pop(idx)
                save_spam(spam_patterns)
                bot.reply_to(message, f"–£–¥–∞–ª–µ–Ω–æ: {rem}")
            else:
                bot.reply_to(message, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        else:
            bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä: /spam_del 2")

@bot.message_handler(func=lambda m: True)
def main_handler(message):
    stats["messages"] += 1
    stats["users"].add(message.from_user.id)
    stats["user_msgs"][message.from_user.id] = stats["user_msgs"].get(message.from_user.id, 0) + 1
    if message.from_user.id not in stats["new_users"]:
        stats["new_users"].add(message.from_user.id)
    # –°–ø–∞–º
    lower = message.text.lower()
    for pattern in spam_patterns:
        if pattern in lower:
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, "‚õîÔ∏è –°–ø–∞–º/–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            try:
                bot.kick_chat_member(message.chat.id, message.from_user.id)
            except:
                pass
            return
    # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
    keywords = ["–º–∞–π–Ω–∏–Ω–≥", "asic", "–∫—É–ø–∏—Ç—å", "–≤–∞–ª—é—Ç–∞", "—Ä–æ–∑–µ—Ç–∫–∞", "–≤—ã–≥–æ–¥–Ω–æ", "—á—Ç–æ –≤—ã–±—Ä–∞—Ç—å", "–æ–±–∑–æ—Ä"]
    if any(k in lower for k in keywords):
        lang = get_user_lang(message.from_user.id)
        if lang == "en":
            prompt = f"Answer concisely in English, only about mining: {message.text}"
        else:
            prompt = f"–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –º–∞–π–Ω–∏–Ω–≥–∞: {message.text}"
        answer = gpt_translate(prompt, lang=lang)
        bot.reply_to(message, answer)
        stats["bot_replies"] += 1
    elif "–Ω–æ–≤–æ—Å—Ç–∏" in lower or "news" in lower:
        cmd_news(message)

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_str = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return 'ok', 200
    else:
        return 'invalid content-type', 403

def run_bot():
    bot.remove_webhook()
    bot.set_webhook(url=os.getenv('WEBHOOK_URL'))
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)), debug=False)

if __name__ == '__main__':
    threading.Thread(target=schedule_news, daemon=True).start()
    threading.Thread(target=dump_stats, daemon=True).start()
    run_bot()
