# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´
# ========================================================================================
import os
import asyncio
import logging
import random
import json
import re
import io
import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any, Tuple

# –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –∏ Telegram
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ForceReply, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from cachetools import TTLCache, cached
from dotenv import load_dotenv
from fuzzywuzzy import process, fuzz
import feedparser
from dateutil import parser as date_parser
import bleach
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# ========================================================================================
# 2. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´
# ========================================================================================
class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–ª—é—á–µ–π API –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç."""
    # --- –ö–ª—é—á–∏ API –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) ---
    BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    CMC_API_KEY = os.getenv("CMC_API_KEY") # CoinMarketCap
    CRYPTOCOMPARE_API_KEY = os.getenv("CRYPTOCOMPARE_API_KEY")
    NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")
    
    # --- ID —á–∞—Ç–æ–≤ ---
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
    NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è Render/Heroku) ---
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    WEBHOOK_PATH = "/webhook"
    
    # --- –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
    GAME_DATA_FILE = "game_data.json"
    PROFILES_DATA_FILE = "user_profiles.json"
    ASIC_CACHE_FILE = "asic_data_cache.json" # –ê–≤–∞—Ä–∏–π–Ω—ã–π –∫—ç—à –Ω–∞ –¥–∏—Å–∫–µ
    DYNAMIC_KEYWORDS_FILE = "dynamic_keywords.json"

    # --- –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
    LEVEL_MULTIPLIERS = {1: 1, 2: 1.5, 3: 2.2, 4: 3.5, 5: 5}
    UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1}
    STREAK_BONUS_MULTIPLIER = 0.05
    QUIZ_REWARD = 0.0001
    QUIZ_MIN_CORRECT_FOR_REWARD = 3
    SHOP_ITEMS = {
        'boost': {'name': '‚ö°Ô∏è –ë—É—Å—Ç —Ö2 (24—á)', 'cost': 0.0005},
        'overclock': {'name': '‚öôÔ∏è –û–≤–µ—Ä–∫–ª–æ–∫–∏–Ω–≥-—á–∏–ø (+5% –Ω–∞–≤—Å–µ–≥–¥–∞)', 'cost': 0.002, 'effect': 0.05}
    }
    RANDOM_EVENT_CHANCE = 0.1
    HALVING_INTERVAL = 210000

    # --- –ö–æ–Ω—Ç–µ–Ω—Ç –±–æ—Ç–∞ ---
    CRYPTO_TERMS = ["–ë–ª–æ–∫—á–µ–π–Ω", "–ì–∞–∑ (Gas)", "–•–∞–ª–≤–∏–Ω–≥", "ICO", "DeFi", "NFT", "–°–∞—Ç–æ—à–∏", "–ö–∏—Ç (Whale)", "HODL", "DEX", "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"]
    BOT_HINTS = [
        "üí° –£–∑–Ω–∞–π—Ç–µ –∫—É—Ä—Å –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –µ–µ —Ç–∏–∫–µ—Ä!", "‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–º—ã–µ –¥–æ—Ö–æ–¥–Ω—ã–µ ASIC",
        "‚õèÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –ø–æ–º–æ—â—å—é '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'", "üì∞ –•–æ—Ç–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏?",
        "ü§ë –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–∏–º—É–ª—è—Ç–æ—Ä –º–∞–π–Ω–∏–Ω–≥–∞!", "üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏",
        "üèÜ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å–µ–±—è —Å –ª—É—á—à–∏–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤", "üéì –ß—Ç–æ —Ç–∞–∫–æ–µ 'HODL'? –£–∑–Ω–∞–π—Ç–µ, –Ω–∞–ø–∏—Å–∞–≤ /word",
        "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ /quiz", "üõçÔ∏è –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π"
    ]
    PARTNER_URL = os.getenv("PARTNER_URL", "https://cutt.ly/5rWGcgYL")
    PARTNER_BUTTON_TEXT_OPTIONS = ["üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"]
    PARTNER_AD_TEXT_OPTIONS = [
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ BTC –≤ —Ä–µ–∞–ª—å–Ω—ã–µ? –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ! –ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.",
        "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ. –ì–æ—Ç–æ–≤—ã –∫ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ–±—ã—á–µ? –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.",
    ]
    TICKER_ALIASES = {'–±—Ç–∫': 'BTC', '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', '–±–∏—Ç–æ–∫': 'BTC', 'eth': 'ETH', '—ç—Ñ–∏—Ä': 'ETH', '—ç—Ñ–∏—Ä–∏—É–º': 'ETH', 'sol': 'SOL', '—Å–æ–ª–∞–Ω–∞': 'SOL', 'ltc': 'LTC', '–ª–∞–π—Ç–∫–æ–∏–Ω': 'LTC', '–ª–∞–π—Ç': 'LTC', 'doge': 'DOGE', '–¥–æ–≥–∏': 'DOGE', '–¥–æ–≥': 'DOGE', 'kas': 'KAS', '–∫–∞—Å–ø–∞': 'KAS', '–∞–ª–µ–æ': 'ALEO'}
    POPULAR_TICKERS = ['BTC', 'ETH', 'SOL', 'TON', 'KAS']

    # --- –ê–Ω—Ç–∏-—Å–ø–∞–º ---
    WARN_LIMIT = 3
    MUTE_DURATION_HOURS = 24
    SPAM_KEYWORDS = ['p2p', '–∞—Ä–±–∏—Ç—Ä–∞–∂', '–æ–±–º–µ–Ω', '—Å–∏–≥–Ω–∞–ª—ã', '–æ–±—É—á–µ–Ω–∏–µ', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–≤–ª–æ–∂–µ–Ω–∏—è', '—Å—Ö–µ–º–∞', '—Å–≤—è–∑–∫–∞']
    
    # --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ---
    CACHE_TTL_SHORT = 60      # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —á–∞—Å—Ç–æ –º–µ–Ω—è—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö (–∫—É—Ä—Å—ã)
    CACHE_TTL_MEDIUM = 300    # 5 –º–∏–Ω—É—Ç –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
    CACHE_TTL_LONG = 3600     # 1 —á–∞—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ ASIC –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    CACHE_TTL_XLONG = 14400   # 4 —á–∞—Å–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
    
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
    datefmt='%d/%b/%Y %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
if not Config.BOT_TOKEN:
    logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
bot = Bot(token=Config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="UTC")
openai_client = AsyncOpenAI(api_key=Config.OPENAI_API_KEY) if Config.OPENAI_API_KEY else None

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–∫—ç—à–∏) ---
asic_cache = TTLCache(maxsize=1, ttl=Config.CACHE_TTL_LONG)
crypto_price_cache = TTLCache(maxsize=500, ttl=Config.CACHE_TTL_SHORT)
fear_greed_cache = TTLCache(maxsize=10, ttl=Config.CACHE_TTL_XLONG)
btc_status_cache = TTLCache(maxsize=10, ttl=Config.CACHE_TTL_MEDIUM)
halving_cache = TTLCache(maxsize=1, ttl=Config.CACHE_TTL_LONG)
news_cache = TTLCache(maxsize=1, ttl=Config.CACHE_TTL_LONG)

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---
user_quiz_states = {}
temp_user_choices = {}


# ========================================================================================
# 3. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================================================================
def sanitize_html(text: str) -> str:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –≤—Å–µ HTML-—Ç–µ–≥–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    if not text:
        return ""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bleach –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤—Ä–µ–¥–Ω–æ–≥–æ HTML
    return bleach.clean(text, tags=[], attributes={}, strip=True).strip()

async def resilient_request(session: aiohttp.ClientSession, method: str, url: str, **kwargs) -> Optional[Dict[str, Any]]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        async with session.request(method, url, timeout=15, **kwargs) as response:
            if response.status == 429:
                logger.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ {url}. –°—Ç–∞—Ç—É—Å 429.")
                return None # –Ø–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç None –ø—Ä–∏ rate limiting
            response.raise_for_status()
            if "application/json" in response.content_type:
                return await response.json()
            else: # –¥–ª—è XML (RSS) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                return {"text_content": await response.text()}
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç {url}: {e}")
    return None

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    buttons = [
        [KeyboardButton(text="üíπ –ö—É—Ä—Å"), KeyboardButton(text="‚öôÔ∏è –¢–æ–ø ASIC")],
        [KeyboardButton(text="‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"), KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏")],
        [KeyboardButton(text="üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞"), KeyboardButton(text="‚è≥ –•–∞–ª–≤–∏–Ω–≥")],
        [KeyboardButton(text="üì° –°—Ç–∞—Ç—É—Å BTC"), KeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")],
        [KeyboardButton(text="üïπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

async def send_message_with_partner_button(chat_id: int, text: str, reply_markup: Optional[types.InlineKeyboardMarkup] = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π."""
    try:
        if not reply_markup:
            builder = InlineKeyboardBuilder()
            builder.button(text=random.choice(Config.PARTNER_BUTTON_TEXT_OPTIONS), url=Config.PARTNER_URL)
            reply_markup = builder.as_markup()

        full_text = f"{text}\n\n---\n<i>{random.choice(Config.BOT_HINTS)}</i>"
        
        await bot.send_message(chat_id, full_text, reply_markup=reply_markup, disable_web_page_preview=True)
    except TelegramBadRequest as e:
        if "can't parse entities" in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. {e}")
            cleaned_text = sanitize_html(text) # –ò—Å–ø–æ–ª—å–∑—É–µ–º bleach –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            full_text = f"{cleaned_text}\n\n---\n<i>{random.choice(Config.BOT_HINTS)}</i>"
            await bot.send_message(chat_id, full_text, reply_markup=reply_markup, disable_web_page_preview=True)
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
            
async def send_photo_with_partner_button(chat_id: int, photo: io.BytesIO, caption: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π."""
    try:
        if not photo or not isinstance(photo, io.BytesIO):
            raise ValueError("–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø")
        
        photo.seek(0) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        
        hint = f"\n\n---\n<i>{random.choice(Config.BOT_HINTS)}</i>"
        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –≤ 1024 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
        if len(caption) + len(hint) > 1024:
            caption = caption[:1024 - len(hint) - 3] + "..."

        final_caption = f"{caption}{hint}"
        
        builder = InlineKeyboardBuilder()
        builder.button(text=random.choice(Config.PARTNER_BUTTON_TEXT_OPTIONS), url=Config.PARTNER_URL)
        markup = builder.as_markup()

        await bot.send_photo(chat_id, types.BufferedInputFile(photo.read(), filename="image.png"), caption=final_caption, reply_markup=markup)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–º.")
        await send_message_with_partner_button(chat_id, caption)

# ========================================================================================
# 4. –ö–õ–ê–°–° ApiHandler - –°–ï–†–î–¶–ï –°–ë–û–†–ê –î–ê–ù–ù–´–•
# ========================================================================================
class ApiHandler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–Ω–µ—à–Ω–∏—Ö API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiohttp –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ cachetools –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL –∏ –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        self.price_sources = self._get_price_sources()
        self.news_sources = self._get_news_sources()
        self.fear_greed_sources = self._get_fear_greed_sources()
        self.btc_status_sources = self._get_btc_status_sources()
        self.halving_sources = self._get_halving_sources()
        self.asic_sources = self._get_asic_sources()

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ---
    def _get_price_sources(self):
        # –ë–æ–ª–µ–µ 10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        return {
            'coingecko': {'url': 'https://api.coingecko.com/api/v3/simple/price?ids={id}&vs_currencies=usd', 'parser': self._parse_coingecko_price},
            'coinmarketcap': {'url': 'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest?symbol={ticker}', 'headers': {'X-CMC_PRO_API_KEY': Config.CMC_API_KEY}, 'parser': self._parse_cmc_price},
            'binance': {'url': 'https://api.binance.com/api/v3/ticker/price?symbol={ticker}USDT', 'parser': self._parse_binance_price},
            'kraken': {'url': 'https://api.kraken.com/0/public/Ticker?pair={ticker}USD', 'parser': self._parse_kraken_price},
            'coinbase': {'url': 'https://api.coinbase.com/v2/prices/{ticker}-USD/spot', 'parser': self._parse_coinbase_price},
            'kucoin': {'url': 'https://api.kucoin.com/api/v1/market/orderbook/level1?symbol={ticker}-USDT', 'parser': self._parse_kucoin_price},
            'cryptocompare': {'url': 'https://min-api.cryptocompare.com/data/price?fsym={ticker}&tsyms=USD', 'headers': {'authorization': f'Apikey {Config.CRYPTOCOMPARE_API_KEY}'}, 'parser': self._parse_cryptocompare_price},
            'bitfinex': {'url': 'https://api-pub.bitfinex.com/v2/ticker/t{ticker}USD', 'parser': self._parse_bitfinex_price},
            'gateio': {'url': 'https://api.gateio.ws/api/v4/spot/tickers?currency_pair={ticker}_USDT', 'parser': self._parse_gateio_price},
            'coincap': {'url': 'https://api.coincap.io/v2/assets/{id}', 'parser': self._parse_coincap_price},
        }

    def _get_news_sources(self):
        # –ë–æ–ª–µ–µ 10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π (RSS –∏ API)
        return {
            'cryptopanic': {'url': f'https://cryptopanic.com/api/v1/posts/?auth_token={os.getenv("CRYPTOPANIC_API_KEY")}&public=true', 'parser': self._parse_cryptopanic_news, 'type': 'api'},
            'newsapi': {'url': f'https://newsapi.org/v2/everything?q=crypto&sortBy=publishedAt&language=en&apiKey={Config.NEWSAPI_KEY}', 'parser': self._parse_newsapi_news, 'type': 'api'},
            'cointelegraph_rss': {'url': 'https://cointelegraph.com/rss/tag/russia', 'parser': self._parse_rss, 'type': 'rss'},
            'forklog_rss': {'url': 'https://forklog.com/feed', 'parser': self._parse_rss, 'type': 'rss'},
            'rbc_crypto_rss': {'url': 'https://www.rbc.ru/crypto/feed', 'parser': self._parse_rss, 'type': 'rss'},
            'bitsmedia_rss': {'url': 'https://bits.media/rss/', 'parser': self._parse_rss, 'type': 'rss'},
            'beincrypto_rss': {'url': 'https://beincrypto.ru/feed/', 'parser': self._parse_rss, 'type': 'rss'},
            'coindesk_rss': {'url': 'https://www.coindesk.com/arc/outboundfeeds/rss/', 'parser': self._parse_rss, 'type': 'rss'},
            'decrypt_rss': {'url': 'https://decrypt.co/feed', 'parser': self._parse_rss, 'type': 'rss'},
            'theblock_rss': {'url': 'https://www.theblock.co/rss.xml', 'parser': self._parse_rss, 'type': 'rss'},
        }
        
    def _get_fear_greed_sources(self):
        return {
            'alternative.me': {'url': 'https://api.alternative.me/fng/?limit=1', 'parser': self._parse_alternative_me_fg},
            'coinmarketcap': {'url': 'https://pro-api.coinmarketcap.com/v3/fear-and-greed/historical?limit=1', 'headers': {'X-CMC_PRO_API_KEY': Config.CMC_API_KEY}, 'parser': self._parse_cmc_fg},
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥–æ–º, –Ω–æ API –Ω–∞–¥–µ–∂–Ω–µ–µ
        }

    def _get_btc_status_sources(self):
        return {
            'mempool.space': {'parser': self._parse_mempool_status},
            'blockchain.info': {'parser': self._parse_blockchain_info_status},
            'blockchair': {'parser': self._parse_blockchair_status},
            'blockcypher': {'parser': self._parse_blockcypher_status},
            'btc.com': {'parser': self._parse_btccom_status},
        }
        
    def _get_halving_sources(self):
         return {
            'mempool.space': {'url': 'https://mempool.space/api/blocks/tip/height', 'parser': self._parse_block_height},
            'blockchain.info': {'url': 'https://blockchain.info/q/getblockcount', 'parser': self._parse_block_height},
            'blockchair': {'url': 'https://api.blockchair.com/bitcoin/stats', 'parser': self._parse_blockchair_height},
            'blockcypher': {'url': 'https://api.blockcypher.com/v1/btc/main', 'parser': self._parse_blockcypher_height},
        }
        
    def _get_asic_sources(self):
        return {
            'minerstat': self._get_asics_from_minerstat,
            'whattomine_scrape': self._scrape_asics_from_whattomine,
            'asicminervalue_scrape': self._scrape_asics_from_asicminervalue,
        }

    # --- –ú–µ—Ç–æ–¥—ã-–ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ---
    # (–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, _parse_coingecko_price, _parse_cmc_price –∏ —Ç.–¥.)
    # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ–Ω–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

    async def _run_tasks_and_get_first_valid(self, tasks: List) -> Any:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        for future in asyncio.as_completed(tasks):
            result = await future
            if result is not None:
                return result
        return None

    # --- –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –°–ë–û–†–ê –î–ê–ù–ù–´–• ---
    
    @cached(crypto_price_cache)
    async def get_crypto_price(self, ticker: str) -> Optional[Dict[str, Any]]:
        ticker_upper = ticker.strip().upper()
        # –ü–æ–∏—Å–∫ ID –º–æ–Ω–µ—Ç—ã –¥–ª—è API, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Ç—Ä–µ–±—É—é—Ç (CoinGecko, CoinCap)
        coin_id = 'bitcoin' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è BTC
        try:
            async with aiohttp.ClientSession() as session:
                res = await resilient_request(session, 'get', f'https://api.coingecko.com/api/v3/search?query={ticker.lower()}')
                if res and res.get('coins'):
                    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ç–∏–∫–µ—Ä—É
                    for coin in res['coins']:
                        if coin.get('symbol', '').upper() == ticker_upper:
                            coin_id = coin.get('id')
                            break
                    else: # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
                        coin_id = res['coins'][0].get('id', ticker.lower())
        except Exception:
            coin_id = ticker.lower()
            
        async with aiohttp.ClientSession() as session:
            tasks = []
            
            # –ü–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            def _parse_coingecko_price(data): return data.get(coin_id, {}).get('usd')
            def _parse_cmc_price(data): return data.get('data', {}).get(ticker_upper, [{}])[0].get('quote', {}).get('USD', {}).get('price')
            def _parse_binance_price(data): return data.get('price')
            def _parse_kraken_price(data):
                key = next(iter(data.get('result', {})), None)
                return data['result'][key]['c'][0] if key else None
            def _parse_coinbase_price(data): return data.get('data', {}).get('amount')
            def _parse_kucoin_price(data): return data.get('data', {}).get('price')
            def _parse_cryptocompare_price(data): return data.get('USD')
            def _parse_bitfinex_price(data): return data[6] if isinstance(data, list) and len(data) > 6 else None
            def _parse_gateio_price(data): return data[0].get('last') if isinstance(data, list) and data else None
            def _parse_coincap_price(data): return data.get('data', {}).get('priceUsd')

            sources = {
                'CoinGecko': {'url': f'https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd', 'parser': _parse_coingecko_price},
                'CoinMarketCap': {'url': f'https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest?symbol={ticker_upper}', 'headers': {'X-CMC_PRO_API_KEY': Config.CMC_API_KEY}, 'parser': _parse_cmc_price},
                'Binance': {'url': f'https://api.binance.com/api/v3/ticker/price?symbol={ticker_upper}USDT', 'parser': _parse_binance_price},
                'Kraken': {'url': f'https://api.kraken.com/0/public/Ticker?pair={ticker_upper}USD', 'parser': _parse_kraken_price},
                'Coinbase': {'url': f'https://api.coinbase.com/v2/prices/{ticker_upper}-USD/spot', 'parser': _parse_coinbase_price},
                'KuCoin': {'url': f'https://api.kucoin.com/api/v1/market/orderbook/level1?symbol={ticker_upper}-USDT', 'parser': _parse_kucoin_price},
                'CryptoCompare': {'url': f'https://min-api.cryptocompare.com/data/price?fsym={ticker_upper}&tsyms=USD', 'headers': {'authorization': f'Apikey {Config.CRYPTOCOMPARE_API_KEY}'}, 'parser': _parse_cryptocompare_price},
                'Bitfinex': {'url': f'https://api-pub.bitfinex.com/v2/ticker/t{ticker_upper}USD', 'parser': _parse_bitfinex_price},
                'Gate.io': {'url': f'https://api.gateio.ws/api/v4/spot/tickers?currency_pair={ticker_upper}_USDT', 'parser': _parse_gateio_price},
                'CoinCap': {'url': f'https://api.coincap.io/v2/assets/{coin_id}', 'parser': _parse_coincap_price},
            }

            async def fetch(name, params):
                try:
                    data = await resilient_request(session, 'get', params['url'], headers=params.get('headers'))
                    if data:
                        price = params['parser'](data)
                        if price:
                            logger.info(f"–¶–µ–Ω–∞ –¥–ª—è {ticker_upper} –ø–æ–ª—É—á–µ–Ω–∞ —Å {name}: {price}")
                            return {'price': float(price), 'source': name, 'ticker': ticker_upper}
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Å {name}: {e}")
                return None
                
            for name, params in sources.items():
                if "{ticker}" in params['url'] or "{id}" in params['url']:
                    tasks.append(fetch(name, params))
            
            result = await self._run_tasks_and_get_first_valid(tasks)
            return result
            
    @cached(news_cache)
    async def get_crypto_news(self) -> List[Dict[str, str]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
        all_news = []
        async with aiohttp.ClientSession(headers={'User-Agent': 'Mozilla/5.0'}) as session:
            tasks = []
            
            # --- –ü–∞—Ä—Å–µ—Ä—ã ---
            def _parse_rss(data, source_name):
                news_list = []
                feed = feedparser.parse(data.get("text_content", ""))
                if feed.bozo:
                    logger.warning(f"–õ–µ–Ω—Ç–∞ {source_name} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π: {feed.bozo_exception}")
                for entry in feed.entries:
                    if hasattr(entry, 'published_parsed') and hasattr(entry, 'title') and hasattr(entry, 'link'):
                        news_list.append({
                            'title': sanitize_html(entry.title),
                            'link': entry.link,
                            'published': date_parser.parse(entry.published).replace(tzinfo=None) if hasattr(entry, 'published') else datetime.now()
                        })
                return news_list

            def _parse_cryptopanic_news(data, source_name):
                news_list = []
                for post in data.get('results', []):
                    news_list.append({
                        'title': sanitize_html(post['title']),
                        'link': post['url'],
                        'published': datetime.strptime(post['created_at'], '%Y-%m-%dT%H:%M:%S%z').replace(tzinfo=None)
                    })
                return news_list

            def _parse_newsapi_news(data, source_name):
                news_list = []
                for article in data.get('articles', []):
                    news_list.append({
                        'title': sanitize_html(article['title']),
                        'link': article['url'],
                        'published': date_parser.parse(article['publishedAt']).replace(tzinfo=None)
                    })
                return news_list

            sources = {
                'CryptoPanic': {'url': f'https://cryptopanic.com/api/v1/posts/?auth_token={os.getenv("CRYPTOPANIC_API_KEY")}&public=true', 'parser': _parse_cryptopanic_news},
                'NewsAPI': {'url': f'https://newsapi.org/v2/everything?q=cryptocurrency&sortBy=publishedAt&language=ru&apiKey={Config.NEWSAPI_KEY}', 'parser': _parse_newsapi_news},
                'CoinTelegraph': {'url': 'https://cointelegraph.com/rss/tag/russia', 'parser': _parse_rss},
                'Forklog': {'url': 'https://forklog.com/feed', 'parser': _parse_rss},
                # ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            }

            async def fetch_news(name, params):
                try:
                    data = await resilient_request(session, 'get', params['url'])
                    if data:
                        return params['parser'](data, name)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {name}: {e}")
                return []

            for name, params in sources.items():
                tasks.append(fetch_news(name, params))
            
            results = await asyncio.gather(*tasks)
            for news_list in results:
                if news_list:
                    all_news.extend(news_list)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if not all_news:
            return []
        all_news.sort(key=lambda x: x['published'], reverse=True)
        seen_titles = set()
        unique_news = [item for item in all_news if item['title'].strip().lower() not in seen_titles and not seen_titles.add(item['title'].strip().lower())]
        
        return unique_news[:15] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 15 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

    @cached(fear_greed_cache)
    async def get_fear_and_greed_index(self) -> Optional[Dict[str, Any]]:
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
        async with aiohttp.ClientSession() as session:
            tasks = []
            
            async def fetch_alternative(s):
                data = await resilient_request(s, 'get', 'https://api.alternative.me/fng/?limit=1')
                if data and data.get('data'):
                    val = data['data'][0]
                    return {'value': int(val['value']), 'classification': val['value_classification'], 'source': 'Alternative.me'}
                return None
                
            async def fetch_cmc(s):
                if not Config.CMC_API_KEY: return None
                headers = {'X-CMC_PRO_API_KEY': Config.CMC_API_KEY}
                data = await resilient_request(s, 'get', 'https://pro-api.coinmarketcap.com/v3/fear-and-greed/historical?limit=1', headers=headers)
                if data and data.get('data'):
                    val = data['data'][0]
                    return {'value': int(val['value']), 'classification': val['value_classification'], 'source': 'CoinMarketCap'}
                return None

            tasks.append(fetch_alternative(session))
            tasks.append(fetch_cmc(session))
            
            return await self._run_tasks_and_get_first_valid(tasks)

    # ... –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (get_btc_network_status, get_halving_info, get_top_asics) ...
    # –û–Ω–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø—É: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.
    # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö 10+ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—É—â–µ–Ω–∞,
    # –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ.

    @cached(halving_cache)
    async def get_halving_info(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã—Å–æ—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        async with aiohttp.ClientSession() as session:
            
            async def fetch(url):
                data = await resilient_request(session, 'get', url)
                if data and data.get('text_content', '').isdigit():
                    return int(data['text_content'])
                # –ü–∞—Ä—Å–µ—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                if data and 'blocks' in data: return data['blocks'] # blockchair
                if data and 'height' in data: return data['height'] # blockcypher
                return None

            tasks = [fetch(p['url']) for p in self.halving_sources.values() if 'url' in p]
            return await self._run_tasks_and_get_first_valid(tasks)

    async def ask_gpt(self, prompt: str, model: str = "gpt-4o"):
        if not openai_client:
            return "[‚ùå –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.]"
        try:
            res = await openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                timeout=40.0
            )
            return sanitize_html(res.choices[0].message.content.strip())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {e}")
            return "[‚ùå –û—à–∏–±–∫–∞ GPT.]"


# ========================================================================================
# 5. –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê, –ê–ù–¢–ò-–°–ü–ê–ú –ò –î–†–£–ì–ò–ï –ö–õ–ê–°–°–´
# (–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ async)
# ========================================================================================
# ... –ö–ª–∞—Å—Å—ã GameLogic –∏ SpamAnalyzer –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å ...
# –ò—Ö –∫–æ–¥ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ–Ω –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è, 
# –Ω–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# —Å –∑–∞–º–µ–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ `api._load_json_file` –∏ —Ç.–¥. –Ω–∞
# –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫ –≤ executor'–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.
class DummyGameLogic: # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    def get_rig_info(self, user_id, user_name):
        return "üïπÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", None
    def get_top_miners(self):
        return "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        
class DummySpamAnalyzer: # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    async def process_message(self, msg: types.Message):
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞
        pass

# ========================================================================================
# 6. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–õ–û–ë–ê–õ–¨–ù–´–• –û–ë–™–ï–ö–¢–û–í
# ========================================================================================
api = ApiHandler()
game = DummyGameLogic() # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å GameLogic
spam_analyzer = DummySpamAnalyzer() # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å SpamAnalyzer


# ========================================================================================
# 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–û–õ–ë–≠–ö–û–í (HANDLERS)
# ========================================================================================
@dp.message(CommandStart())
async def handle_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üíπ –ö—É—Ä—Å")
async def handle_price_button(message: Message):
    builder = InlineKeyboardBuilder()
    for ticker in Config.POPULAR_TICKERS:
        builder.button(text=ticker, callback_data=f"price_{ticker}")
    builder.button(text="‚û°Ô∏è –î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞", callback_data="price_other")
    builder.adjust(3, 2)
    await message.answer("–ö—É—Ä—Å –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("price_"))
async def handle_price_callback(callback: CallbackQuery):
    await callback.answer()
    action = callback.data.split('_')[1]
    
    if action == "other":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: Aleo, XRP):", reply_markup=ForceReply(selective=True))
        # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–ø—É—Å—Ç–∏–º
        return

    await bot.send_chat_action(callback.message.chat.id, 'typing')
    price_data = await api.get_crypto_price(action)
    
    if price_data:
        text = f"üíπ –ö—É—Ä—Å {price_data['ticker'].upper()}/USD: <b>${price_data['price']:,.4f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {price_data['source']})</i>"
        # –õ–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ ASIC
    else:
        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {action.upper()}."
        
    await send_message_with_partner_button(callback.message.chat.id, text)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

@dp.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def handle_news_button(message: Message):
    await bot.send_chat_action(message.chat.id, 'typing')
    news_list = await api.get_crypto_news()
    if not news_list:
        await send_message_with_partner_button(message.chat.id, "[üßê –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.]")
        return

    items_to_summarize = news_list[:4] # –ë–µ—Ä–µ–º 4 –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å–∞–º–º–∞—Ä–∏
    tasks = []
    for p in items_to_summarize:
        prompt = f"–°–¥–µ–ª–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: '{p['title']}'"
        tasks.append(api.ask_gpt(prompt, "gpt-4o-mini"))
        
    summaries = await asyncio.gather(*tasks)
    
    items_text = []
    for i, summary in enumerate(summaries):
        if "–û—à–∏–±–∫–∞ GPT" not in summary:
            link = items_to_summarize[i]['link']
            items_text.append(f"üîπ <a href=\"{link}\">{summary}</a>")

    if not items_text:
        await send_message_with_partner_button(message.chat.id, "[üßê –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.]")
        return

    final_text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(items_text)
    await send_message_with_partner_button(message.chat.id, final_text)

@dp.message(F.text == "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞")
async def handle_fear_greed_button(message: Message):
    await bot.send_chat_action(message.chat.id, 'typing')
    index_data = await api.get_fear_and_greed_index()
    
    if not index_data:
        await send_message_with_partner_button(message.chat.id, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]")
        return
        
    value = index_data['value']
    classification = index_data['classification']
    source = index_data['source']

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(8, 4.5), subplot_kw={'projection': 'polar'})
        ax.set_yticklabels([])
        ax.set_xticklabels([])
        ax.grid(False)
        ax.spines['polar'].set_visible(False)
        ax.set_ylim(0, 1)
        colors = ['#d94b4b', '#e88452', '#ece36a', '#b7d968', '#73c269']
        for i in range(100):
            ax.barh(1, 0.0314, left=3.14 - (i * 0.0314), height=0.3, color=colors[min(len(colors) - 1, int(i / 25))])
        angle = 3.14 - (value * 0.0314)
        ax.annotate('', xy=(angle, 1), xytext=(0, 0), arrowprops=dict(facecolor='white', shrink=0.05, width=4, headwidth=10))
        fig.text(0.5, 0.5, f"{value}", ha='center', va='center', fontsize=48, color='white', weight='bold')
        fig.text(0.5, 0.35, classification, ha='center', va='center', fontsize=20, color='white')
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, transparent=True)
        buf.seek(0)
        plt.close(fig)
        
        explanation_prompt = f"–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –¥–ª—è –º–∞–π–Ω–µ—Ä–∞, –∫–∞–∫ '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{value} ({classification})' –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫. –ù–µ –±–æ–ª–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        explanation = await api.ask_gpt(explanation_prompt)
        caption = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>\n(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})\n\n{explanation}"
        
        await send_photo_with_partner_button(message.chat.id, buf, caption)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}")
        await send_message_with_partner_button(message.chat.id, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞]")
        
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ GPT) ---
@dp.message(F.text)
async def handle_any_text(message: Message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç - —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫
    button_texts = ["üíπ –ö—É—Ä—Å", "‚öôÔ∏è –¢–æ–ø ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üì° –°—Ç–∞—Ç—É—Å BTC", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üïπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥"]
    if message.text in button_texts:
        return
        
    await spam_analyzer.process_message(message)
    await bot.send_chat_action(message.chat.id, 'typing')
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ —Ç–∏–∫–µ—Ä
    price_data = await api.get_crypto_price(message.text)
    if price_data:
        text = f"üíπ –ö—É—Ä—Å {price_data['ticker'].upper()}/USD: <b>${price_data['price']:,.4f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {price_data['source']})</i>"
        await send_message_with_partner_button(message.chat.id, text)
    else:
        # –ï—Å–ª–∏ –Ω–µ —Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
        response = await api.ask_gpt(message.text)
        await send_message_with_partner_button(message.chat.id, response)


# ========================================================================================
# 8. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================
async def auto_send_news():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    if not Config.NEWS_CHAT_ID:
        logger.warning("NEWS_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    logger.info("–ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –ó–∞–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")
    try:
        # –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_list = await api.get_crypto_news()
        if not news_list or len(news_list) < 4:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        items_to_summarize = news_list[:4]
        tasks = [api.ask_gpt(f"–°–¥–µ–ª–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: '{p['title']}'", "gpt-4o-mini") for p in items_to_summarize]
        summaries = await asyncio.gather(*tasks)

        items_text = [f"üîπ <a href=\"{items_to_summarize[i]['link']}\">{summary}</a>" for i, summary in enumerate(summaries) if "–û—à–∏–±–∫–∞" not in summary]
        
        if items_text:
            final_text = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ (–∞–≤—Ç–æ):</b>\n\n" + "\n\n".join(items_text)
            await send_message_with_partner_button(int(Config.NEWS_CHAT_ID), final_text)
            logger.info("–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ auto_send_news: {e}", exc_info=True)
        
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)."""
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(auto_send_news, 'interval', hours=3, id='auto_news_sender')
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–π
    # scheduler.add_job(api.get_top_asics, 'interval', hours=1, args=[True])
    
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook(drop_pending_updates=True)
    
    if Config.WEBHOOK_URL:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è Render)
        logger.info(f"–†–µ–∂–∏–º: –≤–µ–±—Ö—É–∫. URL: {Config.WEBHOOK_URL}")
        await bot.set_webhook(f"{Config.WEBHOOK_URL.rstrip('/')}{Config.WEBHOOK_PATH}")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä aiohttp.web
        # –≠—Ç–∞ —á–∞—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∑–¥–µ—Å—å –æ–ø—É—â–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
        # –î–ª—è Render –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç.
    else:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long-polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        logger.info("–†–µ–∂–∏–º: long-polling.")
        await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        if scheduler.running:
            scheduler.shutdown()
