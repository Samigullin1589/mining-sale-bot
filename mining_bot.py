# -*- coding: utf-8 -*-
# ==============================================================================
# –†–∞–∑–¥–µ–ª 1: –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
# ==============================================================================
import asyncio
import json
import logging
import os
import random
import re
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from typing import List, Optional, Dict

import aiofiles
import aiohttp
import bleach
import feedparser
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, User
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from cachetools import TTLCache
from openai import AsyncOpenAI

# ==============================================================================
# –†–∞–∑–¥–µ–ª 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ==============================================================================
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
    GAME_DATA_FILE = "game_data.json"
    PROFILES_DATA_FILE = "user_profiles.json"
    ASIC_SOURCE_URL = 'https://www.asicminervalue.com/'
    CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"
    COINGECKO_API_URL = "https://api.coingecko.com/api/v3"
    LEVEL_MULTIPLIERS = {1: 1, 2: 1.5, 3: 2.2, 4: 3.5, 5: 5}
    UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1}

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', handlers=[logging.StreamHandler()])
logger = logging.getLogger(__name__)

bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="UTC")
asic_cache = TTLCache(maxsize=1, ttl=3600)

# ==============================================================================
# –†–∞–∑–¥–µ–ª 3: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ==============================================================================
class Form(StatesGroup):
    waiting_for_calculator_cost = State()
    waiting_for_ticker = State()

@dataclass
class AsicMiner:
    name: str; algorithm: str; hashrate: str; power: int; profitability: float

@dataclass
class GameRig:
    name: str; asic_model: str; base_rate: float
    level: int = 1; balance: float = 0.0
    last_collected: Optional[datetime] = None

@dataclass
class UserProfile:
    user_id: int; name: str; username: Optional[str]
    msg_count: int = 0; spam_count: int = 0
    first_msg: datetime = field(default_factory=datetime.utcnow)
    last_seen: datetime = field(default_factory=datetime.utcnow)

# ==============================================================================
# –†–∞–∑–¥–µ–ª 4: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–∞–π–ª–æ–≤—ã–π I/O
# ==============================================================================
async def read_json_file(filepath: str) -> Dict:
    if not os.path.exists(filepath): return {}
    try:
        async with aiofiles.open(filepath, 'r', encoding='utf-8') as f:
            return json.loads(await f.read())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filepath}: {e}"); return {}

async def write_json_file(filepath: str, data: Dict):
    try:
        async with aiofiles.open(filepath, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(data, indent=4, ensure_ascii=False, default=str))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {filepath}: {e}")

# ==============================================================================
# –†–∞–∑–¥–µ–ª 5: –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (API, –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –ò–≥—Ä–∞, –ê–Ω—Ç–∏—Å–ø–∞–º)
# ==============================================================================
@asic_cache.cached(key=lambda: 'top_asics')
async def get_profitable_asics() -> List[AsicMiner]:
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤...")
    miners: List[AsicMiner] = []
    try:
        async with aiohttp.ClientSession() as session, session.get(Config.ASIC_SOURCE_URL, timeout=20) as response:
            html = await response.text()
        soup = BeautifulSoup(html, 'lxml')
        table = soup.find('table', {'class': 'table-hover'})
        if table:
            for row in table.find('tbody').find_all('tr'):
                try:
                    cols = row.find_all('td')
                    if len(cols) > 6:
                        name, hashrate, power, algo, prof = cols[0].text, cols[2].text, cols[3].text, cols[5].text, cols[6].text
                        profitability = float(re.sub(r'[^\d.]', '', prof)) if prof else 0.0
                        if profitability > 0:
                            miners.append(AsicMiner(name.strip(), algo.strip(), hashrate.strip(), int(re.sub(r'\D', '', power) or 0), profitability))
                except (ValueError, IndexError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ASIC: {e} | –°—Ç—Ä–æ–∫–∞: {[c.text for c in cols]}")
                    continue
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ AsicMinerValue: {e}", exc_info=True)
    
    sorted_miners = sorted(miners, key=lambda m: m.profitability, reverse=True)
    logger.info(f"–ö—ç—à ASIC –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(sorted_miners)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
    return sorted_miners

@cached(TTLCache(maxsize=1, ttl=300))
async def get_usd_rub_rate() -> float:
    try:
        async with aiohttp.ClientSession() as session, session.get(Config.CBR_API_URL) as response:
            data = await response.json()
            return float(data.get('Valute', {}).get('USD', {}).get('Value', 90.0))
    except Exception:
        return 90.0

class Calculator:
    @staticmethod
    async def calculate(electricity_cost_rub: float) -> str:
        asics = await get_profitable_asics()
        if not asics: return "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞."
        rate = await get_usd_rub_rate()
        cost_usd = electricity_cost_rub / rate
        result = [f"üí∞ **–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {electricity_cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)**\n"]
        for asic in asics[:12]:
            daily_cost = (asic.power / 1000) * 24 * cost_usd
            profit = asic.profitability - daily_cost
            result.append(f"**{bleach.clean(asic.name)}**\n   –ü—Ä–æ—Ñ–∏—Ç: **${profit:.2f}/–¥–µ–Ω—å**")
        return "\n\n".join(result)

class Game:
    def __init__(self, file_path: str):
        self.file_path = file_path; self.user_rigs: Dict[str, GameRig] = {}
    async def load(self):
        data = await read_json_file(self.file_path)
        for uid, d in data.items():
            d['last_collected'] = datetime.fromisoformat(d['last_collected']) if d.get('last_collected') else None
            self.user_rigs[uid] = GameRig(**d)
        logger.info(f"–ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.user_rigs)} –∏–≥—Ä–æ–∫–æ–≤.")
    async def save(self): await write_json_file(self.file_path, {u: r.__dict__ for u, r in self.user_rigs.items()})
    async def create_rig(self, user: User) -> str:
        uid = str(user.id)
        if uid in self.user_rigs: return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–µ—Ä–º–∞! /my_rig"
        asics = await get_profitable_asics()
        if not asics: return "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–µ—Ä–º—É, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏."
        starter_asic = asics[random.randint(5, min(15, len(asics)-1))]
        async with aiohttp.ClientSession() as s, s.get(f"{Config.COINGECKO_API_URL}/simple/price?ids=bitcoin&vs_currencies=usd") as r:
            btc_price = (await r.json()).get("bitcoin", {}).get("usd", 65000)
        base_rate = starter_asic.profitability / btc_price
        self.user_rigs[uid] = GameRig(name=user.full_name, asic_model=starter_asic.name, base_rate=base_rate)
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ñ–µ—Ä–º–∞ —Å **{starter_asic.name}** —Å–æ–∑–¥–∞–Ω–∞!"
    def get_rig_info(self, uid: str) -> Optional[str]:
        rig = self.user_rigs.get(uid)
        if not rig: return None
        rate = rig.base_rate * Config.LEVEL_MULTIPLIERS.get(rig.level, 1)
        cost = Config.UPGRADE_COSTS.get(rig.level + 1)
        up_txt = f"–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ {rig.level + 1} —É—Ä: `{cost}` BTC." if cost else "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!"
        return (f"üñ•Ô∏è **–§–µ—Ä–º–∞ ¬´{bleach.clean(rig.name)}¬ª** | –£—Ä. {rig.level}\n"
                f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: *{rig.asic_model}*\n"
                f"–î–æ–±—ã—á–∞: `{rate:.8f} BTC/–¥–µ–Ω—å`\n"
                f"–ë–∞–ª–∞–Ω—Å: `{rig.balance:.8f}` BTC\n\n{up_txt}")
    def collect_reward(self, uid: str) -> str:
        rig = self.user_rigs.get(uid)
        if not rig: return "–£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. /my_rig"
        if rig.last_collected and (datetime.now() - rig.last_collected) < timedelta(hours=23, minutes=55):
            h, m = divmod((timedelta(hours=24) - (datetime.now() - rig.last_collected)).seconds, 3600)
            return f"–ï—â–µ —Ä–∞–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ **{h}—á {m//60}–º**."
        mined = rig.base_rate * Config.LEVEL_MULTIPLIERS.get(rig.level, 1)
        rig.balance += mined; rig.last_collected = datetime.now()
        return f"‚úÖ –°–æ–±—Ä–∞–Ω–æ **{mined:.8f}** BTC! –í–∞—à –±–∞–ª–∞–Ω—Å: `{rig.balance:.8f}` BTC."
    def upgrade_rig(self, uid: str) -> str:
        rig = self.user_rigs.get(uid)
        if not rig: return "–£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã."
        cost = Config.UPGRADE_COSTS.get(rig.level + 1)
        if not cost: return "üéâ –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!"
        if rig.balance < cost: return f"‚ùå –ù—É–∂–Ω–æ {cost} BTC."
        rig.balance -= cost; rig.level += 1
        return f"üöÄ **–£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!** –í–∞—à–∞ —Ñ–µ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ **{rig.level}** —É—Ä–æ–≤–Ω—è!"
    def get_top_miners(self) -> str:
        if not self.user_rigs: return "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞."
        s_rigs = sorted(self.user_rigs.values(), key=lambda r: r.balance, reverse=True)
        top = [f"**{i+1}.** {bleach.clean(r.name)} - `{r.balance:.6f}` BTC (–£—Ä. {r.level})" for i, r in enumerate(s_rigs[:5])]
        return "üèÜ **–¢–æ–ø-5 –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ú–∞–π–Ω–µ—Ä–æ–≤:**\n" + "\n".join(top)

class AntiSpam:
    def __init__(self, file_path: str):
        self.file_path = file_path; self.user_profiles: Dict[str, UserProfile] = {}
        self.spam_keywords = ['p2p', '–∞—Ä–±–∏—Ç—Ä–∞–∂', '–æ–±–º–µ–Ω', '—Å–∏–≥–Ω–∞–ª—ã']
    async def load(self):
        data = await read_json_file(self.file_path)
        for uid, pd in data.items():
            pd['first_msg'] = datetime.fromisoformat(pd['first_msg']); pd['last_seen'] = datetime.fromisoformat(pd['last_seen'])
            self.user_profiles[uid] = UserProfile(**pd)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.user_profiles)} –∑–∞–ø–∏—Å–µ–π.")
    async def save(self): await write_json_file(self.file_path, {u: p.__dict__ for u, p in self.user_profiles.items()})
    def process_message(self, message: Message):
        user, uid = message.from_user, str(message.from_user.id)
        if uid not in self.user_profiles:
            self.user_profiles[uid] = UserProfile(user.id, user.full_name, user.username)
        p = self.user_profiles[uid]; p.msg_count += 1; p.last_seen = datetime.utcnow()
        text = (message.text or message.caption or "").lower()
        if any(k in text for k in self.spam_keywords): p.spam_count += 1; logger.warning(f"–°–ø–∞–º –æ—Ç {p.name}: {p.spam_count}")

game = Game(Config.GAME_DATA_FILE); antispam = AntiSpam(Config.PROFILES_DATA_FILE)

# ==============================================================================
# –†–∞–∑–¥–µ–ª 6: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ==============================================================================
@dp.message(CommandStart())
async def send_welcome(message: Message):
    builder = ReplyKeyboardBuilder()
    keys = ["üí∞ –¢–æ–ø ASIC", "üìà –ö—É—Ä—Å", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üïπÔ∏è –ú–æ—è —Ñ–µ—Ä–º–∞"]
    for k in keys: builder.add(types.KeyboardButton(text=k))
    builder.adjust(2)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.", reply_markup=builder.as_markup(resize_keyboard=True))

async def show_news(message: Message): await message.answer("üì∞ –§—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
async def show_halving(message: Message): await message.answer(await get_halving_info(), parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---
@dp.message(F.text.lower().contains("–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
async def calculator_start(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_calculator_cost)
    await message.answer("üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ **—Ä—É–±–ª—è—Ö** –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: `4.5`):", parse_mode="Markdown")

@dp.message(Form.waiting_for_calculator_cost)
async def calculator_process(message: Message, state: FSMContext):
    try:
        cost = float(message.text.replace(',', '.')); await state.clear()
        await message.answer(await Calculator.calculate(cost), parse_mode="Markdown")
    except ValueError: await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `4.5`).")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä—ã ---
@dp.message(F.text.lower().contains("–º–æ—è —Ñ–µ—Ä–º–∞"))
async def my_rig_handler(message: Message):
    uid = str(message.from_user.id)
    info = game.get_rig_info(uid)
    if info:
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ –°–æ–±—Ä–∞—Ç—å", callback_data="game_collect")
        builder.button(text="üöÄ –£–ª—É—á—à–∏—Ç—å", callback_data="game_upgrade")
        builder.button(text="üèÜ –¢–æ–ø-5", callback_data="game_top")
        builder.adjust(2)
        await message.answer(info, parse_mode="Markdown", reply_markup=builder.as_markup())
    else:
        creation_msg = await game.create_rig(message.from_user)
        await message.answer(creation_msg, parse_mode="Markdown")
        if "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º" in creation_msg: await my_rig_handler(message)

@dp.callback_query(F.data.startswith("game_"))
async def game_callbacks(cb: CallbackQuery):
    action, uid = cb.data.split("_")[1], str(cb.from_user.id)
    text = ""
    if action == "collect": text = game.collect_reward(uid)
    elif action == "upgrade": text = game.upgrade_rig(uid)
    elif action == "top": text = game.get_top_miners()
    await cb.answer(text, show_alert=action != "top")
    if action == "top": await cb.message.answer(text, parse_mode="Markdown")
    
    info = game.get_rig_info(uid)
    if info:
        try: await cb.message.edit_text(info, parse_mode="Markdown", reply_markup=cb.message.reply_markup)
        except: pass # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫—É—Ä—Å–∞ ---
@dp.message(F.text.lower().contains("–∫—É—Ä—Å"))
async def price_start(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_ticker)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:")

@dp.message(Form.waiting_for_ticker)
async def process_ticker(message: Message, state: FSMContext):
    await state.clear()
    coin = await get_crypto_price(message.text)
    if not coin: return await message.answer(f"üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}'.")
    await message.answer(f"**{coin.name} ({coin.symbol})**: `${coin.price:,.4f}`", parse_mode="Markdown")

# --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ ---
@dp.message(F.text)
async def text_command_router(message: Message, state: FSMContext):
    text = message.text.lower()
    if "—Ç–æ–ø asic" in text: await show_asics(message)
    elif "–Ω–æ–≤–æ—Å—Ç–∏" in text: await show_news(message)
    elif "—Ö–∞–ª–≤–∏–Ω–≥" in text: await show_halving(message)
    else: # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, —Å—á–∏—Ç–∞–µ–º —Å–ø–∞–º–æ–º
        antispam.process_message(message)

# ==============================================================================
# –†–∞–∑–¥–µ–ª 7: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ==============================================================================
async def main():
    if not Config.TELEGRAM_BOT_TOKEN:
        return logger.critical("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    await game.load(); await antispam.load()
    scheduler.add_job(game.save, 'interval', minutes=5)
    scheduler.add_job(antispam.save, 'interval', minutes=5)
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω.")
    
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    try: asyncio.run(main())
    except (KeyboardInterrupt, SystemExit): logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

