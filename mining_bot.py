# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ========================================================================================
import os
import telebot
import requests
import time
import threading
import schedule
import json
from flask import Flask, request
import gspread
from google.oauth2.service_account import Credentials
from telebot import types
from openai import OpenAI
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import matplotlib
matplotlib.use('Agg') # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥ Matplotlib –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
import matplotlib.pyplot as plt
import io
import re
import random
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
    datefmt='%d/%b/%Y %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- –ö–ª—é—á–∏ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
NEWSAPI_KEY = os.getenv("CRYPTO_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY", "YourApiKeyToken")
NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GOOGLE_JSON_STR = os.getenv("GOOGLE_JSON")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
PARTNER_URL = "https://app.leadteh.ru/w/dTeKr"
PARTNER_BUTTON_TEXT_OPTIONS = ["üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"]
BOT_HINTS = [
    "üí° –£–∑–Ω–∞–π—Ç–µ –∫—É—Ä—Å –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π `/price`", "‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–º—ã–µ –¥–æ—Ö–æ–¥–Ω—ã–µ ASIC",
    "‚õèÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –ø–æ–º–æ—â—å—é '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'", "üì∞ –•–æ—Ç–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏?",
    "ü§ë –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ—é —Ñ–µ—Ä–º—É –∫–æ–º–∞–Ω–¥–æ–π `/upgrade_rig`", "üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏",
    "üèÜ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å–µ–±—è —Å –ª—É—á—à–∏–º–∏ –≤ `/top_miners`", "üéì –ß—Ç–æ —Ç–∞–∫–æ–µ 'HODL'? –£–∑–Ω–∞–π—Ç–µ: `/word`",
    "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ `/quiz`", "üõçÔ∏è –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π: `/shop`"
]
CURRENCY_MAP = {
    '–¥–æ–ª–ª–∞—Ä': 'USD', 'usd': 'USD', '$': 'USD', '–µ–≤—Ä–æ': 'EUR', 'eur': 'EUR', '‚Ç¨': 'EUR',
    '—Ä—É–±–ª—å': 'RUB', 'rub': 'RUB', '‚ÇΩ': 'RUB', '—é–∞–Ω—å': 'CNY', 'cny': 'CNY',
    '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', 'btc': 'BTC', '–±—Ç—Å': 'BTC', '–≤—Ç—Å': 'BTC', '—ç—Ñ–∏—Ä': 'ETH', 'eth': 'ETH',
}
HALVING_INTERVAL = 210000

# --- –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CRYPTO_TERMS = ["–ë–ª–æ–∫—á–µ–π–Ω", "–ì–∞–∑ (Gas)", "–•–∞–ª–≤–∏–Ω–≥", "ICO", "DeFi", "NFT", "–°–∞—Ç–æ—à–∏", "–ö–∏—Ç (Whale)", "HODL", "DEX", "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"]
QUIZ_QUESTIONS = [
    {"question": "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º Bitcoin?", "options": ["–í–∏—Ç–∞–ª–∏–∫ –ë—É—Ç–µ—Ä–∏–Ω", "–°–∞—Ç–æ—à–∏ –ù–∞–∫–∞–º–æ—Ç–æ", "–ò–ª–æ–Ω –ú–∞—Å–∫", "–ü–∞–≤–µ–ª –î—É—Ä–æ–≤"], "correct_index": 1},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ '—Ö–∞–ª–≤–∏–Ω–≥' Bitcoin?", "options": ["–£–¥–≤–æ–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã", "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤–¥–≤–æ–µ", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã"], "correct_index": 1},
    {"question": "–ö–∞–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤—Ç–æ—Ä–æ–π –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ Bitcoin?", "options": ["Solana", "Ripple (XRP)", "Dogecoin", "Ethereum"], "correct_index": 3},
    {"question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ 'NFT'?", "options": ["Non-Fungible Token", "New Financial Technology", "Network Fee Token", "National Fiscal Token"], "correct_index": 0},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ Bitcoin?", "options": ["–ö–æ–ø–µ–π–∫–∞", "–¶–µ–Ω—Ç", "–°–∞—Ç–æ—à–∏", "–í—ç–π"], "correct_index": 2}
]
MINING_RATES = {1: 0.0001, 2: 0.0002, 3: 0.0004, 4: 0.0008, 5: 0.0016}
UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1}
STREAK_BONUS_MULTIPLIER = 0.05
BOOST_COST = 0.0005
BOOST_DURATION_HOURS = 24
QUIZ_REWARD = 0.0001
QUIZ_MIN_CORRECT_FOR_REWARD = 3

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class ExceptionHandler(telebot.ExceptionHandler):
    def handle(self, exception):
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ pyTelegramBotAPI:", exc_info=exception)
        return True

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
if not BOT_TOKEN:
    logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

try:
    bot = telebot.TeleBot(BOT_TOKEN, threaded=False, parse_mode='HTML', exception_handler=ExceptionHandler())
    app = Flask(__name__)
    openai_client = OpenAI(api_key=OPENAI_API_KEY)
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ API: {e}")
    raise

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_states = {}
asic_cache = {"data": [], "timestamp": None}
user_rigs = {}
currency_cache = {"rate": None, "timestamp": None}

# ========================================================================================
# 2. –†–ê–ë–û–¢–ê –° –í–ù–ï–®–ù–ò–ú–ò –°–ï–†–í–ò–°–ê–ú–ò (API)
# ========================================================================================
def get_crypto_price(ticker="BTC"):
    ticker = ticker.upper()
    sources = [
        f"https://api.binance.com/api/v3/ticker/price?symbol={ticker}USDT",
        f"https://api.kucoin.com/api/v1/market/orderbook/level1?symbol={ticker}-USDT",
    ]
    for i, url in enumerate(sources):
        try:
            res = requests.get(url, timeout=4).json()
            if i == 0 and 'price' in res: return (float(res['price']), "Binance")
            if i == 1 and res.get('data', {}).get('price'): return (float(res['data']['price']), "KuCoin")
        except Exception:
            continue
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}.")
    return (None, None)

def get_top_asics(force_update: bool = False):
    global asic_cache
    if not force_update and asic_cache.get("data") and (datetime.now() - asic_cache["timestamp"] < timedelta(hours=1)):
        return asic_cache["data"]
    try:
        r = requests.get("https://www.asicminervalue.com", timeout=15)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "lxml")
        parsed_asics = []
        sha256_table = soup.find('h2', id='sha-256').find_next('table')
        for row in sha256_table.select("tbody tr"):
            cols = [col for col in row.find_all("td")]
            if len(cols) < 5: continue
            
            name = cols[1].find('a').get_text(strip=True) if cols[1].find('a') else "N/A"
            if name == "N/A": continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏

            hashrate = cols[2].get_text(strip=True)
            power_watts_match = re.search(r'([\d,]+)', cols[3].get_text(strip=True))
            daily_revenue_match = re.search(r'([\d\.]+)', cols[4].get_text(strip=True).replace('$', ''))

            if power_watts_match and daily_revenue_match:
                power_watts = float(power_watts_match.group(1).replace(',', ''))
                daily_revenue = float(daily_revenue_match.group(1))
                if power_watts > 0:
                    parsed_asics.append({'name': name, 'hashrate': hashrate, 'power_watts': power_watts, 'daily_revenue': daily_revenue})
        
        if not parsed_asics: raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ASIC")
        
        parsed_asics.sort(key=lambda x: x['daily_revenue'], reverse=True)
        asic_cache = {"data": parsed_asics[:5], "timestamp": datetime.now()}
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(asic_cache['data'])} ASIC.")
        return asic_cache["data"]
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC: {e}", exc_info=True)
        return []

def get_fear_and_greed_index():
    try:
        data = requests.get("https://api.alternative.me/fng/?limit=1", timeout=5).json()['data'][0]
        value, classification = int(data['value']), data['value_classification']
        
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(8, 4.5), subplot_kw={'projection': 'polar'})
        ax.set_yticklabels([])
        ax.set_xticklabels([])
        ax.grid(False)
        ax.spines['polar'].set_visible(False)
        ax.set_ylim(0, 1)
        
        colors = ['#d94b4b', '#e88452', '#ece36a', '#b7d968', '#73c269']
        for i in range(100):
            ax.barh(1, 0.0314, left=3.14 - (i * 0.0314), height=0.3, color=colors[min(len(colors) - 1, int(i / 25))])
        
        angle = 3.14 - (value * 0.0314)
        ax.annotate('', xy=(angle, 1), xytext=(0, 0), arrowprops=dict(facecolor='white', shrink=0.05, width=4, headwidth=10))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º text –≤–º–µ—Å—Ç–æ annotate –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±—ã–ª –ø–æ–ª—è—Ä–Ω—ã–º
        fig.text(0.5, 0.5, f"{value}", ha='center', va='center', fontsize=48, color='white', weight='bold')
        fig.text(0.5, 0.35, classification, ha='center', va='center', fontsize=20, color='white')

        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, transparent=True)
        buf.seek(0)
        plt.close(fig)
        
        text = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>\n"
        return buf, text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}", exc_info=True)
        return None, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]"

# ========================================================================================
# 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================================================================
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["üíπ –ö—É—Ä—Å", "‚öôÔ∏è –¢–æ–ø-5 ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", 
               "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üéì –°–ª–æ–≤–æ –¥–Ω—è",
               "üèÜ –¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤", "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω"]
    markup.add(*[types.KeyboardButton(text) for text in buttons])
    return markup
    
def send_message_with_partner_button(chat_id, text, **kwargs):
    try:
        full_text = f"{text}\n\n---\n<i>{random.choice(BOT_HINTS)}</i>"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
        bot.send_message(chat_id, full_text, reply_markup=markup, disable_web_page_preview=True, **kwargs)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

def send_photo_with_partner_button(chat_id, photo, caption, **kwargs):
    try:
        if not photo: raise ValueError("–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –ø—É—Å—Ç–æ–π")
        full_caption = f"{caption}\n\n---\n<i>{random.choice(BOT_HINTS)}</i>"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
        bot.send_photo(chat_id, photo, caption=full_caption, reply_markup=markup, **kwargs)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–º.")
        send_message_with_partner_button(chat_id, caption, **kwargs)

def get_usd_rub_rate():
    global currency_cache
    if currency_cache["rate"] and (datetime.now() - currency_cache["timestamp"] < timedelta(minutes=30)):
        return currency_cache["rate"]
    sources = ["https://api.exchangerate.host/latest?base=USD&symbols=RUB", "https://api.exchangerate-api.com/v4/latest/USD"]
    for url in sources:
        try:
            response = requests.get(url, timeout=4)
            response.raise_for_status()
            rate = response.json().get('rates', {}).get('RUB')
            if rate:
                currency_cache = {"rate": rate, "timestamp": datetime.now()}
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å {rate} —Å {url}")
                return rate
        except Exception: continue
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/RUB –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
    return None

def calculate_and_format_profit(electricity_cost_rub: float):
    rate = get_usd_rub_rate()
    if not rate: return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    cost_usd = electricity_cost_rub / rate
    asics = get_top_asics()
    if not asics: return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞."
    result = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {electricity_cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>\n"]
    for asic in asics:
        cost = (asic['power_watts'] / 1000) * 24 * cost_usd
        profit = asic['daily_revenue'] - cost
        result.append(f"<b>{telebot.util.escape(asic['name'])}</b>\n  –ü—Ä–æ—Ñ–∏—Ç: <b>${profit:.2f}/–¥–µ–Ω—å</b> (–î–æ—Ö–æ–¥: ${asic['daily_revenue']:.2f}, –†–∞—Å—Ö–æ–¥: ${cost:.2f})")
    return "\n\n".join(result)

# ========================================================================================
# 4. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê
# ========================================================================================
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(msg):
    help_text = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
                 "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                 "<code>/price</code>, <code>/gas</code>, <code>/news</code>\n\n"
                 "<b>–£—Ç–∏–ª–∏—Ç—ã –∏ –∏–≥—Ä–∞:</b>\n"
                 "<code>/my_rig</code>, <code>/collect</code>, <code>/upgrade_rig</code>\n"
                 "<code>/shop</code>, <code>/top_miners</code>, <code>/quiz</code>, <code>/word</code>.")
    bot.send_message(msg.chat.id, help_text, reply_markup=get_main_keyboard())

def get_price_and_send(chat_id, ticker="BTC"):
    price, source = get_crypto_price(ticker)
    if price:
        text = f"üíπ –ö—É—Ä—Å {ticker.upper()}/USD: <b>${price:,.2f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})</i>"
        send_message_with_partner_button(chat_id, text, reply_markup=get_main_keyboard())
    else:
        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {ticker.upper()}."
        bot.send_message(chat_id, text, reply_markup=get_main_keyboard())

@bot.message_handler(commands=['price'])
def handle_price(msg):
    args = msg.text.split()
    if len(args) > 1: get_price_and_send(msg.chat.id, args[1])
    else: set_user_state(msg.from_user.id, 'price_request', "–ö—É—Ä—Å –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–Ω–∞–ø—Ä: BTC, ETH, SOL)")

@bot.message_handler(commands=['fear', 'fng'])
def handle_fear_and_greed(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞...")
    photo, text = get_fear_and_greed_index()
    send_photo_with_partner_button(msg.chat.id, photo=photo, caption=text)

# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞)

# ========================================================================================
# 5. –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================================================
@bot.message_handler(content_types=['text'])
def handle_text_messages(msg):
    try:
        user_id = msg.from_user.id
        text_lower = msg.text.lower().strip()
        current_state = user_states.get(user_id)

        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞)
        if current_state:
            state_handlers = {
                'price_request': lambda: get_price_and_send(msg.chat.id, msg.text),
                'weather_request': lambda: send_message_with_partner_button(msg.chat.id, get_weather(msg.text)),
                'calculator_request': lambda: send_message_with_partner_button(msg.chat.id, calculate_and_format_profit(float(msg.text.replace(',', '.'))))
            }
            if current_state in state_handlers:
                user_states.pop(user_id, None)
                state_handlers[current_state]()
                return
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        command_map = {
            "üíπ –∫—É—Ä—Å": lambda: set_user_state(user_id, 'price_request', "–ö—É—Ä—Å –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–Ω–∞–ø—Ä: BTC, ETH, SOL)"),
            "‚öôÔ∏è —Ç–æ–ø-5 asic": lambda: handle_asics_text(msg),
            "‚õèÔ∏è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": lambda: set_user_state(user_id, 'calculator_request', "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:"),
            "üì∞ –Ω–æ–≤–æ—Å—Ç–∏": lambda: send_message_with_partner_button(msg.chat.id, get_crypto_news()),
            "üò± –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞": lambda: handle_fear_and_greed(msg),
            "‚è≥ —Ö–∞–ª–≤–∏–Ω–≥": lambda: send_message_with_partner_button(msg.chat.id, get_halving_info()),
            "üß† –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞": lambda: handle_quiz(msg),
            "üéì —Å–ª–æ–≤–æ –¥–Ω—è": lambda: handle_word_of_the_day(msg),
            "üèÜ —Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤": lambda: handle_top_miners(msg),
            "üõçÔ∏è –º–∞–≥–∞–∑–∏–Ω": lambda: handle_shop(msg),
            "üå¶Ô∏è –ø–æ–≥–æ–¥–∞": lambda: set_user_state(user_id, 'weather_request', "üå¶ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?")
        }
        if text_lower in command_map:
            command_map[text_lower]()
            return

        # 3. –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç–≤–µ—Ç GPT –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        sale_words = ["–ø—Ä–æ–¥–∞–º", "–∫—É–ø–∏—Ç—å", "–≤ –Ω–∞–ª–∏—á–∏–∏"]
        item_words = ["asic", "–∞—Å–∏–∫", "whatsminer", "antminer"]
        if any(w in text_lower for w in sale_words) and any(w in text_lower for w in item_words):
            log_to_sheet([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), msg.from_user.username or "N/A", msg.text])
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∏ –¥–∏–∞–ª–æ–≥. –¢–µ–∫—Å—Ç: '{msg.text}'"
            send_message_with_partner_button(msg.chat.id, ask_gpt(prompt))
        else:
            bot.send_chat_action(msg.chat.id, 'typing')
            send_message_with_partner_button(msg.chat.id, ask_gpt(msg.text))

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_text_messages!", exc_info=e)
        bot.send_message(msg.chat.id, "üòµ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è!")

def set_user_state(user_id, state, text):
    user_states[user_id] = state
    bot.send_message(user_id, text, reply_markup=types.ReplyKeyboardRemove())
    
def handle_asics_text(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    asics = get_top_asics()
    if not asics: return send_message_with_partner_button(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± ASIC.")
    header = "–ú–æ–¥–µ–ª—å              | H/s      | P, W | –î–æ—Ö–æ–¥/–¥–µ–Ω—å"
    divider = "--------------------|----------|------|-----------"
    rows = [f"{a['name']:<20.19}| {a['hashrate']:<9}| {a['power_watts']:<5.0f}| ${a['daily_revenue']:<10.2f}" for a in asics]
    response_text = f"<pre>{header}\n{divider}\n" + "\n".join(rows) + "</pre>"
    gpt_prompt = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç–∞. –ü–æ–¥—Ç–æ–ª–∫–Ω–∏ –∫ –º—ã—Å–ª–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
    response_text += f"\n\n{ask_gpt(gpt_prompt, 'gpt-4o')}"
    send_message_with_partner_button(msg.chat.id, response_text)

# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)

# ========================================================================================
# 6. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
            return '', 200
        return 'Forbidden', 403
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ!", exc_info=e)
        return "Error", 500

# ... (–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    if WEBHOOK_URL:
        logger.info("–†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞...")
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=f"{WEBHOOK_URL.rstrip('/')}/webhook")
        app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))
    else:
        logger.info("–†–µ–∂–∏–º long-polling...")
        bot.remove_webhook()
        bot.polling(none_stop=True)
