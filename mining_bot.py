import os
import json
import logging
import time
import random
import requests
import openai
import gspread
import pytz
from datetime import datetime, timedelta
from fpdf import FPDF
from feedparser import parse as feedparse
from oauth2client.service_account import ServiceAccountCredentials
from pyTelegramBotAPI import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TG_TOKEN = os.getenv("TELEGRAM_TOKEN", "–í–ê–®_–¢–ì_–¢–û–ö–ï–ù")
OPENAI_KEY = os.getenv("OPENAI_API_KEY", "–í–ê–®_OPENAI_API_KEY")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY", "–í–ê–®_NEWSAPI_KEY")
ADMIN_IDS = [7473992492, 5860994210]   # –í–∞—à–∏ id –∞–¥–º–∏–Ω–æ–≤
GROUP_ID = -1002408729915              # id –≥—Ä—É–ø–ø—ã
GOOGLE_CREDS_PATH = '/etc/secrets/sage-instrument-338811-a8c8cc7f2500.json'
SHEET_ID = '1WqzsXwqw-aDH_lNWSpX5bjHFqT5BHmXYFSgHupAlWQg'
SHEET_TAB = '–õ–∏—Å—Ç1'
REKLAMA_LINK = "https://app.leadteh.ru/w/dTeKr"
BUTTON_CTA = [
    "üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏",
    "üî• –ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü—É—Å–ª–æ–≤–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
    "ü§ë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø—Ç–æ–≤—ã–π –ø—Ä–∞–π—Å –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
    "üì¶ –í—ã–±—Ä–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π"
]
TIMEZONE = pytz.timezone('Europe/Moscow')

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets ---
def log_event(event_type, user_id, msg, extra=None):
    try:
        creds_dict = json.load(open(GOOGLE_CREDS_PATH, "r"))
        creds = ServiceAccountCredentials.from_json_keyfile_dict(
            creds_dict, [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ])
        gc = gspread.authorize(creds)
        ws = gc.open_by_key(SHEET_ID).worksheet(SHEET_TAB)
        now = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
        ws.append_row([now, event_type, str(user_id), str(msg), json.dumps(extra or {})])
    except Exception as e:
        print(f"[LOG ERR]: {e}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI ---
bot = telebot.TeleBot(TG_TOKEN)
openai.api_key = OPENAI_KEY

# --- –ü–µ—Ä–µ–≤–æ–¥ –∏ —Å–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT ---
def gpt_translate_summary(text, lang="ru"):
    prompt = (
        f"–ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –≥–ª–∞–≤–Ω–æ–µ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏ –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ {lang}:\n\n"
        f"–¢–µ–∫—Å—Ç: \"{text}\""
    )
    resp = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=400, temperature=0.6
    )
    return resp.choices[0].message.content.strip()

# --- –ö–ù–û–ü–ö–ê CTA (—Ä–æ—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞) ---
def cta_keyboard():
    btn_text = random.choice(BUTTON_CTA)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(btn_text, url=REKLAMA_LINK))
    return kb

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π ---
def fetch_cryptopanic():
    url = f"https://cryptopanic.com/api/v1/posts/?auth_token=–í–ê–®_CRYPTOPANIC_TOKEN&public=true"
    resp = requests.get(url, timeout=10).json()
    news = []
    for post in resp.get("results", [])[:3]:
        news.append(post["title"] + "\n" + post["url"])
    return news

def fetch_newsapi():
    url = f"https://newsapi.org/v2/top-headlines?category=business&q=crypto&language=en&apiKey={NEWSAPI_KEY}"
    resp = requests.get(url, timeout=10).json()
    return [a["title"] for a in resp.get("articles", [])[:3]]

def fetch_rss(source="https://cointelegraph.com/rss"):
    d = feedparse(source)
    return [entry.title for entry in d.entries[:3]]

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ---
def send_news(chat_id, lang="ru"):
    try:
        all_news = []
        for get_news in [fetch_cryptopanic, fetch_newsapi, lambda: fetch_rss("https://www.coindesk.com/arc/outboundfeeds/rss/")]:

            for n in get_news():
                translated = gpt_translate_summary(n, lang)
                bot.send_message(chat_id, translated, reply_markup=cta_keyboard())
                all_news.append(translated)
        log_event("news_sent", chat_id, "ok", {"count": len(all_news)})
    except Exception as e:
        bot.send_message(chat_id, f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        log_event("news_error", chat_id, str(e))

# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---
@bot.message_handler(commands=['news', '–Ω–æ–≤–æ—Å—Ç–∏'])
def cmd_news(msg):
    send_news(msg.chat.id)
    log_event("cmd_news", msg.from_user.id, msg.text)

@bot.message_handler(commands=['pdf'])
def cmd_pdf(msg):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º PDF –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 10 —Å—Ç—Ä–æ–∫–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        creds_dict = json.load(open(GOOGLE_CREDS_PATH, "r"))
        creds = ServiceAccountCredentials.from_json_keyfile_dict(
            creds_dict, [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ])
        gc = gspread.authorize(creds)
        ws = gc.open_by_key(SHEET_ID).worksheet(SHEET_TAB)
        data = ws.get_all_values()[-10:]
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        for row in data:
            pdf.cell(200, 10, txt=" | ".join(row), ln=True)
        fname = "stats.pdf"
        pdf.output(fname)
        with open(fname, "rb") as f:
            bot.send_document(msg.chat.id, f)
        log_event("pdf_sent", msg.from_user.id, "ok")
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞ PDF: {e}")
        log_event("pdf_err", msg.from_user.id, str(e))

# --- –§–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å) ---
SPAM_PATTERNS = ["scam", "casino", "–∫–∞–∑–∏–Ω–æ", "–¥–∞—Ä–æ–º", "free money"]

@bot.message_handler(func=lambda m: any(x in m.text.lower() for x in SPAM_PATTERNS))
def filter_spam(msg):
    bot.delete_message(msg.chat.id, msg.message_id)
    log_event("spam_blocked", msg.from_user.id, msg.text)

# --- –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ—á–µ–Ω—å –±–∞–∑–æ–≤–æ, –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã) ---
@bot.message_handler(commands=['top'])
def cmd_top(msg):
    try:
        creds_dict = json.load(open(GOOGLE_CREDS_PATH, "r"))
        creds = ServiceAccountCredentials.from_json_keyfile_dict(
            creds_dict, [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ])
        gc = gspread.authorize(creds)
        ws = gc.open_by_key(SHEET_ID).worksheet(SHEET_TAB)
        data = ws.get_all_values()
        user_stats = {}
        for row in data:
            uid = row[2]
            user_stats[uid] = user_stats.get(uid, 0) + 1
        top = sorted(user_stats.items(), key=lambda x: -x[1])[:3]
        res = "\n".join([f"{i+1}. {uid} ‚Äî {cnt} —Å–æ–æ–±—â–µ–Ω–∏–π" for i, (uid, cnt) in enumerate(top)])
        bot.send_message(msg.chat.id, f"üèÜ –¢–æ–ø-3 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö:\n{res}")
        log_event("cmd_top", msg.from_user.id, "ok", {"result": res})
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        log_event("top_err", msg.from_user.id, str(e))

# --- –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∞ ---
@bot.message_handler(func=lambda m: True)
def all_handler(msg):
    log_event("msg", msg.from_user.id, msg.text)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    bot.polling(none_stop=True)
