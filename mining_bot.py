# -*- coding: utf-8 -*-
# ==============================================================================
# –†–∞–∑–¥–µ–ª 1: –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
# ==============================================================================
import asyncio
import json
import logging
import os
import random
import re
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any

import aiofiles
import aiohttp
import bleach
import feedparser
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, User
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from cachetools import TTLCache, cached
from openai import AsyncOpenAI

# ==============================================================================
# –†–∞–∑–¥–µ–ª 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ==============================================================================
class Config:
    # --- API –∏ —Ç–æ–∫–µ–Ω—ã ---
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    CMC_API_KEY = os.getenv("CMC_API_KEY")
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

    # --- –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö ---
    GAME_DATA_FILE = "game_data.json"
    PROFILES_DATA_FILE = "user_profiles.json"

    # --- API URL ---
    ASIC_SOURCE_URL = 'https://www.asicminervalue.com/'
    COINGECKO_API_URL = "https://api.coingecko.com/api/v3"
    MINERSTAT_COINS_URL = "https://api.minerstat.com/v2/coins"
    FEAR_AND_GREED_API_URL = "https://pro-api.coinmarketcap.com/v3/fear-and-greed/historical"
    CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"

    # --- –ù–æ–≤–æ—Å—Ç–∏ ---
    NEWS_RSS_FEEDS = ["https://cointelegraph.com/rss/tag/russia", "https://forklog.com/feed", "https://www.rbc.ru/crypto/feed", "https://bits.media/rss/"]
    NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")
    NEWS_INTERVAL_HOURS = 3

    # --- –ò–≥—Ä–∞ ---
    LEVEL_MULTIPLIERS = {1: 1, 2: 1.5, 3: 2.2, 4: 3.5, 5: 5}
    UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', handlers=[logging.StreamHandler()])
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="UTC")
openai_client = AsyncOpenAI(api_key=Config.OPENAI_API_KEY) if Config.OPENAI_API_KEY else None

# ==============================================================================
# –†–∞–∑–¥–µ–ª 3: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ==============================================================================
class Form(StatesGroup):
    waiting_for_ticker = State()
    waiting_for_calculator_cost = State()

@dataclass
class AsicMiner:
    name: str; algorithm: str; hashrate: str; power: int; profitability: float; source: str

@dataclass
class CryptoCoin:
    id: str; symbol: str; name: str; price: float
    algorithm: Optional[str] = None; market_cap: Optional[int] = None

@dataclass
class GameRig:
    name: str
    asic_model: str
    base_rate: float
    level: int = 1
    balance: float = 0.0
    last_collected: Optional[datetime] = None

@dataclass
class UserProfile:
    user_id: int; name: str; username: Optional[str]
    msg_count: int = 0; spam_count: int = 0
    first_msg: datetime = field(default_factory=datetime.utcnow)
    last_seen: datetime = field(default_factory=datetime.utcnow)

# ==============================================================================
# –†–∞–∑–¥–µ–ª 4: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–∞–π–ª–æ–≤—ã–π I/O
# ==============================================================================
async def read_json_file(filepath: str) -> Dict:
    if not os.path.exists(filepath): return {}
    try:
        async with aiofiles.open(filepath, 'r', encoding='utf-8') as f:
            return json.loads(await f.read())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return {}

async def write_json_file(filepath: str, data: Dict):
    try:
        async with aiofiles.open(filepath, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(data, indent=4, ensure_ascii=False, default=str))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON —Ñ–∞–π–ª–∞ {filepath}: {e}")

# ==============================================================================
# –†–∞–∑–¥–µ–ª 5: –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (API, –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –ò–≥—Ä–∞, –ê–Ω—Ç–∏—Å–ø–∞–º)
# ==============================================================================

# --- API Handler ---
@cached(TTLCache(maxsize=1, ttl=3600))
async def get_profitable_asics() -> List[AsicMiner]:
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤...")
    miners: List[AsicMiner] = []
    try:
        async with aiohttp.ClientSession() as session, session.get(Config.ASIC_SOURCE_URL, timeout=20) as response:
            html = await response.text()
        soup = BeautifulSoup(html, 'lxml')
        table = soup.find('table', {'class': 'table-hover'})
        if table:
            for row in table.find('tbody').find_all('tr'):
                cols = row.find_all('td')
                if len(cols) > 6:
                    name, hashrate, power, algo, prof = cols[0].text, cols[2].text, cols[3].text, cols[5].text, cols[6].text
                    profitability = float(re.sub(r'[^\d.]', '', prof)) if prof else 0.0
                    if profitability > 0:
                        miners.append(AsicMiner(name.strip(), algo.strip(), hashrate.strip(), int(re.sub(r'\D', '', power)), profitability, 'AsicMinerValue'))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ AsicMinerValue: {e}", exc_info=True)
    
    sorted_miners = sorted(miners, key=lambda m: m.profitability, reverse=True)
    logger.info(f"–ö—ç—à ASIC –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(sorted_miners)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
    return sorted_miners

@cached(TTLCache(maxsize=1, ttl=300))
async def get_usd_rub_rate() -> float:
    try:
        async with aiohttp.ClientSession() as session, session.get(Config.CBR_API_URL) as response:
            data = await response.json()
            rate = data.get('Valute', {}).get('USD', {}).get('Value', 90.0)
            return float(rate)
    except Exception:
        return 90.0

# --- Calculator Logic ---
class Calculator:
    @staticmethod
    async def calculate(electricity_cost_rub: float) -> str:
        asics = await get_profitable_asics()
        if not asics: return "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞."
        
        rate = await get_usd_rub_rate()
        cost_usd = electricity_cost_rub / rate
        
        result = [f"üí∞ **–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {electricity_cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)**\n"]
        for asic in asics[:12]:
            daily_cost = (asic.power / 1000) * 24 * cost_usd
            profit = asic.profitability - daily_cost
            result.append(f"**{bleach.clean(asic.name)}**\n   –ü—Ä–æ—Ñ–∏—Ç: **${profit:.2f}/–¥–µ–Ω—å**")
        return "\n\n".join(result)

# --- Game Logic ---
class Game:
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.user_rigs: Dict[str, GameRig] = {}

    async def load(self):
        data = await read_json_file(self.file_path)
        for uid, rig_data in data.items():
            last_collected = datetime.fromisoformat(rig_data['last_collected']) if rig_data.get('last_collected') else None
            self.user_rigs[uid] = GameRig(**{**rig_data, 'last_collected': last_collected})
        logger.info(f"–ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. {len(self.user_rigs)} –∏–≥—Ä–æ–∫–æ–≤.")

    async def save(self):
        await write_json_file(self.file_path, {uid: rig.__dict__ for uid, rig in self.user_rigs.items()})

    async def create_rig(self, user: User) -> str:
        uid = str(user.id)
        if uid in self.user_rigs: return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–µ—Ä–º–∞! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: /my_rig"
        
        top_asics = await get_profitable_asics()
        if not top_asics: return "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–µ—Ä–º—É, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏."
        
        starter_asic = top_asics[random.randint(5, 15)] # –ë–µ—Ä–µ–º –Ω–µ —Å–∞–º—ã–π —Ç–æ–ø–æ–≤—ã–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
        btc_price_data = await get_crypto_price("BTC")
        btc_price = btc_price_data.price if btc_price_data else 65000
        
        base_rate = starter_asic.profitability / btc_price
        
        self.user_rigs[uid] = GameRig(name=user.full_name, asic_model=starter_asic.name, base_rate=base_rate)
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ñ–µ—Ä–º–∞ —Å **{starter_asic.name}** —Å–æ–∑–¥–∞–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É."

    def get_rig_info(self, uid: str) -> Optional[str]:
        rig = self.user_rigs.get(uid)
        if not rig: return None
        
        current_rate = rig.base_rate * Config.LEVEL_MULTIPLIERS.get(rig.level, 1)
        next_level = rig.level + 1
        upgrade_cost = Config.UPGRADE_COSTS.get(next_level)
        upgrade_text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä: `{upgrade_cost}` BTC." if upgrade_cost else "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
        
        return (f"üñ•Ô∏è **–§–µ—Ä–º–∞ ¬´{bleach.clean(rig.name)}¬ª**\n"
                f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: *{rig.asic_model}*\n\n"
                f"**–£—Ä–æ–≤–µ–Ω—å:** {rig.level}\n"
                f"**–î–æ–±—ã—á–∞:** `{current_rate:.8f} BTC/–¥–µ–Ω—å`\n"
                f"**–ë–∞–ª–∞–Ω—Å:** `{rig.balance:.8f}` BTC\n\n"
                f"{upgrade_text}")

    def collect_reward(self, uid: str) -> str:
        rig = self.user_rigs.get(uid)
        if not rig: return "–£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –°–æ–∑–¥–∞–π—Ç–µ –µ–µ –∫–æ–º–∞–Ω–¥–æ–π /my_rig"
        
        now = datetime.now()
        if rig.last_collected and (now - rig.last_collected) < timedelta(hours=23, minutes=55):
            time_left = timedelta(hours=24) - (now - rig.last_collected)
            h, m = divmod(time_left.seconds, 3600); m //= 60
            return f"–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ **{h}—á {m}–º**."
        
        base_mined = rig.base_rate * Config.LEVEL_MULTIPLIERS.get(rig.level, 1)
        rig.balance += base_mined
        rig.last_collected = now
        
        return (f"‚úÖ –°–æ–±—Ä–∞–Ω–æ **{base_mined:.8f}** BTC!\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{rig.balance:.8f}` BTC.")

    def upgrade_rig(self, uid: str) -> str:
        rig = self.user_rigs.get(uid)
        if not rig: return "–£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã."
        next_level = rig.level + 1
        cost = Config.UPGRADE_COSTS.get(next_level)
        if not cost: return "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã!"
        if rig.balance < cost: return f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.** –ù—É–∂–Ω–æ {cost} BTC."
        
        rig.balance -= cost
        rig.level = next_level
        return f"üöÄ **–£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!** –í–∞—à–∞ —Ñ–µ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ **{next_level}** —É—Ä–æ–≤–Ω—è!"

    def get_top_miners(self) -> str:
        if not self.user_rigs: return "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞."
        sorted_rigs = sorted(self.user_rigs.values(), key=lambda r: r.balance, reverse=True)
        top_list = [f"**{i+1}.** {bleach.clean(rig.name)} - `{rig.balance:.6f}` BTC (–£—Ä. {rig.level})" for i, rig in enumerate(sorted_rigs[:5])]
        return "üèÜ **–¢–æ–ø-5 –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ú–∞–π–Ω–µ—Ä–æ–≤:**\n" + "\n".join(top_list)

# --- AntiSpam Logic ---
class AntiSpam:
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.user_profiles: Dict[str, UserProfile] = {}
        self.spam_keywords = ['p2p', '–∞—Ä–±–∏—Ç—Ä–∞–∂', '–æ–±–º–µ–Ω', '—Å–∏–≥–Ω–∞–ª—ã', '–æ–±—É—á–µ–Ω–∏–µ', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫']

    async def load(self):
        data = await read_json_file(self.file_path)
        for uid, profile_data in data.items():
            self.user_profiles[uid] = UserProfile(**profile_data)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã. {len(self.user_profiles)} –∑–∞–ø–∏—Å–µ–π.")

    async def save(self):
        await write_json_file(self.file_path, {uid: profile.__dict__ for uid, profile in self.user_profiles.items()})

    def process_message(self, message: Message):
        user = message.from_user
        uid = str(user.id)
        if uid not in self.user_profiles:
            self.user_profiles[uid] = UserProfile(user_id=user.id, name=user.full_name, username=user.username)
        
        profile = self.user_profiles[uid]
        profile.msg_count += 1
        profile.last_seen = datetime.utcnow()

        text = (message.text or message.caption or "").lower()
        if any(keyword in text for keyword in self.spam_keywords):
            profile.spam_count += 1
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            # asyncio.create_task(bot.delete_message(...))
            # asyncio.create_task(bot.send_message(...))
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –æ—Ç {user.full_name} ({uid}). –°—á–µ—Ç—á–∏–∫: {profile.spam_count}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
game = Game(Config.GAME_DATA_FILE)
antispam = AntiSpam(Config.PROFILES_DATA_FILE)

# ==============================================================================
# –†–∞–∑–¥–µ–ª 6: –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ==============================================================================

# --- –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤) ---
async def show_main_menu(message: Message, text: str = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫."):
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="üí∞ –¢–æ–ø ASIC"), types.KeyboardButton(text="üìà –ö—É—Ä—Å"))
    builder.row(types.KeyboardButton(text="‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"), types.KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"))
    builder.row(types.KeyboardButton(text="‚è≥ –•–∞–ª–≤–∏–Ω–≥"), types.KeyboardButton(text="üïπÔ∏è –ú–æ—è —Ñ–µ—Ä–º–∞"))
    await message.answer(text, reply_markup=builder.as_markup(resize_keyboard=True))

async def show_asics(message: Message):
    await message.answer("üîç –ò—â—É —Å–∞–º—ã–µ –¥–æ—Ö–æ–¥–Ω—ã–µ ASIC-–º–∞–π–Ω–µ—Ä—ã...")
    asics = await get_profitable_asics()
    if not asics: return await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö.")
    response_text = "üèÜ **–¢–æ–ø-10 —Å–∞–º—ã—Ö –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC-–º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
    for i, miner in enumerate(asics[:10]):
        response_text += (f"**{i+1}. {bleach.clean(miner.name)}**\n"
                          f"   - –ê–ª–≥–æ—Ä–∏—Ç–º: `{miner.algorithm}`\n"
                          f"   - –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: `${miner.profitability:.2f}`\n")
    await message.answer(response_text, parse_mode="Markdown")

async def show_news(message: Message):
    # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (—É–ø—Ä–æ—â–µ–Ω–∞)
    await message.answer("üì∞ –§—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def show_halving_info(message: Message):
    await message.answer("‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤—Ä–µ–º—è –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞...")
    text = await get_halving_info()
    await message.answer(text, parse_mode="Markdown")

async def process_crypto_query(message: Message, state: FSMContext):
    await state.clear()
    query = message.text.strip()
    await message.answer(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ '{query}'...")
    coin = await get_crypto_price(query)
    if not coin: return await message.answer(f"üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'.")
    response_text = f"**{coin.name} ({coin.symbol.upper()})**\n\nüí∞ **–¶–µ–Ω–∞:** ${coin.price:,.4f}\n"
    if coin.algorithm: response_text += f"‚öôÔ∏è **–ê–ª–≥–æ—Ä–∏—Ç–º:** `{coin.algorithm}`\n"
    await message.answer(response_text, parse_mode="Markdown")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def send_welcome(message: Message):
    await show_main_menu(message)

@dp.message(F.text.lower().contains("—Ç–æ–ø asic"))
async def text_asics_handler(message: Message): await show_asics(message)
@dp.message(F.text.lower().contains("–Ω–æ–≤–æ—Å—Ç–∏"))
async def text_news_handler(message: Message): await show_news(message)
@dp.message(F.text.lower().contains("—Ö–∞–ª–≤–∏–Ω–≥"))
async def text_halving_handler(message: Message): await show_halving_info(message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏) ---
@dp.message(F.text.lower().contains("–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
async def calculator_start(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_calculator_cost)
    await message.answer("üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ **—Ä—É–±–ª—è—Ö** –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: `4.5`):", parse_mode="Markdown")

@dp.message(Form.waiting_for_calculator_cost)
async def calculator_process(message: Message, state: FSMContext):
    try:
        cost = float(message.text.replace(',', '.'))
        await state.clear()
        calculation_result = await Calculator.calculate(cost)
        await message.answer(calculation_result, parse_mode="Markdown")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `4.5`).")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä—ã ---
@dp.message(F.text.lower().contains("–º–æ—è —Ñ–µ—Ä–º–∞"))
async def my_rig_handler(message: Message):
    uid = str(message.from_user.id)
    info = game.get_rig_info(uid)
    if info:
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ –°–æ–±—Ä–∞—Ç—å", callback_data="game_collect")
        builder.button(text="üöÄ –£–ª—É—á—à–∏—Ç—å", callback_data="game_upgrade")
        builder.button(text="üèÜ –¢–æ–ø-5", callback_data="game_top")
        builder.adjust(2)
        await message.answer(info, parse_mode="Markdown", reply_markup=builder.as_markup())
    else:
        await game.create_rig(message.from_user)
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ñ–µ—Ä–º—É
        await my_rig_handler(message)

@dp.callback_query(Text(startswith="game_"))
async def game_callbacks(cb: CallbackQuery):
    action = cb.data.split("_")[1]
    uid = str(cb.from_user.id)
    response_text = ""
    if action == "collect": response_text = game.collect_reward(uid)
    elif action == "upgrade": response_text = game.upgrade_rig(uid)
    elif action == "top": response_text = game.get_top_miners()
    
    await cb.answer(response_text, show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–µ—Ä–º–µ
    info = game.get_rig_info(uid)
    if info: await cb.message.edit_text(info, parse_mode="Markdown", reply_markup=cb.message.reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫—É—Ä—Å–∞ (—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏) ---
@dp.message(F.text.lower().contains("–∫—É—Ä—Å"))
async def price_start(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_ticker)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:")

@dp.message(Form.waiting_for_ticker)
async def process_ticker(message: Message, state: FSMContext):
    await process_crypto_query(message, state)

# --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º) ---
@dp.message()
async def any_text_handler(message: Message):
    antispam.process_message(message)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç-–∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É
    # await message.answer("–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—Å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.")

# ==============================================================================
# –†–∞–∑–¥–µ–ª 8: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ==============================================================================
async def main():
    if not Config.TELEGRAM_BOT_TOKEN:
        return logger.critical("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await game.load()
    await antispam.load()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.add_job(game.save, 'interval', minutes=5, id='save_game')
    scheduler.add_job(antispam.save, 'interval', minutes=5, id='save_profiles')
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω.")

    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook(drop_pending_updates=True)

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long-polling...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        if scheduler.running: scheduler.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

