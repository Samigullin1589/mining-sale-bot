# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ========================================================================================
import os
import telebot
import requests
import time
import threading
import schedule
import json
import atexit
from flask import Flask, request
import gspread
from google.oauth2.service_account import Credentials
from telebot import types
from openai import OpenAI
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
import re
import random
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
    datefmt='%d/%b/%Y %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- –ö–ª—é—á–∏ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) ---
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
NEWSAPI_KEY = os.getenv("CRYPTO_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY", "YourApiKeyToken") # –£–î–ê–õ–ï–ù–û: –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GOOGLE_JSON_STR = os.getenv("GOOGLE_JSON")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")
DATA_FILE = "user_data.json"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ ---
if not BOT_TOKEN:
    logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
PARTNER_URL = "https://app.leadteh.ru/w/dTeKr"
PARTNER_BUTTON_TEXT_OPTIONS = ["üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"]
BOT_HINTS = [
    "üí° –£–∑–Ω–∞–π—Ç–µ –∫—É—Ä—Å –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π `/price`", "‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–º—ã–µ –¥–æ—Ö–æ–¥–Ω—ã–µ ASIC",
    "‚õèÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –ø–æ–º–æ—â—å—é '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'", "üì∞ –•–æ—Ç–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏?",
    "ü§ë –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ—é —Ñ–µ—Ä–º—É –∫–æ–º–∞–Ω–¥–æ–π `/upgrade_rig`", "üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏",
    "üèÜ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å–µ–±—è —Å –ª—É—á—à–∏–º–∏ –≤ `/top_miners`", "üéì –ß—Ç–æ —Ç–∞–∫–æ–µ 'HODL'? –£–∑–Ω–∞–π—Ç–µ: `/word`",
    "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ `/quiz`", "üõçÔ∏è –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π: `/shop`"
]
HALVING_INTERVAL = 210000

# --- –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CRYPTO_TERMS = ["–ë–ª–æ–∫—á–µ–π–Ω", "–ì–∞–∑ (Gas)", "–•–∞–ª–≤–∏–Ω–≥", "ICO", "DeFi", "NFT", "–°–∞—Ç–æ—à–∏", "–ö–∏—Ç (Whale)", "HODL", "DEX", "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"]
MINING_RATES = {1: 0.0001, 2: 0.0002, 3: 0.0004, 4: 0.0008, 5: 0.0016}
UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1}
STREAK_BONUS_MULTIPLIER = 0.05
BOOST_COST = 0.0005
BOOST_DURATION_HOURS = 24
QUIZ_REWARD = 0.0001
QUIZ_MIN_CORRECT_FOR_REWARD = 3
QUIZ_QUESTIONS_COUNT = 5

# --- –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Telebot ---
class ExceptionHandler(telebot.ExceptionHandler):
    def handle(self, exception):
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ pyTelegramBotAPI:", exc_info=exception)
        return True

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
bot = telebot.TeleBot(BOT_TOKEN, threaded=False, parse_mode='HTML', exception_handler=ExceptionHandler())
app = Flask(__name__)
try:
    openai_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
    if not openai_client:
        logger.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å GPT –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
except Exception as e:
    openai_client = None
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI: {e}", exc_info=True)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫—ç—à ---
asic_cache = {"data": [], "timestamp": None}
currency_cache = {"rate": None, "timestamp": None}
user_quiz_states = {} # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

# ========================================================================================
# 2. –ö–õ–ê–°–° –ò–ì–†–û–í–û–ô –õ–û–ì–ò–ö–ò
# ========================================================================================
class GameLogic:
    """–ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∏–≥—Ä–æ–π '—Å–∏–º—É–ª—è—Ç–æ—Ä –º–∞–π–Ω–∏–Ω–≥–∞'."""
    def __init__(self, data_file):
        self.data_file = data_file
        self.user_rigs = self.load_data()
        atexit.register(self.save_data) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    loaded_data = json.load(f)
                    rigs = {}
                    for user_id, rig_data in loaded_data.items():
                        for key, value in rig_data.items():
                            if 'until' in key or 'collected' in key and value:
                                rig_data[key] = datetime.fromisoformat(value)
                        rigs[int(user_id)] = rig_data
                logger.info(f"–î–∞–Ω–Ω—ã–µ {len(rigs)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                return rigs
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.warning(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π. –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        return {}

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ñ–µ—Ä–º—ã) –≤ JSON —Ñ–∞–π–ª."""
        try:
            data_to_save = {}
            for user_id, rig_data in self.user_rigs.items():
                copied_data = rig_data.copy()
                for key, value in copied_data.items():
                    if isinstance(value, datetime):
                        copied_data[key] = value.isoformat()
                data_to_save[user_id] = copied_data

            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data_to_save, f, indent=4, ensure_ascii=False)
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)

    def get_rig_info(self, user_id, user_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–µ—Ä–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞—è –µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        if user_id not in self.user_rigs:
            self.user_rigs[user_id] = {'last_collected': None, 'balance': 0.0, 'level': 1, 'streak': 0, 'name': user_name, 'boost_active_until': None}
            initial_message = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ñ–µ—Ä–º—É!\n\n"
        else:
            initial_message = ""
        
        rig = self.user_rigs[user_id]
        next_level = rig['level'] + 1
        upgrade_cost_text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è: <code>{UPGRADE_COSTS.get(next_level, 'N/A')}</code> BTC." if next_level in UPGRADE_COSTS else "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
        
        boost_status = ""
        if rig.get('boost_active_until') and datetime.now() < rig['boost_active_until']:
            time_left = rig['boost_active_until'] - datetime.now()
            h, rem = divmod(time_left.seconds, 3600)
            m, _ = divmod(rem, 60)
            boost_status = f"‚ö°Ô∏è <b>–ë—É—Å—Ç x2 –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ: {h}—á {m}–º</b>\n"

        response = (f"{initial_message}üñ•Ô∏è <b>–§–µ—Ä–º–∞ {telebot.util.escape(rig['name'])}</b>\n\n"
                    f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {rig['level']}\n"
                    f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{rig['balance']:.8f}</code> BTC\n"
                    f"<b>–î–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è:</b> {rig['streak']} üî• (–±–æ–Ω—É—Å <b>+{rig['streak'] * STREAK_BONUS_MULTIPLIER:.0%}</b>)\n"
                    f"{boost_status}\n"
                    f"{upgrade_cost_text}\n\n"
                    "<code>/collect</code>, <code>/upgrade_rig</code>, <code>/shop</code>")
        return response

    def collect_reward(self, user_id):
        if user_id not in self.user_rigs: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>."
        
        rig = self.user_rigs[user_id]
        now = datetime.now()
        if rig.get('last_collected') and (now - rig['last_collected']) < timedelta(hours=24):
            time_left = timedelta(hours=24) - (now - rig['last_collected'])
            h, m = divmod(time_left.seconds, 3600)[0], divmod(time_left.seconds % 3600, 60)[0]
            return f"–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ <b>{h}—á {m}–º</b>."
        
        rig['streak'] = rig['streak'] + 1 if rig.get('last_collected') and (now - rig['last_collected']) < timedelta(hours=48) else 1
        
        base_mined = MINING_RATES.get(rig['level'], 0.0001)
        streak_bonus = base_mined * rig['streak'] * STREAK_BONUS_MULTIPLIER
        boost_multiplier = 2 if rig.get('boost_active_until') and now < rig['boost_active_until'] else 1
        total_mined = (base_mined + streak_bonus) * boost_multiplier
        
        rig['balance'] += total_mined
        rig['last_collected'] = now
        
        boost_text = " (x2 –ë—É—Å—Ç!)" if boost_multiplier > 1 else ""
        return (f"‚úÖ –°–æ–±—Ä–∞–Ω–æ <b>{total_mined:.8f}</b> BTC{boost_text}!\n"
                f"  (–ë–∞–∑–∞: {base_mined:.8f} + –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: {streak_bonus:.8f})\n"
                f"üî• –í–∞—à–∞ —Å–µ—Ä–∏—è: <b>{rig['streak']} –¥–Ω–µ–π!</b>\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{rig['balance']:.8f}</code> BTC.")

    def upgrade_rig(self, user_id):
        if user_id not in self.user_rigs: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>."
        
        rig = self.user_rigs[user_id]
        next_level, cost = rig['level'] + 1, UPGRADE_COSTS.get(rig['level'] + 1)
        if not cost: return "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã!"
        
        if rig['balance'] >= cost:
            rig['balance'] -= cost
            rig['level'] = next_level
            return f"üöÄ <b>–£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n–í–∞—à–∞ —Ñ–µ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ <b>{next_level}</b> —É—Ä–æ–≤–Ω—è!"
        else:
            return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>\n\n–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–±—É–µ—Ç—Å—è <code>{cost}</code> BTC."

    def get_top_miners(self):
        if not self.user_rigs: return "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞."
        
        sorted_rigs = sorted(self.user_rigs.values(), key=lambda r: r.get('balance', 0), reverse=True)
        response = ["üèÜ <b>–¢–æ–ø-5 –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ú–∞–π–Ω–µ—Ä–æ–≤:</b>\n"]
        for i, rig in enumerate(sorted_rigs[:5]):
            response.append(f"<b>{i+1}.</b> {telebot.util.escape(rig.get('name','N/A'))} - <code>{rig.get('balance',0):.6f}</code> BTC (–£—Ä. {rig.get('level',1)})")
        return "\n".join(response)
        
    def buy_boost(self, user_id):
        if user_id not in self.user_rigs: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>."
        rig = self.user_rigs[user_id]
        if rig.get('boost_active_until') and datetime.now() < rig['boost_active_until']:
            return "–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –±—É—Å—Ç!"
            
        if rig['balance'] >= BOOST_COST:
            rig['balance'] -= BOOST_COST
            rig['boost_active_until'] = datetime.now() + timedelta(hours=BOOST_DURATION_HOURS)
            return "‚ö°Ô∏è <b>–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±—É—Å—Ç –∫—É–ø–ª–µ–Ω!</b>\n\n–í–∞—à–∞ –¥–æ–±—ã—á–∞ –±—É–¥–µ—Ç —É–¥–≤–æ–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 24 —á–∞—Å–æ–≤."
        else:
            return "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>"

    def apply_quiz_reward(self, user_id):
        if user_id in self.user_rigs:
            self.user_rigs[user_id]['balance'] += QUIZ_REWARD
            return f"\n\nüéÅ –ó–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{QUIZ_REWARD:.4f} BTC!</b>"
        else:
            return f"\n\nüéÅ –í—ã –±—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{QUIZ_REWARD:.4f} BTC</b>, –µ—Å–ª–∏ –±—ã —É –≤–∞—Å –±—ã–ª–∞ —Ñ–µ—Ä–º–∞! –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å —Å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
game = GameLogic(DATA_FILE)

# ========================================================================================
# 3. –†–ê–ë–û–¢–ê –° –í–ù–ï–®–ù–ò–ú–ò –°–ï–†–í–ò–°–ê–ú–ò (API)
# ========================================================================================
def get_gsheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞."""
    try:
        if not GOOGLE_JSON_STR or not SHEET_ID:
            logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return None
        creds_dict = json.loads(GOOGLE_JSON_STR)
        creds = Credentials.from_service_account_info(creds_dict, scopes=['https://www.googleapis.com/auth/spreadsheets'])
        return gspread.authorize(creds).open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None

# –û—Å—Ç–∞–ª—å–Ω—ã–µ API-—Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
def log_to_sheet(row_data: list):
    try:
        sheet = get_gsheet()
        if sheet: sheet.append_row(row_data, value_input_option='USER_ENTERED')
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

def ask_gpt(prompt: str, model: str = "gpt-4o"):
    if not openai_client: return "[‚ùå –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á API.]"
    try:
        res = openai_client.chat.completions.create(model=model, messages=[{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å HTML-—Ç–µ–≥–∞–º–∏."}, {"role": "user", "content": prompt}], timeout=20.0)
        return res.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {e}"); return "[‚ùå –û—à–∏–±–∫–∞ GPT: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.]"

def get_crypto_price(ticker="BTC"):
    ticker = ticker.upper()
    sources = [f"https://api.binance.com/api/v3/ticker/price?symbol={ticker}USDT", f"https://api.kucoin.com/api/v1/market/orderbook/level1?symbol={ticker}-USDT"]
    for i, url in enumerate(sources):
        try:
            res = requests.get(url, timeout=4).json()
            if i == 0 and 'price' in res: return (float(res['price']), "Binance")
            if i == 1 and res.get('data', {}).get('price'): return (float(res['data']['price']), "KuCoin")
        except Exception: continue
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}."); return (None, None)

def get_top_asics(force_update: bool = False):
    global asic_cache
    if not force_update and asic_cache.get("data") and (datetime.now() - asic_cache.get("timestamp", datetime.min) < timedelta(hours=1)): return asic_cache.get("data")
    try:
        r = requests.get("https://www.asicminervalue.com", timeout=15); r.raise_for_status()
        soup = BeautifulSoup(r.text, "lxml"); parsed_asics = []
        table = soup.find('h2', id='sha-256').find_next('table')
        for row in table.select("tbody tr"):
            cols = row.find_all("td"); name_tag = cols[1].find('a')
            if len(cols) < 5 or not name_tag: continue
            name = name_tag.get_text(strip=True); hashrate = cols[2].get_text(strip=True)
            power = re.search(r'([\d,]+)', cols[3].get_text(strip=True))
            revenue = re.search(r'([\d\.]+)', cols[4].get_text(strip=True).replace('$', ''))
            if power and revenue: parsed_asics.append({'name': name, 'hashrate': hashrate, 'power_watts': float(power.group(1).replace(',', '')), 'daily_revenue': float(revenue.group(1))})
        if not parsed_asics: raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ASIC.")
        parsed_asics.sort(key=lambda x: x['daily_revenue'], reverse=True)
        asic_cache = {"data": parsed_asics[:5], "timestamp": datetime.now()}
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(asic_cache['data'])} ASIC.")
        return asic_cache["data"]
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC: {e}", exc_info=True); return []

def get_fear_and_greed_index():
    try:
        data = requests.get("https://api.alternative.me/fng/?limit=1", timeout=5).json()['data'][0]
        value, classification = int(data['value']), data['value_classification']
        plt.style.use('dark_background'); fig, ax = plt.subplots(figsize=(8, 4.5), subplot_kw={'projection': 'polar'})
        ax.set_yticklabels([]); ax.set_xticklabels([]); ax.grid(False); ax.spines['polar'].set_visible(False); ax.set_ylim(0, 1)
        colors = ['#d94b4b', '#e88452', '#ece36a', '#b7d968', '#73c269']
        for i in range(100): ax.barh(1, 0.0314, left=3.14 - (i * 0.0314), height=0.3, color=colors[min(len(colors) - 1, int(i / 25))])
        angle = 3.14 - (value * 0.0314)
        ax.annotate('', xy=(angle, 1), xytext=(0, 0), arrowprops=dict(facecolor='white', shrink=0.05, width=4, headwidth=10))
        fig.text(0.5, 0.5, f"{value}", ha='center', va='center', fontsize=48, color='white', weight='bold')
        fig.text(0.5, 0.35, classification, ha='center', va='center', fontsize=20, color='white')
        buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=150, transparent=True); buf.seek(0); plt.close(fig)
        prompt = f"–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –¥–ª—è –º–∞–π–Ω–µ—Ä–∞, –∫–∞–∫ '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{value} ({classification})' –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        explanation = ask_gpt(prompt)
        text = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>\n\n{explanation}"
        return buf, text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}", exc_info=True)
        return None, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]"

def get_usd_rub_rate():
    global currency_cache
    if currency_cache.get("rate") and (datetime.now() - currency_cache.get("timestamp", datetime.min) < timedelta(minutes=30)): return currency_cache["rate"]
    sources = ["https://api.exchangerate.host/latest?base=USD&symbols=RUB", "https://api.exchangerate-api.com/v4/latest/USD"]
    for url in sources:
        try:
            response = requests.get(url, timeout=4); response.raise_for_status()
            rate = response.json().get('rates', {}).get('RUB')
            if rate: currency_cache = {"rate": rate, "timestamp": datetime.now()}; return rate
        except Exception: continue
    return None

def get_halving_info():
    try:
        current_block = int(requests.get("https://blockchain.info/q/getblockcount", timeout=5).text)
        blocks_left = ((current_block // HALVING_INTERVAL) + 1) * HALVING_INTERVAL - current_block
        if blocks_left <= 0: return f"üéâ <b>–•–∞–ª–≤–∏–Ω–≥ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª!</b>"
        days, rem_min = divmod(blocks_left * 10, 1440); hours, _ = divmod(rem_min, 60)
        return f"‚è≥ <b>–î–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\nüóì <b>–î–Ω–µ–π:</b> <code>{days}</code> | ‚è∞ <b>–ß–∞—Å–æ–≤:</b> <code>{hours}</code>\nüß± <b>–ë–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞:</b> <code>{blocks_left:,}</code>"
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞: {e}"); return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ]"

def get_crypto_news():
    if not NEWSAPI_KEY: return "[‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–ª –∫–ª—é—á API.]"
    try:
        params = {"auth_token": NEWSAPI_KEY, "public": "true", "currencies": "BTC,ETH"}
        posts = requests.get("https://cryptopanic.com/api/v1/posts/", params=params, timeout=10).json().get("results", [])[:3]
        if not posts: return "[üßê –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]"
        
        items = []
        for p in posts:
            title = p['title']
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –£–±—Ä–∞–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–∞—è f-—Å—Ç—Ä–æ–∫–∞
            prompt = f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ): '{title}'"
            summary = ask_gpt(prompt, "gpt-4o-mini")
            
            if '[‚ùå' in summary:
                summary = telebot.util.escape(title)
            
            link = p.get("url", "")
            items.append(f'üîπ <a href="{link}">{summary}</a>')
            
        return "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(items)
    except requests.RequestException as e: logger.error(f"–û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π: {e}"); return "[‚ùå –û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π]"

# –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑ –±–µ–∑ API –∫–ª—é—á–∞
def get_eth_gas_price():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ –≥–∞–∑ –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ethgas.watch."""
    try:
        res = requests.get("https://ethgas.watch/api/gas", timeout=5).json()
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {"slow": {"gwei": ...}, "normal": ..., "fast": ...}
        slow_price = res.get('slow', {}).get('gwei', 'N/A')
        normal_price = res.get('normal', {}).get('gwei', 'N/A')
        fast_price = res.get('fast', {}).get('gwei', 'N/A')
        
        return (f"‚õΩÔ∏è <b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ (Gwei):</b>\n\n"
                f"üê¢ <b>–ú–µ–¥–ª–µ–Ω–Ω–æ:</b> <code>{slow_price}</code>\n"
                f"üö∂‚Äç‚ôÇÔ∏è <b>–°—Ä–µ–¥–Ω–µ:</b> <code>{normal_price}</code>\n"
                f"üöÄ <b>–ë—ã—Å—Ç—Ä–æ:</b> <code>{fast_price}</code>\n\n"
                f"<i>–î–∞–Ω–Ω—ã–µ –æ—Ç ethgas.watch</i>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑: {e}")
        return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ]"

def get_new_quiz_questions():
    try:
        url = f"https://opentdb.com/api.php?amount={QUIZ_QUESTIONS_COUNT}&type=multiple"
        response = requests.get(url, timeout=7).json()
        if response.get("response_code") != 0: logger.error(f"API –≤–∏–∫—Ç–æ—Ä–∏–Ω –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: {response}"); return None
        formatted_questions = []
        for item in response.get("results", []):
            options = [BeautifulSoup(o, "html.parser").text for o in item['incorrect_answers']]
            correct_answer = BeautifulSoup(item['correct_answer'], "html.parser").text
            options.append(correct_answer); random.shuffle(options)
            formatted_questions.append({"question": BeautifulSoup(item['question'], "html.parser").text, "options": options, "correct_index": options.index(correct_answer)})
        return formatted_questions
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}"); return None

# ========================================================================================
# 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
# ========================================================================================
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["üíπ –ö—É—Ä—Å", "‚öôÔ∏è –¢–æ–ø-5 ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üéì –°–ª–æ–≤–æ –¥–Ω—è", "üèÜ –¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤", "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω"]
    markup.add(*[types.KeyboardButton(text) for text in buttons])
    return markup

def send_message_with_partner_button(chat_id, text, **kwargs):
    try:
        markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
        bot.send_message(chat_id, f"{text}\n\n---\n<i>{random.choice(BOT_HINTS)}</i>", reply_markup=markup, disable_web_page_preview=True, **kwargs)
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

def send_photo_with_partner_button(chat_id, photo, caption, **kwargs):
    try:
        if not photo: raise ValueError("–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –ø—É—Å—Ç–æ–π")
        markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
        bot.send_photo(chat_id, photo, caption=f"{caption}\n\n---\n<i>{random.choice(BOT_HINTS)}</i>", reply_markup=markup, **kwargs)
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–º."); send_message_with_partner_button(chat_id, caption)

def calculate_and_format_profit(electricity_cost_rub: float):
    rate = get_usd_rub_rate(); asics = get_top_asics()
    if not rate: return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    if not asics: return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞."
    cost_usd = electricity_cost_rub / rate
    result = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {electricity_cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>\n"]
    for asic in asics:
        cost = (asic['power_watts'] / 1000) * 24 * cost_usd; profit = asic['daily_revenue'] - cost
        result.append(f"<b>{telebot.util.escape(asic['name'])}</b>\n  –ü—Ä–æ—Ñ–∏—Ç: <b>${profit:.2f}/–¥–µ–Ω—å</b> (–î–æ—Ö–æ–¥: ${asic['daily_revenue']:.2f}, –†–∞—Å—Ö–æ–¥: ${cost:.2f})")
    return "\n".join(result)

# ========================================================================================
# 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================================================
# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(msg):
    help_text = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
                 "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                 "<code>/price</code>, <code>/gas</code>, <code>/news</code>\n\n"
                 "<b>–£—Ç–∏–ª–∏—Ç—ã –∏ –∏–≥—Ä–∞:</b>\n"
                 "<code>/my_rig</code>, <code>/collect</code>, <code>/upgrade_rig</code>\n"
                 "<code>/shop</code>, <code>/top_miners</code>, <code>/quiz</code>, <code>/word</code>.")
    bot.send_message(msg.chat.id, help_text, reply_markup=get_main_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) ---
@bot.message_handler(commands=['price'])
@bot.message_handler(func=lambda message: message.text.lower() == 'üíπ –∫—É—Ä—Å')
def handle_price_request(msg):
    sent = bot.send_message(msg.chat.id, "–ö—É—Ä—Å –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–Ω–∞–ø—Ä: BTC, ETH, SOL)", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(sent, process_price_step)

def process_price_step(msg):
    price, source = get_crypto_price(msg.text)
    if price:
        text = f"üíπ –ö—É—Ä—Å {msg.text.upper()}/USD: <b>${price:,.2f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})</i>"
        send_message_with_partner_button(msg.chat.id, text, reply_markup=get_main_keyboard())
    else:
        bot.send_message(msg.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {msg.text.upper()}.", reply_markup=get_main_keyboard())

@bot.message_handler(commands=['asics'])
@bot.message_handler(func=lambda message: message.text.lower() == '‚öôÔ∏è —Ç–æ–ø-5 asic')
def handle_asics_text(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    asics = get_top_asics()
    if not asics: return send_message_with_partner_button(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± ASIC.")
    rows = [f"{a['name']:<22.21}| {a['hashrate']:<9}| {a['power_watts']:<5.0f}| ${a['daily_revenue']:<10.2f}" for a in asics]
    response = f"<pre>–ú–æ–¥–µ–ª—å                | H/s      | P, W | –î–æ—Ö–æ–¥/–¥–µ–Ω—å\n" \
               f"----------------------|----------|------|-----------\n" + "\n".join(rows) + "</pre>"
    response += f"\n\n{ask_gpt('–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç–∞ –ø–æ —Å–ø–∏—Å–∫—É –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC. –ü–æ–¥—Ç–æ–ª–∫–Ω–∏ –∫ –º—ã—Å–ª–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.', 'gpt-4o')}"
    send_message_with_partner_button(msg.chat.id, response)

@bot.message_handler(commands=['calculator'])
@bot.message_handler(func=lambda message: message.text.lower() == '‚õèÔ∏è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
def handle_calculator_request(msg):
    sent = bot.send_message(msg.chat.id, "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(sent, process_calculator_step)

def process_calculator_step(msg):
    try:
        cost = float(msg.text.replace(',', '.'))
        send_message_with_partner_button(msg.chat.id, calculate_and_format_profit(cost), reply_markup=get_main_keyboard())
    except ValueError:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.5 –∏–ª–∏ 5).", reply_markup=get_main_keyboard())

@bot.message_handler(commands=['news'])
@bot.message_handler(func=lambda message: message.text.lower() == 'üì∞ –Ω–æ–≤–æ—Å—Ç–∏')
def handle_news(msg): bot.send_chat_action(msg.chat.id, 'typing'); send_message_with_partner_button(msg.chat.id, get_crypto_news())

@bot.message_handler(commands=['fear', 'fng'])
@bot.message_handler(func=lambda message: message.text.lower() == 'üò± –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞')
def handle_fear_and_greed(msg): bot.send_message(msg.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–µ–∫—Å–∞..."); image, text = get_fear_and_greed_index(); send_photo_with_partner_button(msg.chat.id, image, text) if image else send_message_with_partner_button(msg.chat.id, text)

@bot.message_handler(commands=['halving'])
@bot.message_handler(func=lambda message: message.text.lower() == '‚è≥ —Ö–∞–ª–≤–∏–Ω–≥')
def handle_halving(msg): send_message_with_partner_button(msg.chat.id, get_halving_info())

@bot.message_handler(commands=['gas'])
def handle_gas(msg): send_message_with_partner_button(msg.chat.id, get_eth_gas_price())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ (–∏–≥—Ä–∞) ---
@bot.message_handler(commands=['my_rig'])
def handle_my_rig(msg): send_message_with_partner_button(msg.chat.id, game.get_rig_info(msg.from_user.id, msg.from_user.first_name))

@bot.message_handler(commands=['collect'])
def handle_collect(msg): send_message_with_partner_button(msg.chat.id, game.collect_reward(msg.from_user.id))

@bot.message_handler(commands=['upgrade_rig'])
def handle_upgrade_rig(msg): send_message_with_partner_button(msg.chat.id, game.upgrade_rig(msg.from_user.id))

@bot.message_handler(commands=['top_miners'])
@bot.message_handler(func=lambda message: message.text.lower() == 'üèÜ —Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤')
def handle_top_miners(msg): send_message_with_partner_button(msg.chat.id, game.get_top_miners())

@bot.message_handler(commands=['shop'])
@bot.message_handler(func=lambda message: message.text.lower() == 'üõçÔ∏è –º–∞–≥–∞–∑–∏–Ω')
def handle_shop(msg): send_message_with_partner_button(msg.chat.id, "üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π</b>\n\n<b>1. –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±—É—Å—Ç (x2)</b>\n<i>–£–¥–≤–∞–∏–≤–∞–µ—Ç –¥–æ–±—ã—á—É –Ω–∞ 24 —á–∞—Å–∞.</i>\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{BOOST_COST}</code> BTC\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏: <code>/buy_boost</code>")

@bot.message_handler(commands=['buy_boost'])
def handle_buy_boost(msg): send_message_with_partner_button(msg.chat.id, game.buy_boost(msg.from_user.id))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è) ---
@bot.message_handler(commands=['word'])
@bot.message_handler(func=lambda message: message.text.lower() == 'üéì —Å–ª–æ–≤–æ –¥–Ω—è')
def handle_word_of_the_day(msg):
    term = random.choice(CRYPTO_TERMS)
    explanation = ask_gpt(f"–û–±—ä—è—Å–Ω–∏ —Ç–µ—Ä–º–∏–Ω '{term}' –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).", "gpt-4o-mini")
    send_message_with_partner_button(msg.chat.id, f"üéì <b>–°–ª–æ–≤–æ –¥–Ω—è: {term}</b>\n\n{explanation}")

@bot.message_handler(commands=['quiz'])
@bot.message_handler(func=lambda message: message.text.lower() == 'üß† –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞')
def handle_quiz(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã...")
    questions = get_new_quiz_questions()
    if not questions: return bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
    
    user_quiz_states[msg.from_user.id] = {'score': 0, 'question_index': 0, 'questions': questions}
    bot.send_message(msg.chat.id, f"üî• <b>–ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∏–ø—Ç–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b>\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=types.ReplyKeyboardRemove())
    send_quiz_question(msg.chat.id, msg.from_user.id)

def send_quiz_question(chat_id, user_id):
    state = user_quiz_states.get(user_id)
    if not state: return
    q_index = state['question_index']
    
    if q_index >= len(state['questions']):
        score = state['score']
        reward_text = game.apply_quiz_reward(user_id) if score >= QUIZ_MIN_CORRECT_FOR_REWARD else ""
        bot.send_message(chat_id, f"üéâ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score} –∏–∑ {len(state['questions'])}</b>.{reward_text}", reply_markup=get_main_keyboard())
        user_quiz_states.pop(user_id, None)
        return
        
    q_data = state['questions'][q_index]
    markup = types.InlineKeyboardMarkup(row_width=2).add(*[types.InlineKeyboardButton(opt, callback_data=f"quiz_{q_index}_{i}") for i, opt in enumerate(q_data['options'])])
    bot.send_message(chat_id, f"<b>–í–æ–ø—Ä–æ—Å {q_index + 1}:</b>\n{q_data['question']}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('quiz_'))
def handle_quiz_answer(call):
    user_id = call.from_user.id
    state = user_quiz_states.get(user_id)
    if not state: return bot.answer_callback_query(call.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
    
    try: _, q_index_str, answer_index_str = call.data.split('_'); q_index, answer_index = int(q_index_str), int(answer_index_str)
    except (ValueError, IndexError): return bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")

    if q_index != state.get('question_index'): return bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏.")
    
    q_data = state['questions'][q_index]
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    
    if answer_index == q_data['correct_index']:
        state['score'] += 1; bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(call.message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{q_data['options'][q_data['correct_index']]}</b>")
    
    state['question_index'] += 1
    time.sleep(1.5)
    send_quiz_question(call.message.chat.id, user_id)
    bot.answer_callback_query(call.id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(content_types=['text'])
def handle_other_text(msg):
    try:
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
        text_lower = msg.text.lower()
        sale_words = ["–ø—Ä–æ–¥–∞–º", "–∫—É–ø–∏—Ç—å", "–≤ –Ω–∞–ª–∏—á–∏–∏"]
        item_words = ["asic", "–∞—Å–∏–∫", "whatsminer", "antminer"]
        if any(w in text_lower for w in sale_words) and any(w in text_lower for w in item_words):
            log_to_sheet([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), msg.from_user.username or "N/A", msg.text])
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∏ –¥–∏–∞–ª–æ–≥. –¢–µ–∫—Å—Ç: '{msg.text}'"
            response = ask_gpt(prompt)
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT
            bot.send_chat_action(msg.chat.id, 'typing')
            response = ask_gpt(msg.text)
        
        send_message_with_partner_button(msg.chat.id, response)

    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_other_text!", exc_info=e)
        bot.send_message(msg.chat.id, "üòµ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è!")

# ========================================================================================
# 6. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return '', 200
    return 'Forbidden', 403

@app.route("/")
def index(): return "Bot is running!"

def run_scheduler():
    if WEBHOOK_URL: schedule.every(25).minutes.do(lambda: requests.get(WEBHOOK_URL.rsplit('/', 1)[0]))
    schedule.every(4).hours.do(auto_send_news)
    schedule.every(6).hours.do(auto_check_status)
    schedule.every(1).hours.do(get_top_asics, force_update=True)
    schedule.every(5).minutes.do(game.save_data) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
    
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    
    while True:
        try: schedule.run_pending(); time.sleep(1)
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}", exc_info=True)

def auto_send_news():
    if NEWS_CHAT_ID: logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é..."); send_message_with_partner_button(NEWS_CHAT_ID, get_crypto_news())

def auto_check_status():
    if not ADMIN_CHAT_ID: return
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º...")
    errors = []
    if get_crypto_price("BTC")[0] is None: errors.append("API —Ü–µ–Ω—ã")
    if openai_client and "[‚ùå" in ask_gpt("–¢–µ—Å—Ç"): errors.append("API OpenAI")
    if GOOGLE_JSON_STR and not get_gsheet(): errors.append("Google Sheets")
    status = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ." if not errors else f"‚ö†Ô∏è –°–±–æ–π –≤: {', '.join(errors)}"
    try: bot.send_message(ADMIN_CHAT_ID, f"<b>–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ({datetime.now().strftime('%H:%M')})</b>\n{status}")
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    
    if WEBHOOK_URL:
        logger.info("–†–µ–∂–∏–º: –≤–µ–±—Ö—É–∫.")
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=f"{WEBHOOK_URL.rstrip('/')}/webhook")
        app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))
    else:
        logger.info("–†–µ–∂–∏–º: long-polling.")
        bot.remove_webhook()
        bot.polling(none_stop=Tr
