import os
import logging
import asyncio
import httpx # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
from cachetools import cached, TTLCache # –î–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º
from aiogram.client.default import DefaultBotProperties # *** –ù–û–í–´–ô –ò–ú–ü–û–†–¢ ***

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ---
# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
# –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –µ–≥–æ –≤ –∫–æ–¥–µ.
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è `BOT_TOKEN`
# –ù–∞–ø—Ä–∏–º–µ—Ä: export BOT_TOKEN='–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê'
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
    exit("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# MemoryStorage –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –±–æ—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ RedisStorage –∏–ª–∏ –¥—Ä—É–≥—É—é –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –°–£–ë–î.
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# *** –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BOT ***
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è "–¢–æ–ø ASIC" ---
# asic_cache - —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä TTLCache, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
# maxsize=100: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à–µ.
# ttl=3600: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å).
# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—à–µ–Ω—ã.
asic_cache = TTLCache(maxsize=100, ttl=3600)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
# ReplyKeyboardMarkup - —ç—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.
# –û–Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –∫–∞–∫ –Ω–∞ –≤–∞—à–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ.
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üí∞ –ö—É—Ä—Å"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫—É—Ä—Å–∞
            KeyboardButton(text="‚öôÔ∏è –¢–æ–ø ASIC"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è ASIC
        ],
        [
            KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            KeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
        ],
        [
            KeyboardButton(text="üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞
            KeyboardButton(text="‚è≥ –•–∞–ª–≤–∏–Ω–≥"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞
        ],
        [
            KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –í–¢–°"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ BTC
            KeyboardButton(text="üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        ],
        [
            KeyboardButton(text="üóìÔ∏è –°–ª–æ–≤–æ –¥–Ω—è"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å–ª–æ–≤–∞ –¥–Ω—è
            KeyboardButton(text="‚õèÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥"), # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞
        ],
    ],
    resize_keyboard=True, # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é...", # –¢–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(F.text == "/start")
async def command_start_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    )

@dp.message(F.text == "üí∞ –ö—É—Ä—Å")
async def show_rates(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å".
    –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ö—É—Ä—Å.")
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
    try:
        # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ BTC/USD
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ API, –Ω–∞–ø—Ä–∏–º–µ—Ä, CoinGecko.
        async with httpx.AsyncClient() as client:
            # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É API CoinGecko –¥–ª—è —Ü–µ–Ω—ã Bitcoin
            response = await client.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd")
            response.raise_for_status() # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ HTTP (4xx/5xx)
            data = response.json()
            btc_price = data.get('bitcoin', {}).get('usd', 'N/A')

        await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å Bitcoin (BTC): <b>{btc_price}$</b>\n"
                             "<i>(–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã CoinGecko)</i>")
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É—Ä—Å–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤.")


@dp.message(F.text == "‚öôÔ∏è –¢–æ–ø ASIC")
@cached(cache=asic_cache, key=lambda: 'top_asics') # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @cached —Å –Ω–∞—à–∏–º asic_cache
async def get_top_asics(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø ASIC".
    –§—É–Ω–∫—Ü–∏—è –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 1 —á–∞—Å (ttl=3600), —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¢–æ–ø ASIC.")
    await message.answer("–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–æ–≤—ã—Ö ASIC –º–∞–π–Ω–µ—Ä–∞—Ö...")
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø ASIC –º–∞–π–Ω–µ—Ä–∞—Ö.
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É API.
        # –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞.
        top_asics_data = (
            "<b>–¢–æ–ø ASIC –º–∞–π–Ω–µ—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):</b>\n"
            "1. Bitmain Antminer S19 Pro (110 TH/s)\n"
            "2. Whatsminer M30S++ (112 TH/s)\n"
            "3. Canaan AvalonMiner 1246 (90 TH/s)\n"
            "\n<i>(–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏, –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º.)</i>"
        )
        await message.answer(top_asics_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¢–æ–ø ASIC: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø ASIC –º–∞–π–Ω–µ—Ä–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def show_calculator(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä".
    –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.")
    await message.answer(
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä '2+2' –∏–ª–∏ '10*5'.\n"
        "<i>(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.)</i>"
    )

    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è FSM (Finite State Machine),
    # —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∂–¥–∞—Ç—å –æ—Ç –Ω–µ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.
    # –°–µ–π—á–∞—Å –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞.


@dp.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def show_news(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–æ—Å—Ç–∏".
    –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ù–æ–≤–æ—Å—Ç–∏.")
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞...")
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π API.
        news_articles = [
            "<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ 1:</b> Ethereum –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ PoS, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤?",
            "<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ 2:</b> Bitcoin –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞!",
            "<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ 3:</b> –ù–æ–≤—ã–µ —Ä–µ–≥—É–ª—è—Ü–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ DeFi.",
        ]
        response_text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(news_articles)
        await message.answer(response_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞")
async def show_fear_index(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞".
    –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞.")
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏...")
    try:
        # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –±—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å
        # API, –Ω–∞–ø—Ä–∏–º–µ—Ä, Crypto Fear & Greed Index API.
        fear_index_value = "55 (–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ)"
        fear_index_description = (
            f"–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: <b>{fear_index_value}</b>.\n"
            "<i>(–ò–Ω–¥–µ–∫—Å –∏–∑–º–µ—Ä—è–µ—Ç –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. "
            "0-24: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö, 25-49: –°—Ç—Ä–∞—Ö, 50-74: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ, 75-100: –ñ–∞–¥–Ω–æ—Å—Ç—å.)</i>"
        )
        await message.answer(fear_index_description)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ò–Ω–¥–µ–∫—Å–∞ –°—Ç—Ä–∞—Ö–∞: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "‚è≥ –•–∞–ª–≤–∏–Ω–≥")
async def show_halving_info(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–•–∞–ª–≤–∏–Ω–≥".
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ Bitcoin.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –•–∞–ª–≤–∏–Ω–≥.")
    await message.answer("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–ª–≤–∏–Ω–≥–µ Bitcoin...")
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ.
        # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã —Ö–∞–ª–≤–∏–Ω–≥–∞.
        halving_info = (
            "<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–∞–ª–≤–∏–Ω–≥ Bitcoin?</b>\n"
            "–•–∞–ª–≤–∏–Ω–≥ ‚Äî —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ —á–µ—Ç—ã—Ä–µ –≥–æ–¥–∞ "
            "–∏–ª–∏ –ø–æ—Å–ª–µ –¥–æ–±—ã—á–∏ –∫–∞–∂–¥—ã—Ö 210 000 –±–ª–æ–∫–æ–≤. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ö–∞–ª–≤–∏–Ω–≥–∞ "
            "–Ω–∞–≥—Ä–∞–¥–∞ –º–∞–π–Ω–µ—Ä–∞–º –∑–∞ –¥–æ–±—ã—á—É –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –≤–¥–≤–æ–µ.\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–∞–ª–≤–∏–Ω–≥ –ø—Ä–æ–∏–∑–æ—à–µ–ª –≤ –º–∞–µ 2024 –≥–æ–¥–∞, —Å–æ–∫—Ä–∞—Ç–∏–≤ –Ω–∞–≥—Ä–∞–¥—É –¥–æ 3.125 BTC.\n"
            "–°–ª–µ–¥—É—é—â–∏–π —Ö–∞–ª–≤–∏–Ω–≥ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ <b>2028 –≥–æ–¥—É</b>."
        )
        await message.answer(halving_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –•–∞–ª–≤–∏–Ω–≥–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ.")


@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å –í–¢–°")
async def show_btc_status(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å –í–¢–°".
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ç–∏ Bitcoin.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –°—Ç–∞—Ç—É—Å –í–¢–°.")
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin...")
    try:
        # –ó–∞–≥–ª—É—à–∫–∞. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –±—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å API
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, Blockchair, Blockchain.com)
        btc_status_info = (
            "<b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):</b>\n"
            "–¢–µ–∫—É—â–∏–π –±–ª–æ–∫: <b>850,123</b>\n"
            "–•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏: <b>~550 EH/s</b>\n"
            "–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞: <b>~10 –º–∏–Ω—É—Ç</b>\n"
            "–°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>~100.2 T</b>\n"
            "\n<i>(–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏. –î–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—è–º –±–ª–æ–∫–æ–≤.)</i>"
        )
        await message.answer(btc_status_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –°—Ç–∞—Ç—É—Å–∞ –í–¢–°: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def start_quiz(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞".
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FSM).
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –í–∏–∫—Ç–æ—Ä–∏–Ω—É.")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å. "
        "–ö–∞–∫–æ–π –≥–æ–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–æ–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏—è Bitcoin?"
    )
    # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –∑–¥–µ—Å—å –≤—ã –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç.
    # –ù–∞–ø—Ä–∏–º–µ—Ä: await state.set_state(QuizStates.waiting_for_answer)


@dp.message(F.text == "üóìÔ∏è –°–ª–æ–≤–æ –¥–Ω—è")
async def get_word_of_the_day(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ª–æ–≤–æ –¥–Ω—è".
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫—Ä–∏–ø—Ç–æ-—Å–ª–æ–≤–æ –∏ –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –°–ª–æ–≤–æ –¥–Ω—è.")
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–æ–≤–æ –¥–Ω—è...")
    try:
        # –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ.
        words_of_the_day = {
            "HODL": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –∫—Ä–∏–ø—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –æ–∑–Ω–∞—á–∞—é—â–∞—è '–¥–µ—Ä–∂–∞—Ç—å' "
                    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –Ω–µ –ø—Ä–æ–¥–∞–≤–∞—è –µ–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω.",
            "DeFi": "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç '–¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã' ‚Äî —ç—Ç–æ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ "
                    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ.",
            "NFT": "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç '–Ω–µ–≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã–π —Ç–æ–∫–µ–Ω' ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π "
                   "–∞–∫—Ç–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π —á—Ç–æ —É–≥–æ–¥–Ω–æ, "
                   "–æ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–∞ –¥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤."
        }
        import random
        word, definition = random.choice(list(words_of_the_day.items()))
        await message.answer(f"<b>–°–ª–æ–≤–æ –¥–Ω—è: {word}</b>\n\n{definition}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –°–ª–æ–≤–∞ –¥–Ω—è: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "‚õèÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥")
async def start_virtual_mining(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥".
    –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–≥—Ä—ã –∏–ª–∏ —Å–∏–º—É–ª—è—Ü–∏–∏.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥.")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞! "
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ —Ä–æ–ª–∏ –º–∞–π–Ω–µ—Ä–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. "
        "<i>(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!)</i>"
    )

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


