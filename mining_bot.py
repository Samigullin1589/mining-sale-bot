import os
import time
import openai
import telebot
import requests
import threading
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CRYPTO_NEWS_URL = "https://cryptopanic.com/api/v1/posts/?auth_token=demo&public=true&currencies=BTC"
LEAD_LINK = "https://app.leadteh.ru/w/dTeKr"
POST_INTERVAL = 10800  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# === –°–ü–ò–°–û–ö –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í ===
KEYWORDS = ["–≥–¥–µ –∫—É–ø–∏—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–¥–æ—Å—Ç–∞–≤–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "—Ü–µ–Ω—ã"]

# === –§–£–ù–ö–¶–ò–Ø: –ó–ê–ü–†–û–° –ö OPENAI ===
def ask_gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."

# === –§–£–ù–ö–¶–ò–Ø: –ü–û–õ–£–ß–ò–¢–¨ –ù–û–í–û–°–¢–ò –° CRYPTOPANIC ===
def fetch_news():
    try:
        response = requests.get(CRYPTO_NEWS_URL)
        data = response.json()
        headlines = [post['title'] for post in data.get('results', [])[:5]]
        return "\n".join(f"‚Ä¢ {h}" for h in headlines)
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."

# === –§–£–ù–ö–¶–ò–Ø: –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ù–û–í–û–°–¢–ï–ô ===
def post_news():
    while True:
        news = fetch_news()
        now = datetime.now().strftime("%H:%M")
        message = f"üì∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É* ({now}):\n\n{news}\n\nüîó [–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ]({LEAD_LINK})"
        try:
            bot.send_message(chat_id="@–í–ê–®_–ß–ê–¢", text=message, parse_mode="Markdown")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏:", e)
        time.sleep(POST_INTERVAL)

# === –§–£–ù–ö–¶–ò–Ø: –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.lower()
    if any(keyword in text for keyword in KEYWORDS):
        bot.reply_to(message, f"üõ† –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–∫—É–ø–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –Ω–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä: [–°–≤—è–∑–∞—Ç—å—Å—è]({LEAD_LINK})", parse_mode="Markdown")
    else:
        reply = ask_gpt(message.text)
        bot.reply_to(message, reply)

# === –ó–ê–ü–£–°–ö ===
threading.Thread(target=post_news).start()
bot.infinity_polling()
