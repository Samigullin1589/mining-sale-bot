# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ========================================================================================
import os
import telebot
import requests
import time
import threading
import schedule
import json
import html
from flask import Flask, request
import gspread
from google.oauth2.service_account import Credentials
from telebot import types
from openai import OpenAI
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
import re
import random
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
    datefmt='%d/%b/%Y %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- –ö–ª—é—á–∏ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) ---
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ API –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
NEWSAPI_KEY = os.getenv("CRYPTO_API_KEY") # –ö–ª—é—á –¥–ª—è CryptoPanic
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY", "YourApiKeyToken")
NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GOOGLE_JSON_STR = os.getenv("GOOGLE_JSON")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")
DATA_FILE = "user_data.json" # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ ---
if not BOT_TOKEN:
    logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
PARTNER_URL = "https://app.leadteh.ru/w/dTeKr"
PARTNER_BUTTON_TEXT_OPTIONS = ["üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"]
BOT_HINTS = [
    "üí° –£–∑–Ω–∞–π—Ç–µ –∫—É—Ä—Å –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π `/price`", "‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–º—ã–µ –¥–æ—Ö–æ–¥–Ω—ã–µ ASIC",
    "‚õèÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –ø–æ–º–æ—â—å—é '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'", "üì∞ –•–æ—Ç–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏?",
    "ü§ë –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ—é —Ñ–µ—Ä–º—É –∫–æ–º–∞–Ω–¥–æ–π `/upgrade_rig`", "üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏",
    "üèÜ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å–µ–±—è —Å –ª—É—á—à–∏–º–∏ –≤ `/top_miners`", "üéì –ß—Ç–æ —Ç–∞–∫–æ–µ 'HODL'? –£–∑–Ω–∞–π—Ç–µ: `/word`",
    "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ `/quiz`", "üõçÔ∏è –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π: `/shop`"
]
HALVING_INTERVAL = 210000

# --- –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CRYPTO_TERMS = ["–ë–ª–æ–∫—á–µ–π–Ω", "–ì–∞–∑ (Gas)", "–•–∞–ª–≤–∏–Ω–≥", "ICO", "DeFi", "NFT", "–°–∞—Ç–æ—à–∏", "–ö–∏—Ç (Whale)", "HODL", "DEX", "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"]
# –°—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Å–µ—Ç–∏
MINING_RATES = {1: 0.0001, 2: 0.0002, 3: 0.0004, 4: 0.0008, 5: 0.0016}
UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1}
STREAK_BONUS_MULTIPLIER = 0.05
BOOST_COST = 0.0005
BOOST_DURATION_HOURS = 24
QUIZ_REWARD = 0.0001
QUIZ_MIN_CORRECT_FOR_REWARD = 3
QUIZ_QUESTIONS_COUNT = 5 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ

# --- –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π Telebot ---
class ExceptionHandler(telebot.ExceptionHandler):
    def handle(self, exception):
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ pyTelegramBotAPI:", exc_info=exception)
        return True

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
try:
    bot = telebot.TeleBot(BOT_TOKEN, threaded=False, parse_mode='HTML', exception_handler=ExceptionHandler())
    app = Flask(__name__)
    openai_client = OpenAI(api_key=OPENAI_API_KEY)
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ API: {e}")
    raise

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_states = {} # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä")
asic_cache = {"data": [], "timestamp": None}
user_rigs = {} # –î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–≤—ã—Ö —Ñ–µ—Ä–º–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
currency_cache = {"rate": None, "timestamp": None}

# ========================================================================================
# 2. –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ========================================================================================
def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ñ–µ—Ä–º—ã) –≤ JSON —Ñ–∞–π–ª."""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        data_to_save = {}
        for user_id, rig_data in user_rigs.items():
            # —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            copied_data = rig_data.copy()
            for key, value in copied_data.items():
                if isinstance(value, datetime):
                    copied_data[key] = value.isoformat()
            data_to_save[user_id] = copied_data

        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, indent=4, ensure_ascii=False)
        logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    global user_rigs
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                loaded_data = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
                for user_id, rig_data in loaded_data.items():
                    for key, value in rig_data.items():
                        if isinstance(value, str) and re.match(r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}', value):
                            rig_data[key] = datetime.fromisoformat(value)
                    user_rigs[int(user_id)] = rig_data
            logger.info(f"–î–∞–Ω–Ω—ã–µ {len(user_rigs)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.warning(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π. –û—à–∏–±–∫–∞: {e}")
        user_rigs = {}
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


# ========================================================================================
# 3. –†–ê–ë–û–¢–ê –° –í–ù–ï–®–ù–ò–ú–ò –°–ï–†–í–ò–°–ê–ú–ò (API)
# ========================================================================================
def get_gsheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞."""
    try:
        creds_dict = json.loads(GOOGLE_JSON_STR)
        creds = Credentials.from_service_account_info(creds_dict, scopes=['https://www.googleapis.com/auth/spreadsheets'])
        return gspread.authorize(creds).open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None

def log_to_sheet(row_data: list):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets."""
    try:
        sheet = get_gsheet()
        if sheet:
            sheet.append_row(row_data, value_input_option='USER_ENTERED')
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

def ask_gpt(prompt: str, model: str = "gpt-4o"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    try:
        res = openai_client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è HTML-—Ç–µ–≥–∏: <b>, <i>, <code>, <pre>."},
                {"role": "user", "content": prompt}
            ],
            timeout=20.0)
        return res.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {e}")
        return "[‚ùå –û—à–∏–±–∫–∞ GPT: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.]"

def get_crypto_price(ticker="BTC"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏—Ä–∂ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏."""
    ticker = ticker.upper()
    sources = [
        f"https://api.binance.com/api/v3/ticker/price?symbol={ticker}USDT",
        f"https://api.kucoin.com/api/v1/market/orderbook/level1?symbol={ticker}-USDT",
    ]
    for i, url in enumerate(sources):
        try:
            res = requests.get(url, timeout=4).json()
            if i == 0 and 'price' in res: return (float(res['price']), "Binance")
            if i == 1 and res.get('data', {}).get('price'): return (float(res['data']['price']), "KuCoin")
        except Exception:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker} —Å URL: {url}")
            continue
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker} —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
    return (None, None)

def get_top_asics(force_update: bool = False):
    """–ü–∞—Ä—Å–∏—Ç —Å–∞–π—Ç asicminervalue.com –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-5 –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC."""
    global asic_cache
    if not force_update and asic_cache.get("data") and (datetime.now() - asic_cache.get("timestamp", datetime.min) < timedelta(hours=1)):
        return asic_cache.get("data")
    try:
        r = requests.get("https://www.asicminervalue.com", timeout=15)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "lxml")
        parsed_asics = []
        sha256_header = soup.find('h2', id='sha-256')
        if not sha256_header: raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'sha-256' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        sha256_table = sha256_header.find_next('table')
        if not sha256_table: raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ 'sha-256'.")

        for row in sha256_table.select("tbody tr"):
            cols = row.find_all("td")
            if len(cols) < 5: continue
            name_tag = cols[1].find('a')
            if not name_tag: continue
            name = name_tag.get_text(strip=True)
            hashrate_str = cols[2].get_text(strip=True)
            power_str = cols[3].get_text(strip=True)
            revenue_str = cols[4].get_text(strip=True)
            power_watts_match = re.search(r'([\d,]+)', power_str)
            daily_revenue_match = re.search(r'([\d\.]+)', revenue_str.replace('$', ''))

            if power_watts_match and daily_revenue_match:
                power_watts = float(power_watts_match.group(1).replace(',', ''))
                daily_revenue = float(daily_revenue_match.group(1))
                if power_watts > 0:
                    parsed_asics.append({'name': name, 'hashrate': hashrate_str, 'power_watts': power_watts, 'daily_revenue': daily_revenue})

        if not parsed_asics: raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ ASIC –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")

        parsed_asics.sort(key=lambda x: x['daily_revenue'], reverse=True)
        asic_cache = {"data": parsed_asics[:5], "timestamp": datetime.now()}
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(asic_cache['data'])} ASIC.")
        return asic_cache["data"]
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC: {e}", exc_info=True)
        return []

def get_fear_and_greed_index():
    """–ü–æ–ª—É—á–∞–µ—Ç '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' –∏ —Å–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    try:
        data = requests.get("https://api.alternative.me/fng/?limit=1", timeout=5).json()['data'][0]
        value, classification = int(data['value']), data['value_classification']
        
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(8, 4.5), subplot_kw={'projection': 'polar'})
        ax.set_yticklabels([]); ax.set_xticklabels([]); ax.grid(False)
        ax.spines['polar'].set_visible(False); ax.set_ylim(0, 1)
        
        colors = ['#d94b4b', '#e88452', '#ece36a', '#b7d968', '#73c269'] # –û—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –∫ –∑–µ–ª–µ–Ω–æ–º—É
        for i in range(100):
            ax.barh(1, 0.0314, left=3.14 - (i * 0.0314), height=0.3, color=colors[min(len(colors) - 1, int(i / 25))])
        
        angle = 3.14 - (value * 0.0314)
        ax.annotate('', xy=(angle, 1), xytext=(0, 0), arrowprops=dict(facecolor='white', shrink=0.05, width=4, headwidth=10))
        fig.text(0.5, 0.5, f"{value}", ha='center', va='center', fontsize=48, color='white', weight='bold')
        fig.text(0.5, 0.35, classification, ha='center', va='center', fontsize=20, color='white')
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, transparent=True)
        buf.seek(0)
        plt.close(fig)
        
        prompt = f"–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –¥–ª—è –º–∞–π–Ω–µ—Ä–∞, –∫–∞–∫ '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{value} ({classification})' –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        explanation = ask_gpt(prompt)
        text = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>\n\n{explanation}"
        return buf, text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}", exc_info=True)
        return None, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]"

def get_usd_rub_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å USD/RUB —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    global currency_cache
    if currency_cache.get("rate") and (datetime.now() - currency_cache.get("timestamp", datetime.min) < timedelta(minutes=30)):
        return currency_cache["rate"]
    sources = ["https://api.exchangerate.host/latest?base=USD&symbols=RUB", "https://api.exchangerate-api.com/v4/latest/USD"]
    for url in sources:
        try:
            response = requests.get(url, timeout=4); response.raise_for_status()
            rate = response.json().get('rates', {}).get('RUB')
            if rate:
                currency_cache = {"rate": rate, "timestamp": datetime.now()}
                return rate
        except Exception: continue
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/RUB.")
    return None

def get_halving_info():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin."""
    try:
        current_block = int(requests.get("https://blockchain.info/q/getblockcount", timeout=5).text)
        current_epoch = current_block // HALVING_INTERVAL
        next_halving_block = (current_epoch + 1) * HALVING_INTERVAL
        blocks_left = next_halving_block - current_block
        if blocks_left <= 0: return f"üéâ <b>–•–∞–ª–≤–∏–Ω–≥ –Ω–∞ –±–ª–æ–∫–µ {next_halving_block - HALVING_INTERVAL} —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª!</b>"
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∞ ~10 –º–∏–Ω—É—Ç
        minutes_left = blocks_left * 10
        days_left = minutes_left // (24 * 60)
        hours_left = (minutes_left % (24*60)) // 60
        
        return f"‚è≥ <b>–î–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\nüóì <b>–î–Ω–µ–π:</b> <code>{days_left}</code> | ‚è∞ <b>–ß–∞—Å–æ–≤:</b> <code>{hours_left}</code>\nüß± <b>–ë–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞:</b> <code>{blocks_left:,}</code>"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞: {e}")
        return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ]"

def get_crypto_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å CryptoPanic –∏ –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é GPT."""
    try:
        params = {"auth_token": NEWSAPI_KEY, "public": "true", "currencies": "BTC,ETH"}
        posts = requests.get("https://cryptopanic.com/api/v1/posts/", params=params, timeout=10).json().get("results", [])[:3]
        if not posts: return "[üßê –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]"
        
        items = []
        for post in posts:
            summary = ask_gpt(f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ): '{post['title']}'", 'gpt-3.5-turbo')
            if '[‚ùå' in summary: summary = telebot.util.escape(post['title'])
            items.append(f'üîπ <a href="{post.get("url", "")}">{summary}</a>')
            
        return "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(items)
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return "[‚ùå –û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π]"

def get_eth_gas_price():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –≥–∞–∑ –≤ —Å–µ—Ç–∏ Ethereum."""
    try:
        res = requests.get(f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}", timeout=5).json()
        if res.get("status") == "1" and res.get("result"):
            gas = res["result"]
            return (f"‚õΩÔ∏è <b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ (Gwei):</b>\n\n"
                    f"üê¢ <b>–ú–µ–¥–ª–µ–Ω–Ω–æ:</b> <code>{gas['SafeGasPrice']}</code>\n"
                    f"üö∂‚Äç‚ôÇÔ∏è <b>–°—Ä–µ–¥–Ω–µ:</b> <code>{gas['ProposeGasPrice']}</code>\n"
                    f"üöÄ <b>–ë—ã—Å—Ç—Ä–æ:</b> <code>{gas['FastGasPrice']}</code>")
        return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ]"
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑: {e}")
        return "[‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑]"

def get_new_quiz_questions():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ Open Trivia Database."""
    try:
        url = f"https://opentdb.com/api.php?amount={QUIZ_QUESTIONS_COUNT}&type=multiple&category=18" # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ö–æ–º–ø—å—é—Ç–µ—Ä—ã
        response = requests.get(url, timeout=7).json()
        if response.get("response_code") != 0:
            logger.error(f"API –≤–∏–∫—Ç–æ—Ä–∏–Ω –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: {response}")
            return None
        
        formatted_questions = []
        for item in response.get("results", []):
            question_text = html.unescape(item['question'])
            correct_answer = html.unescape(item['correct_answer'])
            options = [html.unescape(o) for o in item['incorrect_answers']]
            options.append(correct_answer)
            random.shuffle(options)
            correct_index = options.index(correct_answer)
            
            formatted_questions.append({
                "question": question_text,
                "options": options,
                "correct_index": correct_index
            })
        return formatted_questions
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        return None

# ========================================================================================
# 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
# ========================================================================================
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["üíπ –ö—É—Ä—Å", "‚öôÔ∏è –¢–æ–ø-5 ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏",
               "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üéì –°–ª–æ–≤–æ –¥–Ω—è",
               "üèÜ –¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤", "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω"]
    markup.add(*[types.KeyboardButton(text) for text in buttons])
    return markup

def send_message_with_partner_button(chat_id, text, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π."""
    try:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
        bot.send_message(chat_id, f"{text}\n\n---\n<i>{random.choice(BOT_HINTS)}</i>", reply_markup=markup, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

def send_photo_with_partner_button(chat_id, photo, caption, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∫–Ω–æ–ø–∫–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π."""
    try:
        if not photo: raise ValueError("–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –ø—É—Å—Ç–æ–π")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
        bot.send_photo(chat_id, photo, caption=f"{caption}\n\n---\n<i>{random.choice(BOT_HINTS)}</i>", reply_markup=markup)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–º.")
        send_message_with_partner_button(chat_id, caption)

def calculate_and_format_profit(electricity_cost_rub: float):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏—Ç –¥–ª—è —Ç–æ–ø-5 ASIC."""
    rate = get_usd_rub_rate()
    if not rate: return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    cost_usd = electricity_cost_rub / rate
    asics = get_top_asics()
    if not asics: return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞."
    
    result = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {electricity_cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>\n"]
    for asic in asics:
        cost = (asic['power_watts'] / 1000) * 24 * cost_usd
        profit = asic['daily_revenue'] - cost
        result.append(f"<b>{telebot.util.escape(asic['name'])}</b>\n  –ü—Ä–æ—Ñ–∏—Ç: <b>${profit:.2f}/–¥–µ–Ω—å</b> (–î–æ—Ö–æ–¥: ${asic['daily_revenue']:.2f}, –†–∞—Å—Ö–æ–¥: ${cost:.2f})")
    return "\n\n".join(result)

def set_user_state(user_id, state, text):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_states[user_id] = state
    bot.send_message(user_id, text, reply_markup=types.ReplyKeyboardRemove())

# ========================================================================================
# 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê
# ========================================================================================
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–æ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—è—Ö
def handle_start_help(msg):
    help_text = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
                 "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                 "<code>/price</code>, <code>/gas</code>, <code>/news</code>\n\n"
                 "<b>–£—Ç–∏–ª–∏—Ç—ã –∏ –∏–≥—Ä–∞:</b>\n"
                 "<code>/my_rig</code>, <code>/collect</code>, <code>/upgrade_rig</code>\n"
                 "<code>/shop</code>, <code>/top_miners</code>, <code>/quiz</code>, <code>/word</code>.")
    bot.send_message(msg.chat.id, help_text, reply_markup=get_main_keyboard())

def handle_price(msg):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."""
    set_user_state(msg.chat.id, 'price_request', "–ö—É—Ä—Å –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–Ω–∞–ø—Ä: BTC, ETH, SOL)")

def get_price_and_send(chat_id, ticker="BTC"):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."""
    price, source = get_crypto_price(ticker)
    if price:
        text = f"üíπ –ö—É—Ä—Å {ticker.upper()}/USD: <b>${price:,.2f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})</i>"
        send_message_with_partner_button(chat_id, text)
    else:
        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {ticker.upper()}."
        bot.send_message(chat_id, text, reply_markup=get_main_keyboard())

def handle_asics_text(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    asics = get_top_asics()
    if not asics:
        send_message_with_partner_button(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± ASIC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    header = "–ú–æ–¥–µ–ª—å                | H/s      | P, W | –î–æ—Ö–æ–¥/–¥–µ–Ω—å"
    divider = "----------------------|----------|------|-----------"
    rows = [f"{a['name']:<22.21}| {a['hashrate']:<9}| {a['power_watts']:<5.0f}| ${a['daily_revenue']:<10.2f}" for a in asics]
    response_text = f"<pre>{header}\n{divider}\n" + "\n".join(rows) + "</pre>"
    
    gpt_prompt = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç–∞. –ü–æ–¥—Ç–æ–ª–∫–Ω–∏ –∫ –º—ã—Å–ª–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
    response_text += f"\n\n{ask_gpt(gpt_prompt, 'gpt-4o')}"
    send_message_with_partner_button(msg.chat.id, response_text)

def handle_calculator(msg):
    set_user_state(msg.chat.id, 'calculator_request', "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:")

def handle_news(msg):
    bot.send_chat_action(msg.chat.id, 'typing')
    send_message_with_partner_button(msg.chat.id, get_crypto_news())

def handle_fear_and_greed(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–µ–∫—Å–∞...")
    image, text = get_fear_and_greed_index()
    if image:
        send_photo_with_partner_button(msg.chat.id, image, text)
    else:
        send_message_with_partner_button(msg.chat.id, text)

def handle_halving(msg):
    send_message_with_partner_button(msg.chat.id, get_halving_info())

def handle_my_rig(msg):
    user_id = msg.from_user.id
    response = ""
    if user_id not in user_rigs:
        user_rigs[user_id] = {'last_collected': None, 'balance': 0.0, 'level': 1, 'streak': 0, 'name': msg.from_user.first_name, 'boost_active_until': None}
        response = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ñ–µ—Ä–º—É!\n\n"
    
    rig = user_rigs[user_id]
    next_level = rig['level'] + 1
    upgrade_cost_text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è: <code>{UPGRADE_COSTS.get(next_level, 'N/A')}</code> BTC." if next_level in UPGRADE_COSTS else "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
    
    boost_status = ""
    if rig.get('boost_active_until') and datetime.now() < rig['boost_active_until']:
        time_left = rig['boost_active_until'] - datetime.now()
        h, rem = divmod(time_left.seconds, 3600)
        m, _ = divmod(rem, 60)
        boost_status = f"‚ö°Ô∏è <b>–ë—É—Å—Ç x2 –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ: {h}—á {m}–º</b>\n"

    response += (f"üñ•Ô∏è <b>–§–µ—Ä–º–∞ {telebot.util.escape(rig['name'])}</b>\n\n"
                 f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {rig['level']}\n"
                 f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{rig['balance']:.8f}</code> BTC\n"
                 f"<b>–î–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è:</b> {rig['streak']} üî• (–±–æ–Ω—É—Å <b>+{rig['streak'] * STREAK_BONUS_MULTIPLIER:.0%}</b>)\n"
                 f"{boost_status}\n"
                 f"{upgrade_cost_text}\n\n"
                 "<code>/collect</code>, <code>/upgrade_rig</code>, <code>/shop</code>")
    send_message_with_partner_button(msg.chat.id, response)
    save_user_data()

def handle_collect(msg):
    user_id = msg.from_user.id
    if user_id not in user_rigs: return send_message_with_partner_button(msg.chat.id, "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>.")
    
    rig = user_rigs[user_id]
    now = datetime.now()
    if rig.get('last_collected') and (now - rig['last_collected']) < timedelta(hours=24):
        time_left = timedelta(hours=24) - (now - rig['last_collected'])
        h, m = divmod(time_left.seconds, 3600)[0], divmod(time_left.seconds % 3600, 60)[0]
        return send_message_with_partner_button(msg.chat.id, f"–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ <b>{h}—á {m}–º</b>.")
    
    if rig.get('last_collected') and (now - rig['last_collected']) < timedelta(hours=48):
        rig['streak'] += 1
    else: rig['streak'] = 1
    
    base_mined = MINING_RATES.get(rig['level'], 0.0001)
    streak_bonus = base_mined * rig['streak'] * STREAK_BONUS_MULTIPLIER
    boost_multiplier = 2 if rig.get('boost_active_until') and now < rig['boost_active_until'] else 1
    total_mined = (base_mined + streak_bonus) * boost_multiplier
    
    rig['balance'] += total_mined
    rig['last_collected'] = now
    
    boost_text = " (x2 –ë—É—Å—Ç!)" if boost_multiplier > 1 else ""
    response = (f"‚úÖ –°–æ–±—Ä–∞–Ω–æ <b>{total_mined:.8f}</b> BTC{boost_text}!\n"
                f"  (–ë–∞–∑–∞: {base_mined:.8f} + –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: {streak_bonus:.8f})\n"
                f"üî• –í–∞—à–∞ —Å–µ—Ä–∏—è: <b>{rig['streak']} –¥–Ω–µ–π!</b>\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{rig['balance']:.8f}</code> BTC.")
    send_message_with_partner_button(msg.chat.id, response)
    save_user_data()

def handle_upgrade_rig(msg):
    user_id = msg.from_user.id
    if user_id not in user_rigs: return send_message_with_partner_button(msg.chat.id, "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>.")
    
    rig = user_rigs[user_id]
    next_level, cost = rig['level'] + 1, UPGRADE_COSTS.get(rig['level'] + 1)
    
    if not cost: return send_message_with_partner_button(msg.chat.id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã!")
    
    if rig['balance'] >= cost:
        rig['balance'] -= cost
        rig['level'] = next_level
        response = f"üöÄ <b>–£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n–í–∞—à–∞ —Ñ–µ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ <b>{next_level}</b> —É—Ä–æ–≤–Ω—è!"
        save_user_data()
    else:
        response = f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>\n\n–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–±—É–µ—Ç—Å—è <code>{cost}</code> BTC."
    send_message_with_partner_button(msg.chat.id, response)

def handle_top_miners(msg):
    if not user_rigs: return send_message_with_partner_button(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞.")
    
    sorted_rigs = sorted(user_rigs.values(), key=lambda r: r['balance'], reverse=True)
    response = ["üèÜ <b>–¢–æ–ø-5 –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ú–∞–π–Ω–µ—Ä–æ–≤:</b>\n"]
    for i, rig in enumerate(sorted_rigs[:5]):
        response.append(f"<b>{i+1}.</b> {telebot.util.escape(rig['name'])} - <code>{rig['balance']:.6f}</code> BTC (–£—Ä. {rig['level']})")
    send_message_with_partner_button(msg.chat.id, "\n".join(response))

def handle_shop(msg):
    text = (f"üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π</b>\n\n"
            f"<b>1. –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±—É—Å—Ç (x2)</b>\n"
            f"<i>–£–¥–≤–∞–∏–≤–∞–µ—Ç –≤—Å—é –≤–∞—à—É –¥–æ–±—ã—á—É –Ω–∞ 24 —á–∞—Å–∞.</i>\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{BOOST_COST}</code> BTC\n\n"
            f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/buy_boost</code>")
    send_message_with_partner_button(msg.chat.id, text)

def handle_buy_boost(msg):
    user_id = msg.from_user.id
    if user_id not in user_rigs: return send_message_with_partner_button(msg.chat.id, "ÔøΩ –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>.")
    
    rig = user_rigs[user_id]
    if rig.get('boost_active_until') and datetime.now() < rig['boost_active_until']:
        return send_message_with_partner_button(msg.chat.id, "–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –±—É—Å—Ç!")
        
    if rig['balance'] >= BOOST_COST:
        rig['balance'] -= BOOST_COST
        rig['boost_active_until'] = datetime.now() + timedelta(hours=BOOST_DURATION_HOURS)
        response = f"‚ö°Ô∏è <b>–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±—É—Å—Ç –∫—É–ø–ª–µ–Ω!</b>\n\n–í–∞—à–∞ –¥–æ–±—ã—á–∞ –±—É–¥–µ—Ç —É–¥–≤–æ–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 24 —á–∞—Å–æ–≤."
        save_user_data()
    else: response = f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>"
    send_message_with_partner_button(msg.chat.id, response)

def handle_word_of_the_day(msg):
    term = random.choice(CRYPTO_TERMS)
    prompt = f"–û–±—ä—è—Å–Ω–∏ —Ç–µ—Ä–º–∏–Ω '{term}' –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)."
    explanation = ask_gpt(prompt, "gpt-3.5-turbo")
    text = f"üéì <b>–°–ª–æ–≤–æ –¥–Ω—è: {term}</b>\n\n{explanation}"
    send_message_with_partner_button(msg.chat.id, text)

def handle_quiz(msg):
    user_id = msg.from_user.id
    bot.send_message(msg.chat.id, "‚è≥ –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã...")
    questions = get_new_quiz_questions()
    
    if not questions:
        bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
        return

    user_states[user_id] = {'quiz_active': True, 'score': 0, 'question_index': 0, 'questions': questions}
    bot.send_message(msg.chat.id, f"üî• <b>–ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∏–ø—Ç–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b>\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=types.ReplyKeyboardRemove())
    send_quiz_question(msg.chat.id, user_id)

def send_quiz_question(chat_id, user_id):
    state = user_states.get(user_id)
    if not state or not state.get('quiz_active'): return
    
    q_index, questions = state['question_index'], state['questions']
    
    if q_index >= len(questions):
        score = state['score']
        reward_text = ""
        if score >= QUIZ_MIN_CORRECT_FOR_REWARD:
            if user_id in user_rigs:
                user_rigs[user_id]['balance'] += QUIZ_REWARD
                reward_text = f"\n\nüéÅ –ó–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{QUIZ_REWARD:.4f} BTC!</b>"
                save_user_data()
            else:
                reward_text = f"\n\nüéÅ –í—ã –±—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{QUIZ_REWARD:.4f} BTC</b>, –µ—Å–ª–∏ –±—ã —É –≤–∞—Å –±—ã–ª–∞ —Ñ–µ—Ä–º–∞! –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>."
        
        bot.send_message(chat_id, f"üéâ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score} –∏–∑ {len(questions)}</b>.{reward_text}", reply_markup=get_main_keyboard())
        user_states.pop(user_id, None)
        return
        
    question_data = questions[q_index]
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(option, callback_data=f"quiz_{q_index}_{i}") for i, option in enumerate(question_data['options'])]
    markup.add(*buttons)
    bot.send_message(chat_id, f"<b>–í–æ–ø—Ä–æ—Å {q_index + 1}:</b>\n{question_data['question']}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('quiz_'))
def handle_quiz_answer(call):
    user_id = call.from_user.id
    state = user_states.get(user_id)
    if not state or not state.get('quiz_active'):
        bot.answer_callback_query(call.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        bot.edit_message_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", call.message.chat.id, call.message.message_id)
        return

    try:
        _, q_index_str, answer_index_str = call.data.split('_')
        q_index, answer_index = int(q_index_str), int(answer_index_str)
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ callback –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {call.data}")
        return bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")

    if q_index != state.get('question_index'):
        return bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
    
    question_data = state['questions'][q_index]
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    
    if answer_index == question_data['correct_index']:
        state['score'] += 1
        bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        correct_answer_text = question_data['options'][question_data['correct_index']]
        bot.send_message(call.message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer_text}</b>")
    
    state['question_index'] += 1
    time.sleep(1.5) # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    send_quiz_question(call.message.chat.id, user_id)
    bot.answer_callback_query(call.id)


# ========================================================================================
# 6. –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================================================
@bot.message_handler(content_types=['text'])
def handle_text_messages(msg):
    try:
        user_id = msg.from_user.id
        text_lower = msg.text.lower().strip()
        current_state = user_states.get(user_id)

        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∫–æ–≥–¥–∞ –±–æ—Ç –∂–¥–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        if current_state:
            state_action = None
            if current_state == 'price_request':
                state_action = lambda: get_price_and_send(user_id, msg.text)
            elif current_state == 'calculator_request':
                try:
                    cost = float(msg.text.replace(',', '.'))
                    state_action = lambda: send_message_with_partner_button(user_id, calculate_and_format_profit(cost))
                except ValueError:
                    bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.5 –∏–ª–∏ 5).", reply_markup=get_main_keyboard())
            
            if state_action:
                user_states.pop(user_id, None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state_action()
                return

        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (/start, /help, etc.)
        command_map = {
            "/start": handle_start_help, "/help": handle_start_help, "/price": handle_price,
            "/fear": handle_fear_and_greed, "/fng": handle_fear_and_greed,
            "/gas": lambda m: send_message_with_partner_button(m.chat.id, get_eth_gas_price()),
            "/my_rig": handle_my_rig, "/collect": handle_collect, "/upgrade_rig": handle_upgrade_rig,
            "/top_miners": handle_top_miners, "/shop": handle_shop, "/buy_boost": handle_buy_boost,
            "/word": handle_word_of_the_day, "/quiz": handle_quiz
        }
        text_command = msg.text.split()[0].lower()
        if text_command in command_map:
            command_map[text_command](msg)
            return

        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        button_map = {
            "üíπ –∫—É—Ä—Å": handle_price,
            "‚öôÔ∏è —Ç–æ–ø-5 asic": handle_asics_text,
            "‚õèÔ∏è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": handle_calculator,
            "üì∞ –Ω–æ–≤–æ—Å—Ç–∏": handle_news,
            "üò± –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞": handle_fear_and_greed,
            "‚è≥ —Ö–∞–ª–≤–∏–Ω–≥": handle_halving,
            "üß† –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞": handle_quiz,
            "üéì —Å–ª–æ–≤–æ –¥–Ω—è": handle_word_of_the_day,
            "üèÜ —Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤": handle_top_miners,
            "üõçÔ∏è –º–∞–≥–∞–∑–∏–Ω": handle_shop,
        }
        if text_lower in button_map:
            button_map[text_lower](msg)
            return

        # 4. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
        sale_words = ["–ø—Ä–æ–¥–∞–º", "–∫—É–ø–∏—Ç—å", "–≤ –Ω–∞–ª–∏—á–∏–∏"]
        item_words = ["asic", "–∞—Å–∏–∫", "whatsminer", "antminer"]
        if any(w in text_lower for w in sale_words) and any(w in text_lower for w in item_words):
            log_to_sheet([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), msg.from_user.username or "N/A", msg.text])
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∏ –¥–∏–∞–ª–æ–≥. –¢–µ–∫—Å—Ç: '{msg.text}'"
            response = ask_gpt(prompt)
        else:
            # 5. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT
            bot.send_chat_action(user_id, 'typing')
            response = ask_gpt(msg.text)
        
        send_message_with_partner_button(user_id, response)

    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_text_messages!", exc_info=e)
        bot.send_message(msg.chat.id, "üòµ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è!")


# ========================================================================================
# 7. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    try:
        if request.headers.get('content-type') == 'application/json':
            bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
            return '', 200
        return 'Forbidden', 403
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ!", exc_info=e)
        return "Error", 500

@app.route("/")
def index():
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω."""
    return "Bot is running!"

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    if WEBHOOK_URL:
        # –ü–∏–Ω–≥—É–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –æ–Ω –Ω–µ "–∑–∞—Å—ã–ø–∞–ª" –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö
        schedule.every(25).minutes.do(lambda: requests.get(WEBHOOK_URL.rsplit('/', 1)[0]))
    
    schedule.every(4).hours.do(auto_send_news)
    schedule.every(6).hours.do(auto_check_status)
    schedule.every(1).hours.do(get_top_asics, force_update=True)
    schedule.every(5).minutes.do(save_user_data) # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á...")
    get_top_asics(force_update=True)
    auto_check_status()
    
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}", exc_info=True)
        time.sleep(1)

def auto_send_news():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    if NEWS_CHAT_ID:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
        send_message_with_partner_button(NEWS_CHAT_ID, get_crypto_news())

def auto_check_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if not ADMIN_CHAT_ID: return
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º...")
    errors = []
    if get_crypto_price("BTC")[0] is None: errors.append("API —Ü–µ–Ω—ã")
    if "[‚ùå" in ask_gpt("–¢–µ—Å—Ç"): errors.append("API OpenAI")
    if not get_gsheet(): errors.append("Google Sheets")
        
    ts = datetime.now().strftime("%H:%M")
    status = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ." if not errors else f"‚ö†Ô∏è –°–±–æ–π –≤: {', '.join(errors)}"
    try:
        bot.send_message(ADMIN_CHAT_ID, f"<b>–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ({ts})</b>\n{status}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    load_user_data() # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    
    threading.Thread(target=run_scheduler, daemon=True).start()
    
    if WEBHOOK_URL:
        logger.info("–†–µ–∂–∏–º: –≤–µ–±—Ö—É–∫.")
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=f"{WEBHOOK_URL.rstrip('/')}/webhook")
        app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))
    else:
        logger.info("–†–µ–∂–∏–º: long-polling.")
        bot.remove_webhook()
        bot.polling(none_stop=True)
