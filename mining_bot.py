# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´
# ========================================================================================
import os
import telebot
import requests
import time
import threading
import schedule
import json
import atexit
import httpx
import gspread
import io
import re
import random
import logging
import feedparser
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

from flask import Flask, request
from google.oauth2.service_account import Credentials
from telebot import types
from openai import OpenAI
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
from dateutil import parser as date_parser
from concurrent.futures import ThreadPoolExecutor

# ========================================================================================
# 2. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´
# ========================================================================================
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
    datefmt='%d/%b/%Y %H:%M:%S'
)
logger = logging.getLogger(__name__)

class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç."""
    BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    CRYPTO_API_KEY = os.getenv("CRYPTO_API_KEY") # –î–ª—è CryptoPanic
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
    GOOGLE_JSON_STR = os.getenv("GOOGLE_JSON")
    SHEET_ID = os.getenv("SHEET_ID")
    SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")
    
    GAME_DATA_FILE = "game_data.json"
    PROFILES_DATA_FILE = "user_profiles.json"
    ASIC_CACHE_FILE = "asic_data_cache.json"
    DYNAMIC_KEYWORDS_FILE = "dynamic_keywords.json"

    if not BOT_TOKEN:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    PARTNER_URL = os.getenv("PARTNER_URL", "https://app.leadteh.ru/w/dTeKr")
    PARTNER_BUTTON_TEXT_OPTIONS = ["üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"]
    PARTNER_AD_TEXT_OPTIONS = [
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ BTC –≤ —Ä–µ–∞–ª—å–Ω—ã–µ? –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ! –ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.",
        "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ. –ì–æ—Ç–æ–≤—ã –∫ —Ä–µ–∞–ª—å–Ω–æ–π –¥–æ–±—ã—á–µ? –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.",
        "–í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ñ–µ—Ä–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –Ω–∞—Å—Ç–æ—è—â–µ–π. –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.",
        "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∑–Ω–∞–Ω–∏—è –∏–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–µ –∂–µ–ª–µ–∑–æ. –ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ –≤—ã? –ù–∞–¥–µ–∂–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É–∂–µ –∂–¥—É—Ç."
    ]
    BOT_HINTS = [
        "üí° –£–∑–Ω–∞–π—Ç–µ –∫—É—Ä—Å –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –µ–µ —Ç–∏–∫–µ—Ä!", "‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–º—ã–µ –¥–æ—Ö–æ–¥–Ω—ã–µ ASIC",
        "‚õèÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –ø–æ–º–æ—â—å—é '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'", "üì∞ –•–æ—Ç–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏?",
        "ü§ë –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–∏–º—É–ª—è—Ç–æ—Ä –º–∞–π–Ω–∏–Ω–≥–∞!", "üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏",
        "üèÜ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å–µ–±—è —Å –ª—É—á—à–∏–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤", "üéì –ß—Ç–æ —Ç–∞–∫–æ–µ 'HODL'? –£–∑–Ω–∞–π—Ç–µ: `/word`",
        "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ `/quiz`", "üõçÔ∏è –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π"
    ]
    
    LEVEL_MULTIPLIERS = {1: 1, 2: 1.5, 3: 2.2, 4: 3.5, 5: 5}
    UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1}
    STREAK_BONUS_MULTIPLIER = 0.05
    QUIZ_REWARD = 0.0001
    QUIZ_MIN_CORRECT_FOR_REWARD = 3
    QUIZ_QUESTIONS_COUNT = 5
    SHOP_ITEMS = {
        'boost': {'name': '‚ö°Ô∏è –ë—É—Å—Ç —Ö2 (24—á)', 'cost': 0.0005},
        'overclock': {'name': '‚öôÔ∏è –û–≤–µ—Ä–∫–ª–æ–∫–∏–Ω–≥-—á–∏–ø (+5% –Ω–∞–≤—Å–µ–≥–¥–∞)', 'cost': 0.002, 'effect': 0.05}
    }
    RANDOM_EVENT_CHANCE = 0.1

    HALVING_INTERVAL = 210000
    CRYPTO_TERMS = ["–ë–ª–æ–∫—á–µ–π–Ω", "–ì–∞–∑ (Gas)", "–•–∞–ª–≤–∏–Ω–≥", "ICO", "DeFi", "NFT", "–°–∞—Ç–æ—à–∏", "–ö–∏—Ç (Whale)", "HODL", "DEX", "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"]
    
    WARN_LIMIT = 3
    MUTE_DURATION_HOURS = 24
    SPAM_KEYWORDS = ['p2p', '–∞—Ä–±–∏—Ç—Ä–∞–∂', '–æ–±–º–µ–Ω', '—Å–∏–≥–Ω–∞–ª—ã', '–æ–±—É—á–µ–Ω–∏–µ', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–≤–ª–æ–∂–µ–Ω–∏—è', '—Å—Ö–µ–º–∞', '—Å–≤—è–∑–∫–∞']
    TECH_QUESTION_KEYWORDS = ['–ø–æ—á–µ–º—É', '–∫–∞–∫', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—Ç–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è', '–ø–µ—Ä–µ–≥—Ä–µ–≤–∞–µ—Ç—Å—è', '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å']
    TECH_SUBJECT_KEYWORDS = ['asic', '–∞—Å–∏–∫', '–º–∞–π–Ω–µ—Ä', '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', '–ø—Ä–æ—à–∏–≤–∫–∞', '—Ö–µ—à—Ä–µ–π—Ç', '–ø–ª–∞—Ç–∞', '–ø—É–ª']
    
    # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ò –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–í–ê–†–ò–ô–ù–´–ô –°–ü–ò–°–û–ö ASIC
    FALLBACK_ASICS = [
        # SHA-256 (Bitcoin)
        {'name': 'Antminer S21 200T', 'hashrate': '200 TH/s', 'power_watts': 3550, 'daily_revenue': 11.50, 'algorithm': 'SHA-256'},
        {'name': 'Antminer T21 190T', 'hashrate': '190 TH/s', 'power_watts': 3610, 'daily_revenue': 10.80, 'algorithm': 'SHA-256'},
        {'name': 'Whatsminer M60S 186T', 'hashrate': '186 TH/s', 'power_watts': 3441, 'daily_revenue': 10.50, 'algorithm': 'SHA-256'},
        {'name': 'Antminer S19k Pro 120T', 'hashrate': '120 TH/s', 'power_watts': 2760, 'daily_revenue': 6.50, 'algorithm': 'SHA-256'},
        # Scrypt (Litecoin/Dogecoin)
        {'name': 'Antminer L7 9500M', 'hashrate': '9.5 GH/s', 'power_watts': 3425, 'daily_revenue': 12.00, 'algorithm': 'Scrypt'},
        {'name': 'Antminer L9 16G', 'hashrate': '16 GH/s', 'power_watts': 3360, 'daily_revenue': 20.00, 'algorithm': 'Scrypt'},
        # KHeavyHash (Kaspa)
        {'name': 'Antminer KS5 Pro 21T', 'hashrate': '21 TH/s', 'power_watts': 3150, 'daily_revenue': 15.00, 'algorithm': 'KHeavyHash'},
        {'name': 'Iceriver KS3M 6T', 'hashrate': '6 TH/s', 'power_watts': 3400, 'daily_revenue': 4.50, 'algorithm': 'KHeavyHash'},
        # Blake2b-Sia (Siacoin)
        {'name': 'Antminer HS3 9Th', 'hashrate': '9 TH/s', 'power_watts': 2079, 'daily_revenue': 3.00, 'algorithm': 'Blake2b-Sia'},
        # Equihash (ZCash)
        {'name': 'Antminer Z15 Pro 840Ksol', 'hashrate': '840 KSol/s', 'power_watts': 2580, 'daily_revenue': 8.00, 'algorithm': 'Equihash'},
        # Ethash
        {'name': 'Jasminer X16-Q 1950Mh', 'hashrate': '1950 MH/s', 'power_watts': 620, 'daily_revenue': 5.50, 'algorithm': 'Etchash'},
    ]

    TICKER_ALIASES = {'–±—Ç–∫': 'BTC', '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', '–±–∏—Ç–æ–∫': 'BTC', 'eth': 'ETH', '—ç—Ñ–∏—Ä': 'ETH', '—ç—Ñ–∏—Ä–∏—É–º': 'ETH', 'sol': 'SOL', '—Å–æ–ª–∞–Ω–∞': 'SOL', 'ltc': 'LTC', '–ª–∞–π—Ç–∫–æ–∏–Ω': 'LTC', '–ª–∞–π—Ç': 'LTC', 'doge': 'DOGE', '–¥–æ–≥–∏': 'DOGE', '–¥–æ–≥': 'DOGE', 'kas': 'KAS', '–∫–∞—Å–ø–∞': 'KAS', '–∞–ª–µ–æ': 'ALEO'}
    COINGECKO_MAP = {'BTC': 'bitcoin', 'ETH': 'ethereum', 'LTC': 'litecoin', 'DOGE': 'dogecoin', 'KAS': 'kaspa', 'SOL': 'solana', 'XRP': 'ripple', 'TON': 'the-open-network', 'ALEO': 'aleo'}
    POPULAR_TICKERS = ['BTC', 'ETH', 'SOL', 'TON', 'KAS']
    NEWS_RSS_FEEDS = ["https://forklog.com/feed", "https://bits.media/rss/", "https://www.rbc.ru/crypto/feed", "https://beincrypto.ru/feed/", "https://cointelegraph.com/rss/tag/russia", "http://www.profinvestment.com/rss-crypto-news.xml"]
    
    QUIZ_QUESTIONS = [
        {"question": "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º Bitcoin?", "options": ["–í–∏—Ç–∞–ª–∏–∫ –ë—É—Ç–µ—Ä–∏–Ω", "–°–∞—Ç–æ—à–∏ –ù–∞–∫–∞–º–æ—Ç–æ", "–ß–∞—Ä–ª–∏ –õ–∏", "–ò–ª–æ–Ω –ú–∞—Å–∫"], "correct_index": 1},
        {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –±–ª–æ–∫ –≤ —Å–µ—Ç–∏ Bitcoin –≤ –¥–≤–∞ —Ä–∞–∑–∞?", "options": ["–§–æ—Ä–∫", "–ê–∏—Ä–¥—Ä–æ–ø", "–•–∞–ª–≤–∏–Ω–≥", "–°–∂–∏–≥–∞–Ω–∏–µ"], "correct_index": 2},
        {"question": "–ö–∞–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ Bitcoin?", "options": ["Solana", "Ripple (XRP)", "Cardano", "Ethereum"], "correct_index": 3},
        {"question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç 'HODL' –≤ –∫—Ä–∏–ø—Ç–æ-—Å–æ–æ–±—â–µ—Å—Ç–≤–µ?", "options": ["–ü—Ä–æ–¥–∞–≤–∞—Ç—å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏", "–î–µ—Ä–∂–∞—Ç—å –∞–∫—Ç–∏–≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ", "–ë—ã—Å—Ç—Ä–∞—è —Å–ø–µ–∫—É–ª—è—Ü–∏—è", "–û–±–º–µ–Ω –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã –Ω–∞ –¥—Ä—É–≥—É—é"], "correct_index": 1},
        {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –Ω–µ–¥–µ–ª–∏–º–∞—è —á–∞—Å—Ç—å Bitcoin?", "options": ["–¶–µ–Ω—Ç", "–ì–≤–µ–π", "–°–∞—Ç–æ—à–∏", "–ö–æ–ø–µ–π–∫–∞"], "correct_index": 2},
    ]

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
class ExceptionHandler(telebot.ExceptionHandler):
    def handle(self, exception): logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ pyTelegramBotAPI:", exc_info=exception); return True

bot = telebot.TeleBot(Config.BOT_TOKEN, threaded=False, parse_mode='HTML', exception_handler=ExceptionHandler())
app = Flask(__name__)

try:
    if Config.OPENAI_API_KEY: openai_client = OpenAI(api_key=Config.OPENAI_API_KEY, http_client=httpx.Client())
    else: openai_client = None; logger.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å GPT –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
except Exception as e: openai_client = None; logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI: {e}", exc_info=True)

user_quiz_states = {}

# ========================================================================================
# 3. –ö–õ–ê–°–°–´ –õ–û–ì–ò–ö–ò (API, –ò–ì–†–ê, –ê–ù–¢–ò–°–ü–ê–ú) - –í–ï–†–°–ò–Ø 7.0
# ========================================================================================
class ApiHandler:
    def __init__(self):
        self.asic_cache = self._load_json_file(Config.ASIC_CACHE_FILE, is_cache=True)
        self.currency_cache = {"rate": None, "timestamp": None}
        atexit.register(self._save_json_file, Config.ASIC_CACHE_FILE, self.asic_cache)

    def _make_request(self, url, timeout=20, is_json=True, custom_headers=None):
        headers = {'User-Agent': f'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36', 'Accept': 'application/json, text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}
        if custom_headers: headers.update(custom_headers)
        try:
            with httpx.Client(headers=headers, timeout=timeout, follow_redirects=True) as client:
                response = client.get(url); response.raise_for_status()
                return response.json() if is_json else response
        except (httpx.RequestError, httpx.HTTPStatusError, json.JSONDecodeError) as e:
            logger.warning(f"–°–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è {url}: {e}"); return None

    def _load_json_file(self, file_path, is_cache=False):
        data = {"data": [], "timestamp": None} if is_cache else {}
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    loaded_data = json.load(f)
                    if is_cache:
                        if "timestamp" in loaded_data and loaded_data["timestamp"]:
                            cache_time = datetime.fromisoformat(loaded_data["timestamp"])
                            if datetime.now() - cache_time < timedelta(hours=4): logger.info(f"–°–≤–µ–∂–∏–π –∫—ç—à ({file_path}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω."); loaded_data["timestamp"] = cache_time; return loaded_data
                            else: logger.warning(f"–ö—ç—à ({file_path}) —Å—Ç–∞—Ä—à–µ 4 —á–∞—Å–æ–≤, –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
                        return data
                    return loaded_data
        except (json.JSONDecodeError, TypeError, ValueError): logger.warning(f"–§–∞–π–ª {file_path} –ø—É—Å—Ç/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
        return data

    def _save_json_file(self, file_path, data_dict):
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                data_to_save = data_dict.copy()
                if isinstance(data_to_save.get("timestamp"), datetime): data_to_save["timestamp"] = data_to_save["timestamp"].isoformat()
                json.dump(data_to_save, f, indent=4)
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

    def ask_gpt(self, prompt: str, model: str = "gpt-4o"):
        if not openai_client: return "[‚ùå –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.]"
        try:
            res = openai_client.chat.completions.create(model=model, messages=[{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å HTML-—Ç–µ–≥–∞–º–∏: <b>, <i>, <a>, <code>, <pre>."}, {"role": "user", "content": prompt}], timeout=30.0)
            return res.choices[0].message.content.strip()
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {e}"); return "[‚ùå –û—à–∏–±–∫–∞ GPT.]"

    def get_top_asics_for_algo(self, algorithm: str, count=3):
        if not algorithm or algorithm == "N/A": return ""
        logger.info(f"–ò—â—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {algorithm}")
        all_asics = self.get_top_asics()
        normalized_algorithm = algorithm.lower().replace('-', '').replace('_', '').replace(' ', '')
        relevant_asics = [asic for asic in all_asics if asic.get('algorithm') and normalized_algorithm in asic['algorithm'].lower().replace('-', '').replace('_', '').replace(' ', '')]
        if not relevant_asics: logger.info(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ {algorithm} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return ""
        sorted_asics = sorted(relevant_asics, key=lambda x: x.get('daily_revenue', 0), reverse=True)
        text_lines = [f"\n\n‚öôÔ∏è <b>–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥ {algorithm}:</b>"]
        for asic in sorted_asics[:count]: text_lines.append(f"  ‚Ä¢ <b>{telebot.util.escape(asic['name'])}</b>: ${asic.get('daily_revenue', 0):.2f}/–¥–µ–Ω—å")
        return "\n".join(text_lines)

    def get_crypto_price(self, ticker="BTC"):
        ticker_input = ticker.strip().lower()
        ticker = Config.TICKER_ALIASES.get(ticker_input, ticker_input.upper())
        coin_id = Config.COINGECKO_MAP.get(ticker)
        if not coin_id:
            logger.info(f"–¢–∏–∫–µ—Ä {ticker} –Ω–µ –≤ –∫–∞—Ä—Ç–µ, –∏—â—É –Ω–∞ CoinGecko...");
            search_data = self._make_request(f"https://api.coingecko.com/api/v3/search?query={ticker_input}")
            if search_data and search_data.get('coins'):
                top_coin = search_data['coins'][0]
                coin_id, ticker = top_coin.get('id'), top_coin.get('symbol', ticker).upper()
                logger.info(f"–ù–∞–π–¥–µ–Ω ID –Ω–∞ CoinGecko: {coin_id} –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker}")
            else: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—É '{ticker_input}' —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫."); return None, None
        price_response = self._make_request(f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd")
        if not price_response or coin_id not in price_response or not price_response.get(coin_id, {}).get('usd'):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ID {coin_id}."); return None, None
        price_data = {'price': float(price_response[coin_id]['usd']), 'source': 'CoinGecko', 'ticker': ticker}
        details_response = self._make_request(f"https://api.coingecko.com/api/v3/coins/{coin_id}?localization=false&tickers=false&market_data=false&community_data=false&developer_data=false&sparkline=false")
        algorithm = details_response.get('hashing_algorithm') if details_response else None
        if algorithm: logger.info(f"–î–ª—è –º–æ–Ω–µ—Ç—ã {ticker} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")
        return price_data, self.get_top_asics_for_algo(algorithm)

    # --- –ë–õ–û–ö –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û–ë ASIC (–í–ï–†–°–ò–Ø 7.0 - –°–õ–ò–Ø–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í) ---
    def _get_asics_from_whattomine(self):
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #1 (API): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å whattomine.com...")
        data = self._make_request("https://whattomine.com/asics.json", custom_headers={'Accept': 'application/json'})
        if not data or 'asics' not in data: return []
        parsed_asics = []
        for name, asic_data in data['asics'].items():
            if asic_data.get('status') != 'Active' or not asic_data.get('revenue'): continue
            try:
                revenue = float(re.sub(r'[^\d\.]', '', asic_data['revenue']))
                if revenue > 0:
                    parsed_asics.append({'name': name, 'hashrate': f"{asic_data.get('hashrate')} ({asic_data.get('algorithm')})", 'power_watts': float(asic_data.get('power', 0)), 'daily_revenue': revenue, 'algorithm': asic_data.get('algorithm')})
            except (ValueError, TypeError): continue
        logger.info(f"WhatToMine: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(parsed_asics)} –∞—Å–∏–∫–æ–≤.")
        return parsed_asics

    def _get_asics_from_minerstat(self):
        logger.info("–ò—Å—Ç–æ—á–Ω–∏–∫ #2 (API): –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å minerstat.com...")
        all_hardware = self._make_request("https://api.minerstat.com/v2/hardware")
        if not all_hardware: return []
        parsed_asics = []
        for device in all_hardware:
            if not isinstance(device, dict) or device.get("type") != "asic": continue
            best_algo_data, best_algo_name, max_revenue = None, "N/A", -1
            for algo_name, algo_data in device.get("algorithms", {}).items():
                try:
                    revenue = float(algo_data.get("revenue_in_usd", "0").replace("$", ""))
                    if revenue > max_revenue: max_revenue, best_algo_data, best_algo_name = revenue, algo_data, algo_name
                except (ValueError, TypeError): continue
            if best_algo_data and max_revenue > 0:
                hashrate_val = float(best_algo_data.get('speed', 0))
                if hashrate_val / 1e12 >= 1: hashrate_str = f"{hashrate_val / 1e12:.2f} TH/s"
                elif hashrate_val / 1e9 >= 1: hashrate_str = f"{hashrate_val / 1e9:.2f} GH/s"
                else: hashrate_str = f"{hashrate_val / 1e6:.2f} MH/s"
                parsed_asics.append({'name': device.get("name", "N/A"), 'hashrate': hashrate_str, 'power_watts': float(best_algo_data.get("power", 0)), 'daily_revenue': max_revenue, 'algorithm': best_algo_name})
        logger.info(f"Minerstat: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(parsed_asics)} –∞—Å–∏–∫–æ–≤.")
        return parsed_asics

    def get_top_asics(self, force_update: bool = False):
        if not force_update and self.asic_cache.get("data"): return self.asic_cache.get("data")
        all_asics = []
        source_functions = [self._get_asics_from_whattomine, self._get_asics_from_minerstat]
        with ThreadPoolExecutor(max_workers=len(source_functions)) as executor:
            for result in executor.map(lambda f: f(), source_functions):
                if result: all_asics.extend(result)
        if not all_asics:
            if self.asic_cache.get("data"):
                logger.warning("–í—Å–µ –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞.")
                return self.asic_cache.get("data")
            logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í—Å–µ –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é –∞–≤–∞—Ä–∏–π–Ω—ã–π —Å–ø–∏—Å–æ–∫ ASIC.")
            return Config.FALLBACK_ASICS
        unique_asics = {asic['name']: asic for asic in sorted(all_asics, key=lambda x: x['daily_revenue'])}
        final_list = sorted(unique_asics.values(), key=lambda x: x['daily_revenue'], reverse=True)
        self.asic_cache = {"data": final_list, "timestamp": datetime.now()}
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(final_list)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ASIC.")
        return final_list
        
    def get_fear_and_greed_index(self):
        data = self._make_request("https://api.alternative.me/fng/?limit=1")
        if not data or 'data' not in data or not data['data']: return None, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]"
        try:
            value_data = data['data'][0]; value, classification = int(value_data['value']), value_data['value_classification']
            plt.style.use('dark_background'); fig, ax = plt.subplots(figsize=(8, 4.5), subplot_kw={'projection': 'polar'})
            ax.set_yticklabels([]); ax.set_xticklabels([]); ax.grid(False); ax.spines['polar'].set_visible(False); ax.set_ylim(0, 1)
            colors = ['#d94b4b', '#e88452', '#ece36a', '#b7d968', '#73c269']
            for i in range(100): ax.barh(1, 0.0314, left=3.14 - (i * 0.0314), height=0.3, color=colors[min(len(colors) - 1, int(i / 25))])
            angle = 3.14 - (value * 0.0314)
            ax.annotate('', xy=(angle, 1), xytext=(0, 0), arrowprops=dict(facecolor='white', shrink=0.05, width=4, headwidth=10))
            fig.text(0.5, 0.5, f"{value}", ha='center', va='center', fontsize=48, color='white', weight='bold')
            fig.text(0.5, 0.35, classification, ha='center', va='center', fontsize=20, color='white')
            buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=150, transparent=True); buf.seek(0); plt.close(fig)
            explanation = self.ask_gpt(f"–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –¥–ª—è –º–∞–π–Ω–µ—Ä–∞, –∫–∞–∫ '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{value} ({classification})' –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫. –ù–µ –±–æ–ª–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
            return buf, f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>\n\n{explanation}"
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}"); return None, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]"

    def get_usd_rub_rate(self):
        if self.currency_cache.get("rate") and (datetime.now() - self.currency_cache.get("timestamp", datetime.min) < timedelta(minutes=30)): return self.currency_cache["rate"], False
        sources = [{"name": "CBRF", "url": "https://www.cbr-xml-daily.ru/daily_json.js", "parser": lambda data: data.get('Valute', {}).get('USD', {}).get('Value')}, {"name": "Exchangerate.host", "url": "https://api.exchangerate.host/latest?base=USD&symbols=RUB", "parser": lambda data: data.get('rates', {}).get('RUB')}]
        for source_info in sources:
            try:
                data = self._make_request(source_info['url'])
                if data and (rate := source_info['parser'](data)):
                    logger.info(f"–ö—É—Ä—Å USD/RUB –ø–æ–ª—É—á–µ–Ω —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_info['name']}: {rate}"); self.currency_cache = {"rate": float(rate), "timestamp": datetime.now()}; return float(rate), False
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫—É—Ä—Å–∞ {source_info['name']}: {e}")
        logger.error("–í—Å–µ –æ–Ω–ª–∞–π–Ω-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é –∞–≤–∞—Ä–∏–π–Ω—ã–π –∫—É—Ä—Å."); return 90.0, True

    def get_halving_info(self):
        urls = ["https://mempool.space/api/blocks/tip/height", "https://blockchain.info/q/getblockcount"]
        current_block = next((int(r.text) for url in urls if (r := self._make_request(url, is_json=False)) and r.text.isdigit()), None)
        if not current_block: return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ]"
        try:
            blocks_left = ((current_block // Config.HALVING_INTERVAL) + 1) * Config.HALVING_INTERVAL - current_block
            if blocks_left <= 0: return "üéâ <b>–•–∞–ª–≤–∏–Ω–≥ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª!</b>"
            days, rem_min = divmod(blocks_left * 10, 1440); hours, _ = divmod(rem_min, 60)
            return f"‚è≥ <b>–î–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\nüóì <b>–î–Ω–µ–π:</b> <code>{days}</code> | ‚è∞ <b>–ß–∞—Å–æ–≤:</b> <code>{hours}</code>\nüß± <b>–ë–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞:</b> <code>{blocks_left:,}</code>"
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞: {e}"); return "[‚ùå –û—à–∏–±–∫–∞]"

    def _get_news_from_rss(self, url):
        try:
            feed = feedparser.parse(url, agent=f'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/{random.randint(100, 126)}.0.0.0')
            if feed.bozo: logger.warning(f"–õ–µ–Ω—Ç–∞ {url} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π: {feed.bozo_exception}")
            return [{'title': e.title, 'link': e.link, 'published': date_parser.parse(e.published).replace(tzinfo=None)} for e in feed.entries if hasattr(e, 'published') and hasattr(e, 'title') and hasattr(e, 'link')]
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {url}: {e}"); return []

    def get_crypto_news(self):
        all_news = []
        with ThreadPoolExecutor(max_workers=len(Config.NEWS_RSS_FEEDS)) as executor:
            for result in executor.map(self._get_news_from_rss, Config.NEWS_RSS_FEEDS):
                if result: all_news.extend(result)
        if not all_news: return "[üßê –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.]"
        all_news.sort(key=lambda x: x['published'], reverse=True)
        seen_titles = set(); unique_news = [item for item in all_news if item['title'].strip().lower() not in seen_titles and not seen_titles.add(item['title'].strip().lower())]
        if not unique_news: return "[üßê –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.]"
        items = [f"üîπ <a href=\"{p.get('link', '')}\">{self.ask_gpt(f'–°–¥–µ–ª–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: "{p["title"]}"', 'gpt-4o-mini').replace('[‚ùå –û—à–∏–±–∫–∞ GPT.]', p['title'])}</a>" for p in unique_news[:4]]
        return "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n" + "\n\n".join(items)
        
    def get_eth_gas_price(self):
        sources = [{"n": "ethgas.watch", "u": "https://ethgas.watch/api/gas", "p": lambda d: (d.get('slow', {}).get('gwei'), d.get('normal', {}).get('gwei'), d.get('fast', {}).get('gwei'))}, {"n": "Etherscan", "u": f"https://api.etherscan.io/api?module=gastracker&action=gasoracle", "p": lambda d: (d.get('result', {}).get('SafeGasPrice'), d.get('result', {}).get('ProposeGasPrice'), d.get('result', {}).get('FastGasPrice'))}]
        for s in sources:
            if (data := self._make_request(s['u'])):
                try:
                    slow, normal, fast = s['p'](data)
                    if all((slow, normal, fast)): return f"‚õΩÔ∏è <b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ (Gwei):</b>\n\nüê¢ <b>–ú–µ–¥–ª–µ–Ω–Ω–æ:</b> <code>{slow}</code>\nüö∂‚Äç‚ôÇÔ∏è <b>–°—Ä–µ–¥–Ω–µ:</b> <code>{normal}</code>\nüöÄ <b>–ë—ã—Å—Ç—Ä–æ:</b> <code>{fast}</code>\n\n<i>–î–∞–Ω–Ω—ã–µ –æ—Ç {s['n']}</i>"
                except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–∞–∑–∞ –æ—Ç {s['n']}: {e}"); continue
        return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ]"

    def get_btc_network_status(self):
        try:
            with httpx.Client(timeout=10) as session:
                fees, mempool, height = session.get("https://mempool.space/api/v1/fees/recommended").json(), session.get("https://mempool.space/api/mempool").json(), session.get("https://mempool.space/api/blocks/tip/height").text
                return f"üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ Bitcoin:</b>\n\nüß± <b>–¢–µ–∫—É—â–∏–π –±–ª–æ–∫:</b> <code>{int(height):,}</code>\nüìà <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –º–µ–º–ø—É–ª–µ:</b> <code>{mempool.get('count', 'N/A'):,}</code>\n\nüí∏ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (sat/vB):</b>\n  - üöÄ <b>–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <code>{fees.get('fastestFee', 'N/A')}</code>\n  - üö∂‚Äç‚ôÇÔ∏è <b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <code>{fees.get('halfHourFee', 'N/A')}</code>\n  - üê¢ <b>–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <code>{fees.get('hourFee', 'N/A')}</code>"
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ Bitcoin: {e}"); return "[‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ BTC]"
    
    def get_new_quiz_questions(self):
        try: return random.sample(Config.QUIZ_QUESTIONS, min(Config.QUIZ_QUESTIONS_COUNT, len(Config.QUIZ_QUESTIONS)))
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}"); return None

# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞)
# NOTE: –ö–æ–¥ –¥–ª—è GameLogic, SpamAnalyzer –∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (`handle_*`) –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ 6.0,
# —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—Ç–∞–±–∏–ª–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∫–ª–∞—Å—Å–µ ApiHandler.
# –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –æ—Ç–≤–µ—Ç, —è –æ–ø—É—Å–∫–∞—é –∏—Ö –∑–¥–µ—Å—å, –Ω–æ –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –≤ —Å–≤–æ–µ–º —Ñ–∞–π–ª–µ.

# –ù–∏–∂–µ —Å–ª–µ–¥—É–µ—Ç –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π –±–æ—Ç–∞ –¥–ª—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.

class GameLogic:
    def __init__(self, data_file):
        self.data_file = data_file
        self.user_rigs = api._load_json_file(data_file)
        atexit.register(api._save_json_file, self.data_file, self.user_rigs)

    def _convert_timestamps_to_dt(self, data):
        for key, value in data.items():
            if isinstance(value, str) and ('until' in key or 'collected' in key):
                try: data[key] = datetime.fromisoformat(value)
                except (ValueError, TypeError): data[key] = None
        return data

    def create_rig(self, user_id, user_name, asic_data):
        if user_id in self.user_rigs: return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–µ—Ä–º–∞!"
        price_data, _ = api.get_crypto_price("BTC")
        btc_price = price_data['price'] if price_data else 65000
        self.user_rigs[user_id] = {'last_collected': None, 'balance': 0.0, 'level': 1, 'streak': 0, 'name': user_name, 'boost_active_until': None, 'asic_model': asic_data['name'], 'base_rate': asic_data['daily_revenue'] / btc_price, 'overclock_bonus': 0.0, 'penalty_multiplier': 1.0}
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ñ–µ—Ä–º–∞ —Å <b>{asic_data['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"

    def get_rig_info(self, user_id, user_name):
        rig_data = self.user_rigs.get(user_id)
        if not rig_data:
            starter_asics = api.get_top_asics()
            if not starter_asics: return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None
            markup = types.InlineKeyboardMarkup(row_width=1)
            choices = random.sample(starter_asics, k=min(3, len(starter_asics)))
            temp_user_choices[user_id] = choices
            buttons = [types.InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {asic['name']}", callback_data=f"start_rig_{i}") for i, asic in enumerate(choices)]
            markup.add(*buttons)
            return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –ø–µ—Ä–≤—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ñ–µ—Ä–º—É. –í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–∞–∫–æ–≥–æ ASIC –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å:", markup
        
        rig = self._convert_timestamps_to_dt(rig_data.copy())
        rig['name'] = user_name
        next_level = rig['level'] + 1
        upgrade_cost_text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: <code>{Config.UPGRADE_COSTS.get(next_level, 'N/A')}</code> BTC." if next_level in Config.UPGRADE_COSTS else "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
        boost_status = ""
        if rig.get('boost_active_until') and datetime.now() < rig['boost_active_until']:
            h, m = divmod((rig['boost_active_until'] - datetime.now()).seconds, 3600)[0], divmod((rig['boost_active_until'] - datetime.now()).seconds % 3600, 60)[0]
            boost_status = f"‚ö°Ô∏è <b>–ë—É—Å—Ç x2 –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ: {h}—á {m}–º</b>\n"
        base_rate, overclock_bonus = rig.get('base_rate', 0.0001), rig.get('overclock_bonus', 0.0)
        current_rate = base_rate * (1 + overclock_bonus) * Config.LEVEL_MULTIPLIERS.get(rig['level'], 1)
        overclock_text = f"(+ {overclock_bonus:.1%})" if overclock_bonus > 0 else ""
        return (f"üñ•Ô∏è <b>–§–µ—Ä–º–∞ ¬´{telebot.util.escape(rig['name'])}¬ª</b>\n<i>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {rig.get('asic_model', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ')}</i>\n\n<b>–£—Ä–æ–≤–µ–Ω—å:</b> {rig['level']}\n<b>–ë–∞–∑–æ–≤–∞—è –¥–æ–±—ã—á–∞:</b> <code>{current_rate:.8f} BTC/–¥–µ–Ω—å</code> {overclock_text}\n<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{rig['balance']:.8f}</code> BTC\n<b>–î–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è:</b> {rig['streak']} üî• (–±–æ–Ω—É—Å <b>+{rig['streak'] * Config.STREAK_BONUS_MULTIPLIER:.0%}</b>)\n{boost_status}\n{upgrade_cost_text}"), None

    def collect_reward(self, user_id):
        rig = self.user_rigs.get(user_id);
        if not rig: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>."
        now, last_collected_str = datetime.now(), rig.get('last_collected')
        if last_collected_str and (now - datetime.fromisoformat(last_collected_str)) < timedelta(hours=23, minutes=55):
            time_left = timedelta(hours=24) - (now - datetime.fromisoformat(last_collected_str))
            h, m = divmod(time_left.seconds, 3600)[0], divmod(time_left.seconds % 3600, 60)[0]
            return f"–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ <b>{h}—á {m}–º</b>."
        rig['streak'] = rig['streak'] + 1 if last_collected_str and (now - datetime.fromisoformat(last_collected_str)) < timedelta(hours=48) else 1
        base_mined = rig.get('base_rate', 0.0001) * (1 + rig.get('overclock_bonus', 0.0)) * Config.LEVEL_MULTIPLIERS.get(rig['level'], 1)
        streak_bonus = base_mined * rig['streak'] * Config.STREAK_BONUS_MULTIPLIER
        boost_multiplier = 2 if rig.get('boost_active_until') and now < datetime.fromisoformat(rig['boost_active_until']) else 1
        total_mined = (base_mined + streak_bonus) * boost_multiplier * rig.get('penalty_multiplier', 1.0)
        penalty_text = f"\nüìâ <i>–ü—Ä–∏–º–µ–Ω–µ–Ω —à—Ç—Ä–∞—Ñ {rig.get('penalty_multiplier', 1.0):.0%} –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.</i>" if rig.get('penalty_multiplier', 1.0) < 1.0 else ""
        if rig.get('penalty_multiplier', 1.0) < 1.0: rig['penalty_multiplier'] = 1.0
        rig['balance'] += total_mined; rig['last_collected'] = now.isoformat()
        event_text = ""
        if random.random() < Config.RANDOM_EVENT_CHANCE:
            if random.random() < 0.5: bonus_pct, bonus_amount = random.randint(5, 15), total_mined * (random.randint(5, 15) / 100); rig['balance'] += bonus_amount; event_text = f"\n\nüéâ <b>–°–æ–±—ã—Ç–∏–µ: –ü–∞–º–ø –∫—É—Ä—Å–∞!</b> –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å {bonus_pct}% (+{bonus_amount:.8f} BTC)!"
            else: penalty_pct = random.randint(10, 25); rig['penalty_multiplier'] = 1 - (penalty_pct / 100); event_text = f"\n\nüí• <b>–°–æ–±—ã—Ç–∏–µ: –°–∫–∞—á–æ–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è!</b> –í–∞—à–∞ —Å–ª–µ–¥—É—é—â–∞—è –¥–æ–±—ã—á–∞ –±—É–¥–µ—Ç —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ {penalty_pct}%."
        return f"‚úÖ –°–æ–±—Ä–∞–Ω–æ <b>{total_mined:.8f}</b> BTC{' (x2 –ë—É—Å—Ç!)' if boost_multiplier > 1 else ''}!\n  (–ë–∞–∑–∞: {base_mined:.8f} + –°–µ—Ä–∏—è: {streak_bonus:.8f}){penalty_text}\nüî• –í–∞—à–∞ —Å–µ—Ä–∏—è: <b>{rig['streak']} –¥–Ω–µ–π!</b>\nüí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{rig['balance']:.8f}</code> BTC.{event_text}"

    def buy_item(self, user_id, item_key):
        rig, item = self.user_rigs.get(user_id), Config.SHOP_ITEMS.get(item_key)
        if not rig: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã.";
        if not item: return "‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç."
        if rig['balance'] < item['cost']: return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b> –ù—É–∂–Ω–æ {item['cost']:.4f} BTC."
        rig['balance'] -= item['cost']
        if item_key == 'boost': rig['boost_active_until'] = (datetime.now() + timedelta(hours=24)).isoformat(); return f"‚ö°Ô∏è <b>–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±—É—Å—Ç –∫—É–ø–ª–µ–Ω!</b> –í–∞—à–∞ –¥–æ–±—ã—á–∞ —É–¥–≤–æ–µ–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞."
        if item_key == 'overclock': rig['overclock_bonus'] = rig.get('overclock_bonus', 0.0) + item['effect']; return f"‚öôÔ∏è <b>–û–≤–µ—Ä–∫–ª–æ–∫–∏–Ω–≥-—á–∏–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b> –í–∞—à–∞ –±–∞–∑–æ–≤–∞—è –¥–æ–±—ã—á–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {item['effect']:.0%}."

    def upgrade_rig(self, user_id):
        rig = self.user_rigs.get(user_id);
        if not rig: return "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã."
        next_level, cost = rig['level'] + 1, Config.UPGRADE_COSTS.get(rig['level'] + 1)
        if not cost: return "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã!"
        if rig['balance'] >= cost: rig['balance'] -= cost; rig['level'] = next_level; return f"üöÄ <b>–£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b> –í–∞—à–∞ —Ñ–µ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ <b>{next_level}</b> —É—Ä–æ–≤–Ω—è!"
        else: return f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>"
            
    def get_top_miners(self):
        if not self.user_rigs: return "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞."
        sorted_rigs = sorted(self.user_rigs.values(), key=lambda r: r.get('balance', 0), reverse=True)
        return "üèÜ <b>–¢–æ–ø-5 –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ú–∞–π–Ω–µ—Ä–æ–≤:</b>\n" + "\n".join([f"<b>{i+1}.</b> {telebot.util.escape(rig.get('name','N/A'))} - <code>{rig.get('balance',0):.6f}</code> BTC (–£—Ä. {rig.get('level',1)})" for i, rig in enumerate(sorted_rigs[:5])])
        
    def apply_quiz_reward(self, user_id):
        if user_id in self.user_rigs: self.user_rigs[user_id]['balance'] += Config.QUIZ_REWARD; return f"\n\nüéÅ –ó–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{Config.QUIZ_REWARD:.4f} BTC!</b>"
        return f"\n\nüéÅ –í—ã –±—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{Config.QUIZ_REWARD:.4f} BTC</b>, –µ—Å–ª–∏ –±—ã —É –≤–∞—Å –±—ã–ª–∞ —Ñ–µ—Ä–º–∞! –ù–∞—á–Ω–∏—Ç–µ —Å <code>/my_rig</code>."

class SpamAnalyzer:
    def __init__(self, profiles_file, keywords_file):
        self.profiles_file = api._load_json_file(profiles_file)
        self.dynamic_keywords = api._load_json_file(keywords_file, default_value=[])
        atexit.register(api._save_json_file, profiles_file, self.profiles_file)
        atexit.register(api._save_json_file, keywords_file, self.dynamic_keywords)

    def add_keywords_from_text(self, text):
        if not text: return
        words = {word for word in re.findall(r'\b\w{5,}\b', text.lower()) if not word.isdigit()}
        all_spam_words, added_count = set(Config.SPAM_KEYWORDS + self.dynamic_keywords), 0
        for keyword in words:
            if keyword not in all_spam_words: self.dynamic_keywords.append(keyword); added_count += 1
        if added_count > 0: logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ñ–∏–ª—å—Ç—Ä.")

    def process_message(self, msg: types.Message):
        user = msg.from_user; text = msg.text or msg.caption or ""
        profile = self.user_profiles.setdefault(str(user.id), {'first_msg': datetime.utcnow().isoformat(), 'msg_count': 0, 'spam_count': 0})
        profile.update({'user_id': user.id, 'name': user.full_name, 'username': user.username, 'msg_count': profile.get('msg_count', 0) + 1, 'last_seen': datetime.utcnow().isoformat()})
        if any(keyword in text.lower() for keyword in Config.SPAM_KEYWORDS + self.dynamic_keywords): self.handle_spam_detection(msg)

    def handle_spam_detection(self, msg: types.Message, initiated_by_admin=False):
        user, profile = msg.from_user, self.user_profiles.get(str(msg.from_user.id))
        if not profile: return
        profile['spam_count'] = profile.get('spam_count', 0) + 1
        logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –æ—Ç {user.full_name} ({user.id}). –°—á–µ—Ç—á–∏–∫: {profile['spam_count']}")
        try: bot.delete_message(msg.chat.id, msg.message_id)
        except Exception: pass
        if Config.ADMIN_CHAT_ID:
            markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚úÖ –ù–µ —Å–ø–∞–º", callback_data=f"not_spam_{user.id}_{msg.chat.id}"))
            admin_text = f"‚ùóÔ∏è<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º</b>{' (–∞–¥–º–∏–Ω–æ–º)' if initiated_by_admin else ''}\n\n<b>–û—Ç:</b> {telebot.util.escape(user.full_name)} (<code>{user.id}</code>)\n<b>–ß–∞—Ç:</b> <code>{msg.chat.id}</code>\n<b>–¢–µ–∫—Å—Ç:</b>\n<blockquote>{telebot.util.escape(msg.text or msg.caption or '')}</blockquote>"
            try: bot.send_message(Config.ADMIN_CHAT_ID, admin_text, reply_markup=markup)
            except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        if profile['spam_count'] >= Config.WARN_LIMIT:
            try:
                bot.restrict_chat_member(msg.chat.id, user.id, until_date=time.time() + Config.MUTE_DURATION_HOURS * 3600)
                bot.send_message(msg.chat.id, f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telebot.util.escape(user.full_name)} –ø–æ–ª—É—á–∏–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –ø—Ä–∞–≤–∞—Ö –Ω–∞ {Config.MUTE_DURATION_HOURS}—á."); profile['spam_count'] = 0
            except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –º—å—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
        else: bot.send_message(msg.chat.id, f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è {telebot.util.escape(user.full_name)}! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º. –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{Config.WARN_LIMIT - profile['spam_count']}</b>.")

    def get_user_info_text(self, user_id: int) -> str:
        profile = self.user_profiles.get(str(user_id))
        if not profile: return "üîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        spam_factor = (profile.get('spam_count', 0) / profile.get('msg_count', 1) * 100)
        first_msg_dt = datetime.fromisoformat(profile['first_msg']) if profile.get('first_msg') else 'N/A'
        last_seen_dt = datetime.fromisoformat(profile['last_seen']) if profile.get('last_seen') else 'N/A'
        return f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\nüë§ <b>ID:</b> <code>{profile['user_id']}</code>\nüîñ <b>–ò–º—è:</b> {telebot.util.escape(profile.get('name', 'N/A'))}\nüåê <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{profile.get('username', 'N/A')}\n\nüí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {profile.get('msg_count', 0)}\nüö® <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {profile.get('spam_count', 0)}/{Config.WARN_LIMIT}\nüìà <b>–°–ø–∞–º-—Ñ–∞–∫—Ç–æ—Ä:</b> {spam_factor:.2f}%\n\nüóìÔ∏è <b>–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {first_msg_dt:%d %b %Y}\nüëÄ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_seen_dt:%d %b %Y, %H:%M}"
        
    def get_chat_statistics(self, days=7):
        if not self.user_profiles: return "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
        now = datetime.utcnow(); week_ago = now - timedelta(days=days)
        active_users = sum(1 for p in self.user_profiles.values() if p.get('last_seen') and datetime.fromisoformat(p['last_seen']) > week_ago)
        new_users = sum(1 for p in self.user_profiles.values() if p.get('first_msg') and datetime.fromisoformat(p['first_msg']) > week_ago)
        total_messages = sum(p.get('msg_count', 0) for p in self.user_profiles.values())
        first_msg_str = min((p['first_msg'] for p in self.user_profiles.values() if p.get('first_msg')), default=None)
        days_since_start = (now - datetime.fromisoformat(first_msg_str)).days if first_msg_str else 0
        avg_msg_day = total_messages / days_since_start if days_since_start > 0 else total_messages
        return f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n\nüë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(self.user_profiles)}\nüî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {active_users}\nüå± <b>–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {new_users}\n\nüí¨ <b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {total_messages}\nüìà <b>–°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å (–≤ —Å—Ä.):</b> {avg_msg_day:.2f}"

api = ApiHandler()
game = GameLogic(Config.GAME_DATA_FILE)
spam_analyzer = SpamAnalyzer(Config.PROFILES_DATA_FILE, Config.DYNAMIC_KEYWORDS_FILE)
temp_user_choices = {}

# ========================================================================================
# 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
# ========================================================================================
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["üíπ –ö—É—Ä—Å", "‚öôÔ∏è –¢–æ–ø ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üì° –°—Ç–∞—Ç—É—Å BTC", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üéì –°–ª–æ–≤–æ –¥–Ω—è", "üïπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥"]
    markup.add(*[types.KeyboardButton(text) for text in buttons])
    return markup

def send_message_with_partner_button(chat_id, text, reply_markup=None):
    try:
        if not reply_markup:
            reply_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(random.choice(Config.PARTNER_BUTTON_TEXT_OPTIONS), url=Config.PARTNER_URL))
        bot.send_message(chat_id, f"{text}\n\n---\n<i>{random.choice(Config.BOT_HINTS)}</i>", reply_markup=reply_markup, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

def send_photo_with_partner_button(chat_id, photo, caption):
    try:
        if not photo: raise ValueError("–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –ø—É—Å—Ç–æ–π")
        hint = f"\n\n---\n<i>{random.choice(Config.BOT_HINTS)}</i>"
        final_caption = f"{caption[:1024 - len(hint) - 4]}...{hint}" if len(caption) > 1024 - len(hint) else f"{caption}{hint}"
        markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(random.choice(Config.PARTNER_BUTTON_TEXT_OPTIONS), url=Config.PARTNER_URL))
        bot.send_photo(chat_id, photo, caption=final_caption, reply_markup=markup)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–º.");
        send_message_with_partner_button(chat_id, caption)

def is_admin(chat_id, user_id):
    try:
        if str(user_id) == Config.ADMIN_CHAT_ID: return True
        return user_id in [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return False

# ========================================================================================
# 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================================================
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(msg):
    bot.send_message(msg.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.\n\n<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n<code>/userinfo</code>, <code>/spam</code>, <code>/ban</code>, <code>/unban</code>, <code>/unmute</code>, <code>/chatstats</code>", reply_markup=get_main_keyboard())

@bot.message_handler(commands=['userinfo', 'ban', 'unban', 'unmute', 'chatstats', 'spam'])
def handle_admin_commands(msg):
    command = msg.text.split('@')[0].split(' ')[0].lower()
    if not is_admin(msg.chat.id, msg.from_user.id):
        return bot.reply_to(msg, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    def get_target_user(m):
        if m.reply_to_message: return m.reply_to_message.from_user, None
        parts = m.text.split()
        if len(parts) > 1 and parts[1].isdigit():
            try: return bot.get_chat_member(m.chat.id, int(parts[1])).user, None
            except Exception as e: return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"
        return None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ ID."
    
    target_user, error = None, None
    if command in ['/userinfo', '/ban', '/unban', 'unmute']:
        target_user, error = get_target_user(msg)
        if error: return bot.reply_to(msg, error)

    try:
        if command == '/userinfo': bot.send_message(msg.chat.id, spam_analyzer.get_user_info_text(target_user.id))
        elif command == '/unban': bot.unban_chat_member(msg.chat.id, target_user.id); bot.reply_to(msg, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telebot.util.escape(target_user.full_name)} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        elif command == '/unmute': bot.restrict_chat_member(msg.chat.id, target_user.id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True); bot.reply_to(msg, f"–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telebot.util.escape(target_user.full_name)} —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")
        elif command == '/chatstats': bot.send_message(msg.chat.id, spam_analyzer.get_chat_statistics())
        elif command in ['/ban', '/spam']:
            if not msg.reply_to_message: return bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            user_to_act = msg.reply_to_message.from_user
            spam_analyzer.add_keywords_from_text(msg.reply_to_message.text)
            if command == '/ban':
                bot.ban_chat_member(msg.chat.id, user_to_act.id)
                bot.delete_message(msg.chat.id, msg.reply_to_message.message_id)
                bot.send_message(msg.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telebot.util.escape(user_to_act.full_name)} –∑–∞–±–∞–Ω–µ–Ω. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ñ–∏–ª—å—Ç—Ä.")
            else: # /spam
                spam_analyzer.handle_spam_detection(msg.reply_to_message, initiated_by_admin=True)
            bot.delete_message(msg.chat.id, msg.message_id) # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}"); bot.reply_to(msg, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")

@bot.message_handler(func=lambda msg: msg.text == "üíπ –ö—É—Ä—Å")
def handle_price_request(msg):
    markup = types.InlineKeyboardMarkup(row_width=3).add(*[types.InlineKeyboardButton(t, callback_data=f"price_{t}") for t in Config.POPULAR_TICKERS])
    markup.add(types.InlineKeyboardButton("‚û°Ô∏è –î—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞", callback_data="price_other"))
    bot.send_message(msg.chat.id, "–ö—É—Ä—Å –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('price_'))
def handle_price_callback(call):
    bot.answer_callback_query(call.id)
    try: bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    except Exception: pass
    
    action = call.data.split('_')[1]
    if action == "other":
        sent = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: Aleo, XRP):", reply_markup=types.ForceReply(selective=True))
        bot.register_next_step_handler(sent, process_price_step)
    else:
        bot.send_chat_action(call.message.chat.id, 'typing')
        price_data, asic_suggestions = api.get_crypto_price(action)
        if price_data:
            text = f"üíπ –ö—É—Ä—Å {price_data['ticker'].upper()}/USD: <b>${price_data['price']:,.4f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {price_data['source']})</i>"
            if asic_suggestions:
                text += asic_suggestions
        else:
            text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {action.upper()}."
        send_message_with_partner_button(call.message.chat.id, text)

def process_price_step(msg):
    if not msg.text or len(msg.text) > 20: 
        return bot.send_message(msg.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.", reply_markup=get_main_keyboard())
    
    bot.send_chat_action(msg.chat.id, 'typing')
    price_data, asic_suggestions = api.get_crypto_price(msg.text)
    
    if price_data:
        text = f"üíπ –ö—É—Ä—Å {price_data['ticker'].upper()}/USD: <b>${price_data['price']:,.4f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {price_data['source']})</i>"
        if asic_suggestions:
            text += asic_suggestions
    else:
        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {msg.text.upper()}."
        
    send_message_with_partner_button(msg.chat.id, text)
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –¢–æ–ø ASIC")
def handle_asics_text(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    asics = api.get_top_asics(force_update=True)
    if not asics: return send_message_with_partner_button(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± ASIC.")
    
    asics_to_show = asics[:12]
    rows = [f"{a.get('name', 'N/A'):<22.21}| {a.get('hashrate', 'N/A'):<18.17}| {a.get('power_watts', 0):<5.0f}| ${a.get('daily_revenue', 0):<10.2f}" for a in asics_to_show]
    response = (f"<pre>–ú–æ–¥–µ–ª—å                  | H/s               | P, W | –î–æ—Ö–æ–¥/–¥–µ–Ω—å\n"
                f"------------------------|-------------------|------|-----------\n" + "\n".join(rows) + "</pre>")
    send_message_with_partner_button(msg.chat.id, response)

@bot.message_handler(func=lambda msg: msg.text == "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
def handle_calculator_request(msg):
    sent = bot.send_message(msg.chat.id, "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:", reply_markup=types.ForceReply(selective=True))
    bot.register_next_step_handler(sent, process_calculator_step)

def process_calculator_step(msg):
    try: cost_rub = float(msg.text.replace(',', '.'))
    except (ValueError, TypeError):
        bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.5).", reply_markup=get_main_keyboard()); return

    rate, is_fallback = api.get_usd_rub_rate()
    asics_data = api.get_top_asics()
    if not asics_data:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ASIC.", reply_markup=get_main_keyboard()); return

    cost_usd = cost_rub / rate
    result = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>"]
    if is_fallback: result.append(f"<i>(–í–Ω–∏–º–∞–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å: 1$‚âà{rate:.2f}‚ÇΩ)</i>")
    result.append("")
    for asic in asics_data[:12]:
        daily_cost = (asic.get('power_watts', 0) / 1000) * 24 * cost_usd
        profit = asic.get('daily_revenue', 0) - daily_cost
        result.append(f"<b>{telebot.util.escape(asic['name'])}</b>\n  –ü—Ä–æ—Ñ–∏—Ç: <b>${profit:.2f}/–¥–µ–Ω—å</b>")
    
    send_message_with_partner_button(msg.chat.id, "\n\n".join(result))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda msg: msg.text in ["üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üì° –°—Ç–∞—Ç—É—Å BTC", "üéì –°–ª–æ–≤–æ –¥–Ω—è"])
def handle_info_buttons(msg):
    bot.send_chat_action(msg.chat.id, 'typing')
    text = ""
    if msg.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏": text = api.get_crypto_news()
    elif msg.text == "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞": 
        image, text = api.get_fear_and_greed_index()
        if image: return send_photo_with_partner_button(msg.chat.id, image, text)
    elif msg.text == "‚è≥ –•–∞–ª–≤–∏–Ω–≥": text = api.get_halving_info()
    elif msg.text == "üì° –°—Ç–∞—Ç—É—Å BTC": text = api.get_btc_network_status()
    elif msg.text == "üéì –°–ª–æ–≤–æ –¥–Ω—è":
        term = random.choice(Config.CRYPTO_TERMS)
        explanation = api.ask_gpt(f"–û–±—ä—è—Å–Ω–∏ —Ç–µ—Ä–º–∏–Ω '{term}' –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).", "gpt-4o-mini")
        text = f"üéì <b>–°–ª–æ–≤–æ –¥–Ω—è: {term}</b>\n\n{explanation}"
    
    if text: send_message_with_partner_button(msg.chat.id, text)
    else: bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(commands=['gas'])
def handle_gas(msg): bot.send_chat_action(msg.chat.id, 'typing'); send_message_with_partner_button(msg.chat.id, api.get_eth_gas_price())

@bot.message_handler(func=lambda msg: msg.text == "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
def handle_quiz(msg):
    questions = api.get_new_quiz_questions()
    if not questions: return bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    user_quiz_states[msg.from_user.id] = {'score': 0, 'question_index': 0, 'questions': questions}
    bot.send_message(msg.chat.id, f"üî• <b>–ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∏–ø—Ç–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b>\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=types.ReplyKeyboardRemove())
    send_quiz_question(msg.chat.id, msg.from_user.id)

def send_quiz_question(chat_id, user_id):
    state = user_quiz_states.get(user_id)
    if not state or state['question_index'] >= len(state['questions']):
        if state:
            score = state.get('score', 0)
            reward_text = game.apply_quiz_reward(user_id) if score >= Config.QUIZ_MIN_CORRECT_FOR_REWARD else ""
            bot.send_message(chat_id, f"üéâ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score} –∏–∑ {len(state['questions'])}</b>.{reward_text}", reply_markup=get_main_keyboard())
            user_quiz_states.pop(user_id, None)
        return
    
    q_data = state['questions'][state['question_index']]
    markup = types.InlineKeyboardMarkup(row_width=2).add(*[types.InlineKeyboardButton(opt, callback_data=f"quiz_{state['question_index']}_{i}") for i, opt in enumerate(q_data['options'])])
    bot.send_message(chat_id, f"<b>–í–æ–ø—Ä–æ—Å {state['question_index'] + 1}:</b>\n{q_data['question']}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('quiz_'))
def handle_quiz_answer(call):
    user_id = call.from_user.id
    state = user_quiz_states.get(user_id)
    if not state: return bot.answer_callback_query(call.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
    
    _, q_index_str, answer_index_str = call.data.split('_')
    q_index, answer_index = int(q_index_str), int(answer_index_str)

    if q_index != state.get('question_index'): return bot.answer_callback_query(call.id)
    
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id)
    q_data = state['questions'][q_index]
    if answer_index == q_data['correct_index']:
        state['score'] += 1; bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(call.message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{q_data['options'][q_data['correct_index']]}</b>")
    
    state['question_index'] += 1
    bot.answer_callback_query(call.id)
    time.sleep(1.5); send_quiz_question(call.message.chat.id, user_id)

@bot.message_handler(func=lambda msg: msg.text == "üïπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ú–∞–π–Ω–∏–Ω–≥")
def handle_game_hub(msg):
    text, markup = get_game_menu(msg.from_user.id, msg.from_user.full_name)
    bot.send_message(msg.chat.id, text, reply_markup=markup)

def get_game_menu(user_id, user_name):
    rig_info_text, rig_info_markup = game.get_rig_info(user_id, user_name)
    if rig_info_markup: return rig_info_text, rig_info_markup
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üí∞ –°–æ–±—Ä–∞—Ç—å", callback_data="game_collect"), types.InlineKeyboardButton("üöÄ –£–ª—É—á—à–∏—Ç—å", callback_data="game_upgrade"))
    markup.add(types.InlineKeyboardButton("üèÜ –¢–æ–ø –ú–∞–π–Ω–µ—Ä–æ–≤", callback_data="game_top"), types.InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data="game_shop"))
    markup.add(types.InlineKeyboardButton("üíµ –í—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∞–ª", callback_data="game_withdraw"), types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="game_rig"))
    return rig_info_text, markup

@bot.callback_query_handler(func=lambda call: call.data.startswith('game_'))
def handle_game_callbacks(call):
    action = call.data.split('_')[1]
    user_id, user_name, msg = call.from_user.id, call.from_user.full_name, call.message
    response_text = ""
    
    if action == 'collect': response_text = game.collect_reward(user_id)
    elif action == 'upgrade': response_text = game.upgrade_rig(user_id)
    elif action == 'top': bot.answer_callback_query(call.id); return send_message_with_partner_button(msg.chat.id, game.get_top_miners())
    elif action == 'withdraw': bot.answer_callback_query(call.id); return send_message_with_partner_button(msg.chat.id, random.choice(Config.PARTNER_AD_TEXT_OPTIONS))
    elif action == 'shop':
        markup = types.InlineKeyboardMarkup(row_width=1)
        for key, item in Config.SHOP_ITEMS.items():
            markup.add(types.InlineKeyboardButton(f"{item['name']} ({item['cost']:.4f} BTC)", callback_data=f"game_buy_{key}"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="game_rig"))
        bot.edit_message_text("üõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:</b>", msg.chat.id, msg.message_id, reply_markup=markup); return bot.answer_callback_query(call.id)
    elif action == 'buy': response_text = game.buy_item(user_id, call.data.split('_')[2])

    bot.answer_callback_query(call.id)
    text, markup = get_game_menu(user_id, user_name)
    final_text = f"{response_text}\n\n{text}" if response_text else text
    try: bot.edit_message_text(final_text, msg.chat.id, msg.message_id, reply_markup=markup)
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" not in str(e): logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('start_rig_'))
def handle_start_rig_callback(call):
    user_id, user_name = call.from_user.id, call.from_user.full_name
    starter_asics = temp_user_choices.get(user_id)
    if not starter_asics: return bot.answer_callback_query(call.id, "–í—ã–±–æ—Ä —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    
    try:
        asic_index = int(call.data.split('_')[-1])
        selected_asic = starter_asics[asic_index]
        creation_message = game.create_rig(user_id, user_name, selected_asic)
        bot.answer_callback_query(call.id, "–§–µ—Ä–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è...")
        
        text, markup = get_game_menu(user_id, user_name)
        bot.edit_message_text(f"{creation_message}\n\n{text}", call.message.chat.id, call.message.message_id, reply_markup=markup)
        del temp_user_choices[user_id]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–µ—Ä–º—ã: {e}"); bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('not_spam_'))
def handle_not_spam_callback(call):
    _, user_id_str, chat_id_str = call.data.split('_')
    user_id, original_chat_id = int(user_id_str), int(chat_id_str)
    
    if not is_admin(original_chat_id, call.from_user.id): return bot.answer_callback_query(call.id, "–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.", show_alert=True)

    profile = spam_analyzer.user_profiles.get(str(user_id))
    if profile: profile['spam_count'] = max(0, profile.get('spam_count', 0) - 1)
    
    try:
        original_text = call.message.html_text.split("–¢–µ–∫—Å—Ç:\n")[1].split("\n\n<i>")[0].replace("<blockquote>", "").replace("</blockquote>", "").strip()
        user_info = spam_analyzer.user_profiles.get(str(user_id), {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'})
        repost_text = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{telebot.util.escape(user_info['name'])}</b> –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n\n<blockquote>{telebot.util.escape(original_text)}</blockquote>"
        bot.send_message(original_chat_id, repost_text)
        bot.edit_message_text(call.message.html_text + f"\n\n<b>‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:</b> {call.from_user.full_name}", call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"); bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")

@bot.message_handler(content_types=['text', 'caption'], func=lambda msg: not msg.text.startswith('/'))
def handle_non_command_text(msg):
    spam_analyzer.process_message(msg)
    is_reply_to_bot = msg.reply_to_message and msg.reply_to_message.from_user.id == bot.get_me().id
    is_group_mention = msg.chat.type in ('group', 'supergroup') and f"@{bot.get_me().username}" in msg.text
    is_private_chat = msg.chat.type == 'private'
    if not (is_reply_to_bot or is_group_mention or is_private_chat): return

    bot.send_chat_action(msg.chat.id, 'typing')
    price_data, asic_suggestions = api.get_crypto_price(msg.text)
    if price_data:
        text = f"üíπ –ö—É—Ä—Å {price_data['ticker'].upper()}/USD: <b>${price_data['price']:,.4f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {price_data['source']})</i>"
        if asic_suggestions: text += asic_suggestions
        send_message_with_partner_button(msg.chat.id, text)
    else:
        response = api.ask_gpt(msg.text)
        bot.reply_to(msg, response)
        
@bot.message_handler(content_types=['new_chat_members'])
def handle_new_chat_members(msg):
    for user in msg.new_chat_members:
        spam_analyzer.process_message(msg)
        bot.send_message(msg.chat.id, f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n\n–Ø –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",)

# ========================================================================================
# 6. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json': bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))]); return '', 200
    return 'Forbidden', 403

@app.route("/")
def index(): return "Bot is running!"

def run_scheduler():
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    schedule.every(4).hours.do(auto_send_news)
    schedule.every(1).hours.do(lambda: api.get_top_asics(force_update=True))
    schedule.every(5).minutes.do(game.save_data)
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)
            time.sleep(60)

def auto_send_news():
    try:
        logger.info("–ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –ó–∞–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")
        if Config.NEWS_CHAT_ID:
            news_text = api.get_crypto_news()
            if "–ù–µ —É–¥–∞–ª–æ—Å—å" not in news_text and "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" not in news_text:
                send_message_with_partner_button(Config.NEWS_CHAT_ID, news_text)
                logger.info("–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∏: {news_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ auto_send_news: {e}", exc_info=True)

def auto_check_status():
    if not Config.ADMIN_CHAT_ID: return
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º...")
    errors = []
    if not api.get_usd_rub_rate()[0]: errors.append("API –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
    if openai_client and "[‚ùå" in api.ask_gpt("–¢–µ—Å—Ç"): errors.append("API OpenAI")
    if not api.get_top_asics(force_update=True): errors.append("–ü–∞—Ä—Å–∏–Ω–≥ ASIC")
    status = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ." if not errors else f"‚ö†Ô∏è –°–±–æ–π –≤: {', '.join(errors)}"
    try: bot.send_message(Config.ADMIN_CHAT_ID, f"<b>–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ({datetime.now().strftime('%H:%M')})</b>\n{status}")
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    if Config.WEBHOOK_URL:
        logger.info(f"–†–µ–∂–∏–º: –≤–µ–±—Ö—É–∫. URL: {Config.WEBHOOK_URL}"); bot.remove_webhook(); time.sleep(0.5)
        bot.set_webhook(url=f"{Config.WEBHOOK_URL.rstrip('/')}/webhook")
        app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 8080)))
    else:
        logger.info("–†–µ–∂–∏–º: long-polling."); bot.remove_webhook(); bot.polling(none_stop=True)
