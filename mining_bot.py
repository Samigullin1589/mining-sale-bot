import os
import openai
import requests
from flask import Flask, request
import telebot

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CRYPTO_API_KEY = os.getenv("CRYPTO_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
ADMINS = [7473992492, 5860994210]
CHAT_ID = -1002408729915

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
ban_phrases = ["casino", "–∫–∞–∑–∏–Ω–æ", "easy money", "profit every hour"]
custom_ban_list = []
warned_users = {}

# –•–µ–Ω–¥–ª–µ—Ä –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.lower()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω-—Ñ—Ä–∞–∑—ã
    if any(bad in text for bad in ban_phrases + custom_ban_list):
        warned_users[user_id] = warned_users.get(user_id, 0) + 1

        if warned_users[user_id] >= 3:
            bot.ban_chat_member(CHAT_ID, user_id)
            bot.send_message(CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º")
        else:
            bot.send_message(CHAT_ID, f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. {3 - warned_users[user_id]} –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return

    # –ö–æ–º–∞–Ω–¥–∞ /–±–∞–Ω (–æ–±—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑–∞–º)
    if text.startswith("/–±–∞–Ω") and message.reply_to_message:
        reply_text = message.reply_to_message.text.lower()
        custom_ban_list.append(reply_text)
        bot.send_message(CHAT_ID, f"–§—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö")
        return

    # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT
    prompt = (
        "–¢—ã ‚Äî –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."
        "–†–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ Antminer, Whatsminer, –¥–æ—Å—Ç–∞–≤–∫–µ, ROI, —Ä–µ–º–æ–Ω—Ç–µ, –ø–æ—Å—Ç–∞–≤–∫–∞—Ö."
    )

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": message.text},
            ],
            temperature=0.4,
            max_tokens=1000,
        )
        reply = completion.choices[0].message.content.strip()
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è GPT –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ï–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç Telegram
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'ok'

# –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    s = bot.set_webhook(url=WEBHOOK_URL)
    return f'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {s}'

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
@app.route('/post_news', methods=['GET'])
def post_news():
    url = "https://cryptopanic.com/api/v1/posts/?auth_token=" + CRYPTO_API_KEY + "&kind=news"
    try:
        response = requests.get(url)
        news = response.json().get("results", [])[:3]

        if news:
            msg = "üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É:\n\n"
            for item in news:
                msg += f"{item['title']}\n{item['url']}\n\n"
            msg += "\nü§ù –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ª–∏—á–Ω–æ.\nüîó https://app.leadteh.ru/w/dTeKr"
            bot.send_message(CHAT_ID, msg)
            return '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
        else:
            return '–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π'

    except Exception as e:
        return f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)
