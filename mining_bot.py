import os
import time
import threading
import logging
from flask import Flask, request
import requests
import telebot
from telebot import types
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CRYPTO_API_KEY = os.getenv('CRYPTO_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
ADMIN_IDS = [7473992492, 5860994210] # –≤–∞—à–∏ id –∞–¥–º–∏–Ω–æ–≤
CHAT_ID = -1002408729915             # id –≥—Ä—É–ø–ø—ã

REKLAMA_LINK = "https://app.leadteh.ru/w/dTeKr"
NEWS_INTERVAL_HOURS = 3

bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
stats = {
    "messages": [],
    "unique_users": set(),
    "news_posts": [],
    "bot_replies": 0,
    "ads_shown": 0
}

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π CryptoPanic ---
def fetch_cryptopanic_news():
    url = f'https://cryptopanic.com/api/v1/posts/?auth_token={CRYPTO_API_KEY}&public=true&currencies=BTC,ETH,USDT,USDC'
    try:
        response = requests.get(url, timeout=7)
        if response.status_code == 200:
            data = response.json()
            if 'results' in data and len(data['results']) > 0:
                news = data['results'][0]
                title = news.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                url = news.get('url', '')
                return f'üì∞ {title}\n{url}'
            else:
                return '‚ùå –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.'
        else:
            logger.error(f"CryptoPanic error {response.status_code}: {response.text}")
            return f"‚ùóÔ∏è–û—à–∏–±–∫–∞ CryptoPanic {response.status_code}"
    except Exception as e:
        logger.error(f"CryptoPanic Exception: {e}")
        return f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}"

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ä–µ–∫–ª–∞–º–æ–π ---
def send_news_with_ad():
    news_text = fetch_cryptopanic_news()
    ad_text = f"\n\nüî• –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ? –°–ø–µ—Ü—É—Å–ª–æ–≤–∏—è —Ç—É—Ç:\n{REKLAMA_LINK}"
    try:
        bot.send_message(CHAT_ID, f"{news_text}{ad_text}", disable_web_page_preview=True)
        stats['news_posts'].append(datetime.now())
        stats['ads_shown'] += 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ ---
def schedule_news():
    def job():
        while True:
            now = datetime.now()
            if now.minute == 0 and now.hour % NEWS_INTERVAL_HOURS == 0:
                send_news_with_ad()
            time.sleep(60)
    t = threading.Thread(target=job, daemon=True)
    t.start()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç—É ---
def get_stats():
    today = datetime.now().date()
    week_ago = today - timedelta(days=6)
    today_msgs = [m for m in stats['messages'] if m[1].date() == today]
    week_msgs = [m for m in stats['messages'] if week_ago <= m[1].date() <= today]
    unique_today = len(set(m[0] for m in today_msgs))
    unique_week = len(set(m[0] for m in week_msgs))
    text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–°–µ–≥–æ–¥–Ω—è —Å–æ–æ–±—â–µ–Ω–∏–π: {len(today_msgs)}\n"
            f"–ó–∞ –Ω–µ–¥–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–π: {len(week_msgs)}\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {unique_today}\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {unique_week}\n"
            f"–ü–æ–∫–∞–∑–æ–≤ —Ä–µ–∫–ª–∞–º—ã: {stats['ads_shown']}\n"
            f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {stats['bot_replies']}\n"
            f"–ü–æ—Å—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(stats['news_posts'])}")
    return text

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /news –∏ /–Ω–æ–≤–æ—Å—Ç–∏ ---
@bot.message_handler(commands=['news', '–Ω–æ–≤–æ—Å—Ç–∏'])
def news_command(message):
    news_text = fetch_cryptopanic_news()
    ad_text = f"\n\nüî• –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ? –°–ø–µ—Ü—É—Å–ª–æ–≤–∏—è —Ç—É—Ç:\n{REKLAMA_LINK}"
    bot.send_message(message.chat.id, f"{news_text}{ad_text}", disable_web_page_preview=True)
    stats['bot_replies'] += 1

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ---
@bot.message_handler(commands=['stats', '—Å—Ç–∞—Ç–∞'])
def stats_command(message):
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(message.chat.id, get_stats())
    else:
        bot.reply_to(message, "‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

# --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤, –º–æ–¥–µ—Ä–∞—Ü–∏–∏, —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    # –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats['messages'].append((message.from_user.id, datetime.now()))
    stats['unique_users'].add(message.from_user.id)

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –ø—Ä–∏–º–µ—Ä
    if any(word in message.text.lower() for word in ['–º–∞–π–Ω–∏–Ω–≥', '–æ–±–∑–æ—Ä', '–≤–∞–ª—é—Ç–∞', '–≥–¥–µ –∫—É–ø–∏—Ç—å']):
        bot.reply_to(message, "–ó–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫–æ–π –º–∞–π–Ω–µ—Ä –∏–ª–∏ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
        stats['bot_replies'] += 1

    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã (–ø—Ä–∏–º–µ—Ä)
    if "–∫–∞–∑–∏–Ω–æ" in message.text.lower() or "777" in message.text:
        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, "‚õîÔ∏è –†–µ–∫–ª–∞–º–∞ –∫–∞–∑–∏–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- Webhook endpoint –¥–ª—è Telegram ---
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid request', 403

# --- –°—Ç–∞—Ä—Ç ---
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if WEBHOOK_URL:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL)
    schedule_news()
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))
