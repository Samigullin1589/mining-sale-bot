# -*- coding: utf-8 -*-
# ==============================================================================
# –†–∞–∑–¥–µ–ª 1: –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
# ==============================================================================
import asyncio
import logging
import os
import random
import re
from dataclasses import dataclass
from typing import List, Optional, Dict

import aiohttp
import bleach
import feedparser
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from cachetools import TTLCache, cached
from fuzzywuzzy import fuzz, process
from openai import AsyncOpenAI

# ==============================================================================
# –†–∞–∑–¥–µ–ª 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ==============================================================================

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CMC_API_KEY = os.getenv("CMC_API_KEY")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
ASIC_SOURCES = {'asicminervalue': 'https://www.asicminervalue.com/'}
COINGECKO_API_URL = "https://api.coingecko.com/api/v3"
MINERSTAT_COINS_URL = "https://api.minerstat.com/v2/coins"
FEAR_AND_GREED_API_URL = "https://pro-api.coinmarketcap.com/v3/fear-and-greed/historical"

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π ---
NEWS_RSS_FEEDS = [
    "https://cointelegraph.com/rss/tag/russia", "https://forklog.com/feed",
    "https://www.rbc.ru/crypto/feed", "https://bits.media/rss/",
]
NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")
NEWS_INTERVAL_HOURS = 3

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ---
asic_cache = TTLCache(maxsize=1, ttl=3600)
crypto_price_cache = TTLCache(maxsize=500, ttl=300)
fear_greed_cache = TTLCache(maxsize=1, ttl=14400)
coin_list_cache = TTLCache(maxsize=1, ttl=86400)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="UTC")
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# ==============================================================================
# –†–∞–∑–¥–µ–ª 3: –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ==============================================================================
class Form(StatesGroup):
    waiting_for_ticker = State()

@dataclass
class AsicMiner:
    name: str; algorithm: str; hashrate: str; power: int; profitability: float; source: str

@dataclass
class CryptoCoin:
    id: str; symbol: str; name: str; price: float
    algorithm: Optional[str] = None
    market_cap: Optional[int] = None

# ==============================================================================
# –†–∞–∑–¥–µ–ª 4: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ==============================================================================

def sanitize_html(text: str) -> str:
    if not text: return ""
    return bleach.clean(text, tags=[], attributes={}, strip=True).strip()

async def resilient_request(session: aiohttp.ClientSession, url: str, headers: Optional[Dict] = None, params: Optional[Dict] = None) -> Optional[Dict]:
    try:
        request_headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'}
        if headers: request_headers.update(headers)
        async with session.get(url, headers=request_headers, params=params, timeout=15) as response:
            response.raise_for_status()
            return await response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
    return None

def parse_power(power_str: str) -> int:
    return int(re.sub(r'[^0-9]', '', power_str)) if power_str else 0

def parse_profitability(profit_str: str) -> float:
    cleaned_str = re.sub(r'[^\d.]', '', profit_str)
    return float(cleaned_str) if cleaned_str else 0.0

# ==============================================================================
# –†–∞–∑–¥–µ–ª 5: –ú–æ–¥—É–ª–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
# ==============================================================================

async def scrape_asicminervalue(session: aiohttp.ClientSession) -> List[AsicMiner]:
    miners: List[AsicMiner] = []
    try:
        async with session.get(ASIC_SOURCES['asicminervalue'], timeout=20) as response:
            html = await response.text()
        soup = BeautifulSoup(html, 'lxml')
        table = soup.find('table', {'class': 'table-hover'})
        if not table: return miners
        for row in table.find('tbody').find_all('tr'):
            cols = row.find_all('td')
            if len(cols) > 6:
                name, hashrate, power, algo, prof = cols[0].text, cols[2].text, cols[3].text, cols[5].text, cols[6].text
                profitability = parse_profitability(prof)
                if profitability > 0:
                    miners.append(AsicMiner(name.strip(), algo.strip(), hashrate.strip(), parse_power(power), profitability, 'AsicMinerValue'))
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ AsicMinerValue: {e}", exc_info=True)
    return miners

@cached(asic_cache)
async def get_profitable_asics() -> List[AsicMiner]:
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ ASIC-–º–∞–π–Ω–µ—Ä–æ–≤...")
    async with aiohttp.ClientSession() as session:
        miners = await scrape_asicminervalue(session)
    if not miners:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC.")
        return []
    sorted_miners = sorted(miners, key=lambda m: m.profitability, reverse=True)
    logger.info(f"–ö—ç—à ASIC-–º–∞–π–Ω–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(sorted_miners)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
    return sorted_miners

@cached(coin_list_cache)
async def get_coin_list_with_algorithms() -> Dict[str, str]:
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏...")
    coin_algo_map = {}
    async with aiohttp.ClientSession() as session:
        data = await resilient_request(session, MINERSTAT_COINS_URL)
        if data:
            for coin_data in data:
                symbol, algorithm = coin_data.get('coin'), coin_data.get('algorithm')
                if symbol and algorithm: coin_algo_map[symbol.upper()] = algorithm
    logger.info(f"–ö—ç—à —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coin_algo_map)} –º–æ–Ω–µ—Ç.")
    return coin_algo_map

@cached(crypto_price_cache)
async def get_crypto_price(query: str) -> Optional[CryptoCoin]:
    query = query.lower().strip()
    if not query: return None
    async with aiohttp.ClientSession() as session:
        search_data = await resilient_request(session, f"{COINGECKO_API_URL}/search", params={'query': query})
        if not (search_data and search_data.get('coins')): return None
        coin_id = search_data['coins'][0].get('id')
        if not coin_id: return None
        market_data_list = await resilient_request(session, f"{COINGECKO_API_URL}/coins/markets", params={'vs_currency': 'usd', 'ids': coin_id})
        if not market_data_list: return None
        md = market_data_list[0]
        algo_map = await get_coin_list_with_algorithms()
        symbol = md.get('symbol', '').upper()
        return CryptoCoin(md.get('id'), symbol, md.get('name'), md.get('current_price', 0.0), algo_map.get(symbol), md.get('market_cap', 0))

async def get_halving_info() -> str:
    urls = ["https://mempool.space/api/blocks/tip/height", "https://blockchain.info/q/getblockcount"]
    current_block = None
    async with aiohttp.ClientSession() as s:
        for url in urls:
            try:
                async with s.get(url, timeout=10) as r:
                    if r.status == 200 and (text := await r.text()).isdigit():
                        current_block = int(text); break
            except Exception: continue
    if not current_block: return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ]"
    try:
        HALVING_INTERVAL = 210000
        blocks_left = ((current_block // HALVING_INTERVAL) + 1) * HALVING_INTERVAL - current_block
        days, rem_min = divmod(blocks_left * 10, 1440)
        hours, _ = divmod(rem_min, 60)
        return (f"‚è≥ **–î–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin –æ—Å—Ç–∞–ª–æ—Å—å:**\n\n"
                f"üóì **–î–Ω–µ–π:** `{days}` | ‚è∞ **–ß–∞—Å–æ–≤:** `{hours}`\n"
                f"üß± **–ë–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞:** `{blocks_left:,}`")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ö–∞–ª–≤–∏–Ω–≥–∞: {e}"); return "[‚ùå –û—à–∏–±–∫–∞]"

async def fetch_latest_news() -> List[Dict]:
    all_news = []
    loop = asyncio.get_running_loop()
    for url in NEWS_RSS_FEEDS:
        try:
            feed = await loop.run_in_executor(None, feedparser.parse, url)
            for entry in feed.entries:
                all_news.append({'title': entry.title, 'link': entry.link, 'published': getattr(entry, 'published_parsed', None)})
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å RSS-–ª–µ–Ω—Ç—É {url}: {e}")
    all_news.sort(key=lambda x: x['published'] or (0,)*6, reverse=True)
    seen_titles = set()
    return [item for item in all_news if item['title'].lower() not in seen_titles and not seen_titles.add(item['title'].lower())][:5]

# ==============================================================================
# –†–∞–∑–¥–µ–ª 6: –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
# ==============================================================================

async def show_asics(message: Message):
    await message.answer("üîç –ò—â—É —Å–∞–º—ã–µ –¥–æ—Ö–æ–¥–Ω—ã–µ ASIC-–º–∞–π–Ω–µ—Ä—ã...")
    asics = await get_profitable_asics()
    if not asics:
        return await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–µ—Ä–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    response_text = "üèÜ **–¢–æ–ø-10 —Å–∞–º—ã—Ö –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC-–º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
    for i, miner in enumerate(asics[:10]):
        response_text += (f"**{i+1}. {sanitize_html(miner.name)}**\n"
                          f"   - –ê–ª–≥–æ—Ä–∏—Ç–º: `{miner.algorithm}`\n"
                          f"   - –•–µ—à—Ä–µ–π—Ç: `{miner.hashrate}`\n"
                          f"   - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: `{miner.power} W`\n"
                          f"   - **–î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: `${miner.profitability:.2f}`**\n\n")
    await message.answer(response_text, parse_mode="Markdown")

async def show_price_prompt(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_ticker)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `BTC`):", parse_mode="Markdown")

async def show_fear_greed(message: Message):
    await message.answer("üßê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞...")
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –ø–ª–∞—Ç–Ω–æ–≥–æ API. –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞.
    await message.answer("üòï –§—É–Ω–∫—Ü–∏—è '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

async def show_news(message: Message):
    await message.answer("üì∞ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    latest_news = await fetch_latest_news()
    if not latest_news:
        return await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    response_text = "üì∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:**\n\n"
    for i, news_item in enumerate(latest_news):
        title = sanitize_html(news_item['title']).replace('[', '(').replace(']', ')')
        response_text += f"{i+1}. [{title}]({news_item['link']})\n"
    await message.answer(response_text, parse_mode="Markdown", disable_web_page_preview=True)

async def show_halving_info(message: Message):
    await message.answer("‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤—Ä–µ–º—è –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞...")
    text = await get_halving_info()
    await message.answer(text, parse_mode="Markdown")

async def start_quiz(message: Message):
     await message.answer("üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

async def process_crypto_query(message: Message, state: FSMContext):
    await state.clear()
    query = message.text.strip()
    await message.answer(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ '{query}'...")
    coin = await get_crypto_price(query)
    if not coin:
        return await message.answer(f"üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'.\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ä–Ω—ã.")
    response_text = f"**{coin.name} ({coin.symbol.upper()})**\n\nüí∞ **–¶–µ–Ω–∞:** ${coin.price:,.4f}\n"
    if coin.market_cap: response_text += f"üìä **–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:** ${coin.market_cap:,.0f}\n"
    if coin.algorithm:
        response_text += f"‚öôÔ∏è **–ê–ª–≥–æ—Ä–∏—Ç–º:** `{coin.algorithm}`\n\n"
        all_asics = await get_profitable_asics()
        norm_algo = coin.algorithm.lower().replace('-', '').replace(' ', '')
        rel_asics = [a for a in all_asics if a.algorithm.lower().replace('-', '').replace(' ', '') == norm_algo]
        if rel_asics:
            response_text += "‚õèÔ∏è **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:**\n"
            for asic in rel_asics[:3]:
                response_text += f"- {sanitize_html(asic.name)} (–î–æ—Ö–æ–¥: ${asic.profitability:.2f}/–¥–µ–Ω—å)\n"
        else:
            response_text += "‚õèÔ∏è –ü–æ–¥—Ö–æ–¥—è—â–µ–µ ASIC-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        response_text += "‚õèÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω."
    await message.answer(response_text, parse_mode="Markdown")

# ==============================================================================
# –†–∞–∑–¥–µ–ª 7: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤ Telegram
# ==============================================================================

COMMAND_MAP = { "—Ç–æ–ø asic": show_asics, "–∫—É—Ä—Å": show_price_prompt, "–∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞": show_fear_greed, "–Ω–æ–≤–æ—Å—Ç–∏": show_news, "—Ö–∞–ª–≤–∏–Ω–≥": show_halving_info }

def get_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üí∞ –¢–æ–ø ASIC", callback_data="cb_asics"); builder.button(text="üìà –ö—É—Ä—Å", callback_data="cb_price")
    # builder.button(text="üò® –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", callback_data="cb_fear_greed") # –û—Ç–∫–ª—é—á–µ–Ω–æ
    builder.button(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="cb_news"); builder.button(text="‚è≥ –•–∞–ª–≤–∏–Ω–≥", callback_data="cb_halving")
    builder.adjust(2); return builder.as_markup()

@dp.message(CommandStart())
async def send_welcome(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.", reply_markup=get_main_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ---
@dp.callback_query(Text("cb_asics"))
async def cb_asics(cb: CallbackQuery, state: FSMContext): await show_asics(cb.message); await cb.answer()
@dp.callback_query(Text("cb_price"))
async def cb_price(cb: CallbackQuery, state: FSMContext): await show_price_prompt(cb.message, state); await cb.answer()
@dp.callback_query(Text("cb_fear_greed"))
async def cb_fear(cb: CallbackQuery, state: FSMContext): await show_fear_greed(cb.message); await cb.answer()
@dp.callback_query(Text("cb_news"))
async def cb_news(cb: CallbackQuery, state: FSMContext): await show_news(cb.message); await cb.answer()
@dp.callback_query(Text("cb_halving"))
async def cb_halving(cb: CallbackQuery, state: FSMContext): await show_halving_info(cb.message); await cb.answer()

# --- –£–º–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(Form.waiting_for_ticker)
async def ticker_entered(message: Message, state: FSMContext):
    await process_crypto_query(message, state)

@dp.message()
async def message_router(message: Message, state: FSMContext):
    clean_text = message.text.lower().strip()
    # –ò—â–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    for command_text, handler_func in COMMAND_MAP.items():
        if command_text in clean_text:
            await handler_func(message)
            return
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –∫—É—Ä—Å
    await process_crypto_query(message, state)

# ==============================================================================
# –†–∞–∑–¥–µ–ª 8: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ==============================================================================
async def main():
    if not TELEGRAM_BOT_TOKEN:
        return logger.critical("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook(drop_pending_updates=True)

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long-polling...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

