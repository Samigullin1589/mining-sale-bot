# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ========================================================================================
import os
import telebot
import requests
import time
import threading
import schedule
from flask import Flask, request
import gspread
from google.oauth2.service_account import Credentials
from telebot import types
from openai import OpenAI
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import io
import re
import random

# --- –ö–ª—é—á–∏ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) ---
BOT_TOKEN = os.environ.get("TG_BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
NEWSAPI_KEY = os.environ.get("CRYPTO_API_KEY") # CryptoPanic API Key
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

NEWS_CHAT_ID = os.environ.get("NEWS_CHAT_ID") # –ö–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID") # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤

GOOGLE_JSON_PATH = os.environ.get("GOOGLE_JSON", "sage-instrument.json")
SHEET_ID = os.environ.get("SHEET_ID")
SHEET_NAME = os.environ.get("SHEET_NAME", "–õ–∏—Å—Ç1")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –°—Å—ã–ª–∫–∏ ---
PARTNER_URL = "https://app.leadteh.ru/w/dTeKr"
PARTNER_BUTTON_TEXT_OPTIONS = [
    "üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫—ç—à ---
if not BOT_TOKEN:
    raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
app = Flask(__name__)
openai_client = OpenAI(api_key=OPENAI_API_KEY)

pending_weather_requests = {}
asic_cache = {"data": [], "timestamp": None}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –≤–∞–ª—é—Ç
CURRENCY_MAP = {
    '–¥–æ–ª–ª–∞—Ä': 'USD', 'usd': 'USD', '$': 'USD',
    '–µ–≤—Ä–æ': 'EUR', 'eur': 'EUR', '‚Ç¨': 'EUR',
    '—Ä—É–±–ª—å': 'RUB', 'rub': 'RUB', '‚ÇΩ': 'RUB',
    '—é–∞–Ω—å': 'CNY', 'cny': 'CNY',
    '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', 'btc': 'BTC',
    '—ç—Ñ–∏—Ä': 'ETH', 'eth': 'ETH',
}

# ========================================================================================
# 2. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–ù–ï–®–ù–ò–ú–ò API –ò –°–ï–†–í–ò–°–ê–ú–ò
# ========================================================================================

def get_gsheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞."""
    try:
        creds = Credentials.from_service_account_file(GOOGLE_JSON_PATH, scopes=['https://www.googleapis.com/auth/spreadsheets'])
        gc = gspread.authorize(creds)
        return gc.open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        raise

def log_to_sheet(row_data: list):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É Google Sheets."""
    try:
        sheet = get_gsheet()
        sheet.append_row(row_data, value_input_option='USER_ENTERED')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

def get_crypto_price(coin_id="bitcoin", vs_currency="usd"):
    """
    –¢–†–û–ô–ù–û–ï –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å Binance, –ø—Ä–∏ –æ—à–∏–±–∫–µ -> KuCoin, –ø—Ä–∏ –æ—à–∏–±–∫–µ -> CoinGecko.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ü–µ–Ω–∞, –∏—Å—Ç–æ—á–Ω–∏–∫).
    """
    # –ü–æ–ø—ã—Ç–∫–∞ 1: Binance (–ø—É–±–ª–∏—á–Ω—ã–π API)
    try:
        symbol = "BTCUSDT" # Binance –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è BTC
        res = requests.get(f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}", timeout=5).json()
        if 'price' in res:
            return (float(res['price']), "Binance")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API Binance: {e}. –ü—Ä–æ–±—É—é KuCoin.")

    # –ü–æ–ø—ã—Ç–∫–∞ 2: KuCoin (–ø—É–±–ª–∏—á–Ω—ã–π API)
    try:
        symbol = "BTC-USDT" # KuCoin –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç
        res = requests.get(f"https://api.kucoin.com/api/v1/market/orderbook/level1?symbol={symbol}", timeout=5).json()
        if res.get('data') and res['data'].get('price'):
            return (float(res['data']['price']), "KuCoin")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API KuCoin: {e}. –ü—Ä–æ–±—É—é CoinGecko.")

    # –ü–æ–ø—ã—Ç–∫–∞ 3: CoinGecko (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π API)
    try:
        res = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies={vs_currency}", timeout=5).json()
        if coin_id in res and vs_currency in res[coin_id]:
            return (float(res[coin_id][vs_currency]), "CoinGecko")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API CoinGecko: {e}.")
    
    return (None, None)

def get_weather(city: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å wttr.in."""
    try:
        r = requests.get(f"https://wttr.in/{city}?format=j1").json()
        current = r["current_condition"][0]
        return (f"üåç {city.title()}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temp_C']}¬∞C\n‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {current['weatherDesc'][0]['value']}\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\nüí® –í–µ—Ç–µ—Ä: {current['windspeedKmph']} –∫–º/—á")
    except Exception as e:
        return f"[‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}]"

def get_currency_rate(base="USD", to="EUR"):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç —Å exchangerate.host."""
    try:
        res = requests.get(f"https://api.exchangerate.host/latest?base={base.upper()}&symbols={to.upper()}").json()
        rate = res['rates'][to.upper()]
        return f"üí± {base.upper()} ‚Üí {to.upper()} = {rate:.2f}"
    except Exception as e:
        return f"[‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}]"

def ask_gpt(prompt: str, model: str = "gpt-4o"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI GPT."""
    try:
        full_prompt = f"–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. {prompt}"
        res = openai_client.chat.completions.create(model=model, messages=[{"role": "user", "content": full_prompt}])
        return res.choices[0].message.content.strip()
    except Exception as e:
        return f"[‚ùå –û—à–∏–±–∫–∞ GPT: {e}]"

def get_top_asics():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-5 ASIC'–æ–≤ —Å asicminervalue.com, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à (1 —á–∞—Å)."""
    global asic_cache
    now = datetime.now()
    if asic_cache["data"] and asic_cache["timestamp"] and (now - asic_cache["timestamp"] < timedelta(hours=1)):
        return asic_cache["data"]

    try:
        r = requests.get("https://www.asicminervalue.com/miners/sha-256", timeout=15)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        updated_asics = [f"‚Ä¢ {tds[0].get_text(strip=True)}: {tds[1].get_text(strip=True)}, {tds[2].get_text(strip=True)}, –¥–æ—Ö–æ–¥ ~{tds[3].get_text(strip=True)}/–¥–µ–Ω—å" for tds in (row.find_all("td") for row in soup.select("table tbody tr")[:5])]
        asic_cache = {"data": updated_asics, "timestamp": now}
        return updated_asics
    except Exception as e:
        return [f"[‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ASIC: {e}]"]

def get_crypto_news(keywords: list = None):
    """–ü–æ–ª—É—á–∞–µ—Ç 3 –Ω–æ–≤–æ—Å—Ç–∏ —Å CryptoPanic, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
    try:
        params = {"auth_token": NEWSAPI_KEY, "public": "true"}
        params["currencies"] = ",".join(keywords).upper() if keywords else "BTC,ETH"
        r = requests.get("https://cryptopanic.com/api/v1/posts/", params=params).json()
        posts = r.get("results", [])[:3]
        if not posts: return "[üßê –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]"
        items = [f"üîπ {ask_gpt(f'–ü–µ—Ä–µ–≤–µ–¥–∏ –∏ —Å–æ–∫—Ä–∞—Ç–∏ –¥–æ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥–ª–∞–≤–Ω—É—é –º—ã—Å–ª—å —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {post['title']}', 'gpt-3.5-turbo')}\n[–ò—Å—Ç–æ—á–Ω–∏–∫]({post.get('url', '')})" for post in posts]
        return "\n\n".join(items) if items else "[ü§∑‚Äç‚ôÇÔ∏è –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç]"
    except Exception as e:
        return f"[‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}]"

# ========================================================================================
# 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –£–¢–ò–õ–ò–¢–´
# ========================================================================================

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("üíπ –ö—É—Ä—Å BTC")
    btn2 = types.KeyboardButton("‚öôÔ∏è –¢–æ–ø-5 ASIC")
    btn3 = types.KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏")
    btn4 = types.KeyboardButton("üå¶Ô∏è –ü–æ–≥–æ–¥–∞")
    markup.add(btn1, btn2, btn3, btn4)
    return markup

def parse_currency_pair(text: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä—É –≤–∞–ª—é—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—Ä–æ–¥–µ '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é'."""
    match = re.search(r'(\w+|\$|‚Ç¨|‚ÇΩ)\s+–∫\s+(\w+|\$|‚Ç¨|‚ÇΩ)', text.lower())
    if not match: return None
    base = CURRENCY_MAP.get(match.group(1))
    quote = CURRENCY_MAP.get(match.group(2))
    return (base, quote) if base and quote else None

def get_random_partner_button():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."""
    markup = types.InlineKeyboardMarkup()
    button_text = random.choice(PARTNER_BUTTON_TEXT_OPTIONS)
    markup.add(types.InlineKeyboardButton(button_text, url=PARTNER_URL))
    return markup

# ========================================================================================
# 4. –ó–ê–î–ê–ß–ò, –í–´–ü–û–õ–ù–Ø–ï–ú–´–ï –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ (SCHEDULE)
# ========================================================================================

def keep_alive():
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ "–∑–∞—Å—ã–ø–∞–ª–æ" –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ."""
    if WEBHOOK_URL:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL (–±–µ–∑ /webhook)
            base_url = WEBHOOK_URL.rsplit('/', 1)[0]
            requests.get(base_url)
            print(f"[{datetime.now()}] Keep-alive –ø–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {base_url}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ keep-alive –ø–∏–Ω–≥–∞: {e}")

def auto_send_news():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª."""
    if not NEWS_CHAT_ID: return
    try:
        news = get_crypto_news()
        bot.send_message(NEWS_CHAT_ID, news, reply_markup=get_random_partner_button(), parse_mode="Markdown", disable_web_page_preview=True)
        print(f"[{datetime.now()}] –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {NEWS_CHAT_ID}")
    except Exception as e:
        print(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        if ADMIN_CHAT_ID: bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π:\n{e}")

def auto_check_status():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É."""
    if not ADMIN_CHAT_ID: return
    errors = []
    if "–æ—à–∏–±–∫–∞" in ask_gpt("–¢–µ—Å—Ç", "gpt-3.5-turbo").lower(): errors.append("API OpenAI (GPT) –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")
    try: get_gsheet()
    except Exception: errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets.")
    if "–æ—à–∏–±–∫–∞" in get_crypto_news().lower(): errors.append("API –Ω–æ–≤–æ—Å—Ç–µ–π (CryptoPanic) –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if not errors: status_msg = f"‚úÖ **–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ({ts})**\n\n–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ."
    else: status_msg = f"‚ö†Ô∏è **–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ({ts})**\n\n–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join([f"üö® {e}" for e in errors])
    try: bot.send_message(ADMIN_CHAT_ID, status_msg, parse_mode="Markdown")
    except Exception as e: print(f"-> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É: {e}")

# ========================================================================================
# 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô TELEGRAM
# ========================================================================================

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(msg):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /start –∏ /help, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É.\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`/price [–ü–ê–†–ê]` - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - BTC).\n"
        "`/chart` - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑ Google Sheets."
    )
    bot.send_message(msg.chat.id, help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())


@bot.message_handler(commands=['price'])
def handle_price(msg):
    try:
        pair_text = msg.text.split()[1].upper()
    except IndexError:
        pair_text = "BTC-USDT"
    
    coin_id = pair_text.split('-')[0].lower()
    
    price, source = get_crypto_price(coin_id, "usd")
    if price:
        bot.send_message(msg.chat.id, f"üíπ –ö—É—Ä—Å {pair_text.replace('-', '/')}: ${price:,.2f} (–¥–∞–Ω–Ω—ã–µ –æ—Ç {source})")
    else:
        bot.send_message(msg.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {pair_text} –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")

@bot.message_handler(commands=['chart'])
def handle_chart(msg):
    bot.send_message(msg.chat.id, "‚è≥ –°—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫...")
    try:
        sheet = get_gsheet()
        records = sheet.get_all_values()[1:]
        dates, profits = [], []
        for r in records:
            try:
                date_obj = datetime.strptime(r[0], "%Y-%m-%d %H:%M:%S")
                profit_str = re.search(r'\$(\d+\.?\d*)', r[2])
                if profit_str:
                    profits.append(float(profit_str.group(1)))
                    dates.append(date_obj)
            except (ValueError, IndexError, TypeError): continue
        if not dates or len(dates) < 2:
            bot.send_message(msg.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ —Å –¥–∞—Ç–æ–π –∏ —Å—É–º–º–æ–π –≤ '$'.")
            return
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(dates, profits, marker='o', linestyle='-', color='#00aaff')
        ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏', fontsize=16, color='white')
        ax.tick_params(axis='x', colors='white', rotation=30); ax.tick_params(axis='y', colors='white')
        fig.tight_layout()
        buf = io.BytesIO(); plt.savefig(buf, format='png', dpi=150, transparent=True); buf.seek(0)
        bot.send_photo(msg.chat.id, buf, caption="üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
        plt.close(fig)
    except Exception as e:
        bot.send_message(msg.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

@bot.message_handler(content_types=['text'])
def handle_all_text_messages(msg):
    user_id = msg.from_user.id
    text_lower = msg.text.lower()

    if pending_weather_requests.get(user_id):
        del pending_weather_requests[user_id]
        bot.send_message(msg.chat.id, get_weather(msg.text), reply_markup=get_main_keyboard())
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ ---
    
    if '–∫—É—Ä—Å btc' in text_lower or '–∫—É—Ä—Å' in text_lower and ('–±–∏—Ç–∫–æ–∏–Ω' in text_lower or '–≤—Ç—Å' in text_lower):
        price, source = get_crypto_price("bitcoin", "usd")
        if price:
            comment = ask_gpt(f"–ö—É—Ä—Å BTC ${price:,.2f}. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –¥–µ—Ä–∑–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –æ —Ä—ã–Ω–∫–µ.", "gpt-3.5-turbo")
            bot.send_message(msg.chat.id, f"üí∞ **–ö—É—Ä—Å BTC: ${price:,.2f}** (–¥–∞–Ω–Ω—ã–µ –æ—Ç {source})\n\n*{comment}*", parse_mode="Markdown")
        else:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
        return

    if '—Ç–æ–ø-5 asic' in text_lower:
        models_info = "\n".join(get_top_asics())
        bot.send_message(msg.chat.id, f"**–¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n{models_info}", parse_mode="Markdown")
        return
        
    if '–Ω–æ–≤–æ—Å—Ç–∏' in text_lower:
        keywords = [word.upper() for word in text_lower.split() if word.upper() in ['BTC', 'ETH', 'SOL', 'MINING']]
        news = get_crypto_news(keywords or None)
        bot.send_message(msg.chat.id, news, parse_mode="Markdown", disable_web_page_preview=True)
        return

    if '–ø–æ–≥–æ–¥–∞' in text_lower:
        pending_weather_requests[user_id] = True
        bot.send_message(msg.chat.id, "üå¶ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?", reply_markup=types.ReplyKeyboardRemove())
        return

    currency_pair = parse_currency_pair(text_lower)
    if currency_pair:
        bot.send_message(msg.chat.id, get_currency_rate(*currency_pair))
        return

    if any(x in text_lower for x in ["–ø—Ä–æ–¥–∞–º", "–≤ –Ω–∞–ª–∏—á–∏–∏", "–ø—Ä–µ–¥–∑–∞–∫–∞–∑", "$"]):
        log_to_sheet([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), msg.from_user.username or msg.from_user.first_name, msg.text])
        analysis = ask_gpt(f"–≠—Ç–æ –ø—Ä–∞–π—Å –Ω–∞ –º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ —Ç—Ä–µ–π–¥–µ—Ä: –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–µ—à–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π.\n\n–¢–µ–∫—Å—Ç:\n{msg.text}")
        bot.send_message(msg.chat.id, analysis)
        return
    
    # --- –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT ---
    try:
        answer = ask_gpt(msg.text)
        bot.send_message(msg.chat.id, answer, reply_markup=get_random_partner_button(), parse_mode="Markdown")
    except Exception as e:
        bot.send_message(msg.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# ========================================================================================
# 6. –ó–ê–ü–£–°–ö –ë–û–¢–ê, –í–ï–ë–•–£–ö–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return '', 200
    return 'Forbidden', 403

@app.route("/")
def index():
    return "Bot is running!", 200

def run_scheduler():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    # –î–û–ë–ê–í–õ–ï–ù–ê –∑–∞–¥–∞—á–∞ –¥–ª—è "–ø—Ä–æ–≥—Ä–µ–≤–∞"
    schedule.every(25).minutes.do(keep_alive)
    
    schedule.every(3).hours.do(auto_send_news)
    schedule.every(3).hours.do(auto_check_status)
    schedule.every(1).hours.do(get_top_asics)

    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å
    get_top_asics()
    auto_check_status()
    keep_alive()

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    if WEBHOOK_URL:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=WEBHOOK_URL.rstrip("/") + "/webhook")
    
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    port = int(os.environ.get('PORT', 10000))
    app.run(host="0.0.0.0", port=port)
