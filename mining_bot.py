# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ========================================================================================
import os
import telebot
import requests
import time
import threading
import schedule
import json
from flask import Flask, request
import gspread
from google.oauth2.service_account import Credentials
from telebot import types
from openai import OpenAI
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import io
import re
import random
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# üìå –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
    datefmt='%d/%b/%Y %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- –ö–ª—é—á–∏ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) ---
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
NEWSAPI_KEY = os.getenv("CRYPTO_API_KEY") # CryptoPanic API Key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY", "YourApiKeyToken")
NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GOOGLE_JSON_STR = os.getenv("GOOGLE_JSON")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –°—Å—ã–ª–∫–∏ ---
PARTNER_URL = "https://app.leadteh.ru/w/dTeKr"
PARTNER_BUTTON_TEXT_OPTIONS = [
    "üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫—ç—à ---
if not BOT_TOKEN:
    logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN")
    raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN")

try:
    bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
    app = Flask(__name__)
    openai_client = OpenAI(api_key=OPENAI_API_KEY)
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ API: {e}")
    raise

# üìå –ò–ó–ú–ï–ù–ï–ù–û: –°–ª–æ–≤–∞—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
user_states = {} # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∏–ø–∞ {'weather_request': True, 'calculator_request': True, ...}

asic_cache = {"data": [], "timestamp": None}

# üöÄ –ù–û–í–û–ï: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥"
# –í–ê–ñ–ù–û: –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞.
# –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, SQLite –∏–ª–∏ PostgreSQL).
user_rigs = {} # { user_id: {'last_collected': datetime, 'balance': float} }

# –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
BOT_HINTS = [
    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/price`",
    "‚öôÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–æ–ø-5 ASIC'",
    "üå¶Ô∏è –£–∑–Ω–∞–π—Ç–µ –ø–æ–≥–æ–¥—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ '–ø–æ–≥–æ–¥–∞'",
    "‚õèÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –ø–æ–º–æ—â—å—é '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'",
    "üì∞ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–æ–≤–æ—Å—Ç–∏'",
    "‚õΩÔ∏è –£–∑–Ω–∞–π—Ç–µ —Ü–µ–Ω—É –Ω–∞ –≥–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π `/gas`",
    "ü§ë –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥ —Å `/my_rig`",
    "üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π `/fear`",
    "‚è≥ –°–∫–æ–ª—å–∫–æ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞? –£–∑–Ω–∞–π—Ç–µ: `/halving`"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –≤–∞–ª—é—Ç
CURRENCY_MAP = {
    '–¥–æ–ª–ª–∞—Ä': 'USD', 'usd': 'USD', '$': 'USD',
    '–µ–≤—Ä–æ': 'EUR', 'eur': 'EUR', '‚Ç¨': 'EUR',
    '—Ä—É–±–ª—å': 'RUB', 'rub': 'RUB', '‚ÇΩ': 'RUB',
    '—é–∞–Ω—å': 'CNY', 'cny': 'CNY',
    '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', 'btc': 'BTC', '–±—Ç—Å': 'BTC', '–≤—Ç—Å': 'BTC',
    '—ç—Ñ–∏—Ä': 'ETH', 'eth': 'ETH',
}

# üöÄ –ù–û–í–û–ï: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞
HALVING_INTERVAL = 210000
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–∞–ª–≤–∏–Ω–≥ (840000, 1050000, –∏ —Ç.–¥.)
# –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ
NEXT_HALVING_BLOCK = 840000

# ========================================================================================
# 2. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–ù–ï–®–ù–ò–ú–ò API –ò –°–ï–†–í–ò–°–ê–ú–ò
# ========================================================================================

def get_gsheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    if not GOOGLE_JSON_STR:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        raise ValueError("–ö–ª—é—á–∏ Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    try:
        creds_dict = json.loads(GOOGLE_JSON_STR)
        creds = Credentials.from_service_account_info(creds_dict, scopes=['https://www.googleapis.com/auth/spreadsheets'])
        gc = gspread.authorize(creds)
        return gc.open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    except json.JSONDecodeError:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GOOGLE_JSON.")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        raise

def log_to_sheet(row_data: list):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É Google Sheets."""
    try:
        sheet = get_gsheet()
        sheet.append_row(row_data, value_input_option='USER_ENTERED')
        logger.info(f"–ó–∞–ø–∏—Å—å –≤ Google Sheets: {row_data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

# üìå –ò–ó–ú–ï–ù–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã BTC, —Ç.–∫. Binance —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π
def get_crypto_price(coin_id="bitcoin", vs_currency="usd"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å Binance, –ø—Ä–∏ –æ—à–∏–±–∫–µ -> CoinGecko.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ü–µ–Ω–∞, –∏—Å—Ç–æ—á–Ω–∏–∫).
    """
    # 1. Binance (–¥–ª—è BTCUSDT)
    if coin_id == 'bitcoin' and vs_currency == 'usd':
        try:
            res = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT", timeout=5).json()
            if 'price' in res: return (float(res['price']), "Binance")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ API Binance: {e}. –ü—Ä–æ–±—É—é CoinGecko.")

    # 2. CoinGecko (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
    try:
        res = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies={vs_currency}", timeout=5).json()
        if coin_id in res and vs_currency in res[coin_id]: return (float(res[coin_id][vs_currency]), "CoinGecko")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API CoinGecko: {e}.")

    return (None, None)

def get_eth_gas_price():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –≤ —Å–µ—Ç–∏ Ethereum."""
    try:
        res = requests.get(f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}", timeout=5).json()
        if res.get("status") == "1" and res.get("result"):
            gas_info = res["result"]
            return (f"‚õΩÔ∏è **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –≤ Ethereum (Gwei):**\n\n"
                    f"üê¢ **–ú–µ–¥–ª–µ–Ω–Ω–æ (‚âà5-10 –º–∏–Ω):** `{gas_info['SafeGasPrice']}` Gwei\n"
                    f"üö∂‚Äç‚ôÇÔ∏è **–°—Ä–µ–¥–Ω–µ (‚âà2-3 –º–∏–Ω):** `{gas_info['ProposeGasPrice']}` Gwei\n"
                    f"üöÄ **–ë—ã—Å—Ç—Ä–æ (‚âà15-30 —Å–µ–∫):** `{gas_info['FastGasPrice']}` Gwei")
        else:
            return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ —Å Etherscan]"
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑: {e}")
        return f"[‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑]"
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑: {e}")
        return f"[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑]"

def get_weather(city: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å —Å–µ—Ä–≤–∏—Å–∞ wttr.in."""
    try:
        # üìå –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        headers = {'User-Agent': 'Mozilla/5.0', "Accept-Language": "ru"}
        r = requests.get(f"https://wttr.in/{city}?format=j1", headers=headers, timeout=7).json()
        current = r["current_condition"][0]
        # üìå –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        weather_desc = current['lang_ru'][0]['value'] if 'lang_ru' in current and current['lang_ru'] else current['weatherDesc'][0]['value']
        return (f"üåç {r['nearest_area'][0]['areaName'][0]['value']}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temp_C']}¬∞C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current['FeelsLikeC']}¬∞C)\n"
                f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {weather_desc}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\n"
                f"üí® –í–µ—Ç–µ—Ä: {current['windspeedKmph']} –∫–º/—á")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}': {e}")
        return f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city}' –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.]"

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_currency_rate(base="USD", to="RUB"):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç —Å exchangerate.host —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    # 1. –ü–æ–ø—ã—Ç–∫–∞ —Å ExchangeRate.host
    try:
        res = requests.get(f"https://api.exchangerate.host/latest?base={base.upper()}&symbols={to.upper()}", timeout=5).json()
        if res.get('rates') and res['rates'].get(to.upper()):
            rate = res['rates'][to.upper()]
            return f"üíπ {base.upper()} ‚Üí {to.upper()} = **{rate:.2f}**"
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ API ExchangeRate.host: {e}. –ü—Ä–æ–±—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π API.")

    # 2. –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å Exchangeratesapi.io
    try:
        res = requests.get(f"https://api.exchangerate-api.com/v4/latest/{base.upper()}", timeout=5).json()
        if res.get('rates') and res['rates'].get(to.upper()):
            rate = res['rates'][to.upper()]
            return f"üíπ {base.upper()} ‚Üí {to.upper()} = **{rate:.2f}** (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π API)"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")

    return f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {base.upper()} –∫ {to.upper()} –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞]"

def ask_gpt(prompt: str, model: str = "gpt-4o"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI GPT."""
    try:
        res = openai_client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            timeout=20.0
        )
        return res.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {e}")
        return f"[‚ùå –û—à–∏–±–∫–∞ GPT: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.]"

# ... (–ø–∞—Ä—Å–µ—Ä—ã ASIC –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∏ —É–∂–µ —Ö–æ—Ä–æ—à–æ —Å–¥–µ–ª–∞–Ω—ã)
def _parse_asicminervalue():
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ asicminervalue.com")
    r = requests.get("https://www.asicminervalue.com/miners/sha-256", timeout=15)
    r.raise_for_status()
    soup = BeautifulSoup(r.text, "html.parser")
    table_rows = soup.select("table tbody tr")
    if not table_rows:
        raise ValueError("–¢–∞–±–ª–∏—Ü–∞ ASIC –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ asicminervalue.com")

    parsed_asics = []
    for row in table_rows[:5]:
        cols = row.find_all("td")
        if len(cols) < 4: continue
        
        try:
            name_tag = cols[0].find('a')
            name = name_tag.get_text(strip=True) if name_tag else cols[0].get_text(strip=True)

            asic_data = {
                'name': name,
                'hashrate': cols[1].get_text(strip=True),
                'power_str': cols[2].get_text(strip=True),
                'revenue_str': cols[3].get_text(strip=True),
            }
            
            power_match = re.search(r'(\d+)', asic_data['power_str'])
            asic_data['power_watts'] = float(power_match.group(1)) if power_match else 0
            
            revenue_match = re.search(r'([\d\.]+)', asic_data['revenue_str'])
            asic_data['daily_revenue'] = float(revenue_match.group(1)) if revenue_match else 0
            
            if asic_data['power_watts'] > 0 and asic_data['daily_revenue'] > 0:
                parsed_asics.append(asic_data)
        except (AttributeError, ValueError, IndexError, TypeError) as e:
            logger.warning(f"AsicMinerValue: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏. {e}")
            continue

    if not parsed_asics:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ ASIC —Å asicminervalue.com")
    
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(parsed_asics)} ASIC —Å asicminervalue.com")
    return parsed_asics

def _parse_whattomine():
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ whattomine.com")
    headers = {'User-Agent': 'Mozilla/5.0'}
    r = requests.get("https://whattomine.com/asics.json", headers=headers, timeout=15)
    r.raise_for_status()
    data = r.json()
    asics_data = data.get('asics', {})

    if not asics_data:
        raise ValueError("–î–∞–Ω–Ω—ã–µ ASIC –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JSON –æ—Ç whattomine.com")

    sha256_asics = []
    btc_price, _ = get_crypto_price()
    if not btc_price:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ WhatToMine")

    for key, asic in asics_data.items():
        if asic.get('algorithm') == 'sha256' and asic.get('profitability_daily'):
            try:
                daily_revenue = float(asic['profitability_daily']) * btc_price
                
                sha256_asics.append({
                    "name": asic.get('name', f"ASIC ID: {key}").replace('_', ' '),
                    "hashrate": f"{asic.get('hashrate', 0) / 1e12:.2f}Th/s",
                    "power_watts": float(asic.get('power', 0)),
                    "power_str": f"{asic.get('power', 0)}W",
                    "daily_revenue": daily_revenue,
                    "revenue_str": f"${daily_revenue:.2f}",
                })
            except (KeyError, ValueError, TypeError) as e:
                logger.warning(f"WhatToMine JSON: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ASIC {key}. –û—à–∏–±–∫–∞: {e}")
                continue
    
    if not sha256_asics:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ SHA-256 ASIC –∏–∑ JSON whattomine.com")

    sha256_asics.sort(key=lambda x: x['daily_revenue'], reverse=True)
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(sha256_asics)} ASIC —Å whattomine.com")
    return sha256_asics[:5]

def get_top_asics(force_update: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-5 ASIC —Å –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    global asic_cache
    cache_is_valid = asic_cache.get("data") and asic_cache.get("timestamp") and \
                     (datetime.now() - asic_cache["timestamp"] < timedelta(hours=1))

    if cache_is_valid and not force_update:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à ASIC.")
        return asic_cache["data"]

    try:
        asics = _parse_asicminervalue()
        asic_cache = {"data": asics, "timestamp": datetime.now()}
        return asics
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (asicminervalue): {e}")
        try:
            asics = _parse_whattomine()
            asic_cache = {"data": asics, "timestamp": datetime.now()}
            return asics
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (whattomine): {e2}")
            return ["[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ ASIC –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.]"]

# üìå –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ GPT
def get_crypto_news(keywords: list = None):
    try:
        params = {"auth_token": NEWSAPI_KEY, "public": "true"}
        if keywords:
            params["currencies"] = ",".join(keywords).upper()
        else:
            params["currencies"] = "BTC,ETH"

        r = requests.get("https://cryptopanic.com/api/v1/posts/", params=params, timeout=10).json()
        posts = r.get("results", [])[:3]

        if not posts:
            return "[üßê –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]"

        items = []
        for post in posts:
            # –î–µ–ª–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ –ª–æ–º–∞–ª–∞ –≤—Å–µ
            try:
                prompt_for_gpt = (
                    f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: "
                    f"'{post['title']}'. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."
                )
                summary = ask_gpt(prompt_for_gpt, 'gpt-3.5-turbo')
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
                if '[‚ùå' in summary:
                    summary = post['title'] # –û—Ç–∫–∞—Ç –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ GPT-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–≥–æ–ª–æ–≤–æ–∫. –û—à–∏–±–∫–∞: {e}")
                summary = post['title']
            
            items.append(f"üîπ [{summary}]({post.get('url', '')})")

        return "\n\n".join(items) if items else "[ü§∑‚Äç‚ôÇÔ∏è –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç]"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return f"[‚ùå –û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π]"

# ========================================================================================
# üöÄ 3. –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò (–ò–ù–¢–ï–†–ê–ö–¢–ò–í –ò –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–Ø)
# ========================================================================================

def get_fear_and_greed_index():
    """–ü–æ–ª—É—á–∞–µ—Ç '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É."""
    try:
        r = requests.get("https://api.alternative.me/fng/?limit=1", timeout=5).json()
        if not r.get('data'):
            return None, "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–¥–µ–∫—Å–µ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏]"

        data = r['data'][0]
        value = int(data['value'])
        classification = data['value_classification']

        # –°–æ–∑–¥–∞–Ω–∏–µ "—Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞"
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(8, 4), subplot_kw={'projection': 'polar'})
        ax.set_yticklabels([])
        ax.set_xticklabels([])
        ax.grid(False)
        ax.spines['polar'].set_visible(False)
        ax.set_ylim(0, 1)

        # –¶–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        colors = ['#ff0000', '#ff4500', '#ffff00', '#adff2f', '#00ff00']
        # –°–æ–∑–¥–∞–µ–º 100 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        for i in range(100):
            color_index = min(len(colors) - 1, int(i / (100 / (len(colors)-1))))
            ax.barh(1, width=0.01 * 3.14/100, left=3.14 - (i * 0.01 * 3.14/100), height=0.2, color=colors[color_index])

        # –°—Ç—Ä–µ–ª–∫–∞
        angle = 3.14 - (value / 100 * 3.14)
        ax.annotate(
            '', xy=(angle, 1), xytext=(0, 0),
            arrowprops=dict(facecolor='white', shrink=0.05, width=2, headwidth=8)
        )
        ax.barh(1, width=0.1, left=angle-0.05, height=0.3, color='black') # –æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏
        
        # –¢–µ–∫—Å—Ç
        ax.text(0, 0, f"{value}\n{classification}", ha='center', va='center', fontsize=24, color='white', weight='bold')
        ax.text(3.14, 1.1, "Extreme Fear", ha='center', va='center', fontsize=12, color='white')
        ax.text(0, 1.1, "Extreme Greed", ha='center', va='center', fontsize=12, color='white')

        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, transparent=True)
        buf.seek(0)
        plt.close(fig)
        
        text = (f"üò± **–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}**\n\n"
                f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ —Å–µ–π—á–∞—Å –±–ª–∏–∂–µ –∫ *{'—Å—Ç—Ä–∞—Ö—É' if value < 50 else '–∂–∞–¥–Ω–æ—Å—Ç–∏'}*.")

        return buf, text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}")
        return None, f"[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}]"


def get_halving_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞
        current_block_height = int(requests.get("https://blockchain.info/q/getblockcount", timeout=5).text)
        
        blocks_left = NEXT_HALVING_BLOCK - current_block_height
        if blocks_left <= 0:
            return f"üéâ **–•–∞–ª–≤–∏–Ω–≥ –Ω–∞ –±–ª–æ–∫–µ {NEXT_HALVING_BLOCK} —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª!**\n–°–ª–µ–¥—É—é—â–∏–π —Ö–∞–ª–≤–∏–Ω–≥ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –±–ª–æ–∫–µ {NEXT_HALVING_BLOCK + HALVING_INTERVAL}."

        # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ (1 –±–ª–æ–∫ ~ 10 –º–∏–Ω—É—Ç)
        minutes_left = blocks_left * 10
        days_left = int(minutes_left / (60 * 24))
        hours_left = int((minutes_left % (60 * 24)) / 60)

        return (f"‚è≥ **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin –æ—Å—Ç–∞–ª–æ—Å—å:**\n\n"
                f"üóì **–î–Ω–µ–π:** `{days_left}`\n"
                f"‚è∞ **–ß–∞—Å–æ–≤:** `{hours_left}`\n\n"
                f"üß± **–ë–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞:** `{blocks_left:,}`\n"
                f"üéØ **–¶–µ–ª–µ–≤–æ–π –±–ª–æ–∫:** `{NEXT_HALVING_BLOCK:,}`\n"
                f"‚õè **–¢–µ–∫—É—â–∏–π –±–ª–æ–∫:** `{current_block_height:,}`")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞: {e}")
        return f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ: {e}]"


# ========================================================================================
# 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –£–¢–ò–õ–ò–¢–´
# ========================================================================================

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        types.KeyboardButton("üíπ –ö—É—Ä—Å BTC"), types.KeyboardButton("‚õΩÔ∏è –ì–∞–∑ ETH"),
        types.KeyboardButton("‚öôÔ∏è –¢–æ–ø-5 ASIC"), types.KeyboardButton("‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
        types.KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏"), types.KeyboardButton("üå¶Ô∏è –ü–æ–≥–æ–¥–∞"),
        # üöÄ –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        types.KeyboardButton("üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞"), types.KeyboardButton("‚è≥ –•–∞–ª–≤–∏–Ω–≥")
    ]
    markup.add(*buttons)
    return markup

def get_random_partner_button():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
    return markup

def send_message_with_partner_button(chat_id, text, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π
    –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    """
    try:
        hint = random.choice(BOT_HINTS)
        full_text = f"{text}\n\n---\n_{hint}_"

        kwargs.setdefault('parse_mode', 'Markdown')
        kwargs.setdefault('reply_markup', get_random_partner_button())
        kwargs.setdefault('disable_web_page_preview', True)
        bot.send_message(chat_id, full_text, **kwargs)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_usd_to_rub_rate():
    try:
        res = requests.get("https://api.exchangerate.host/latest?base=USD&symbols=RUB", timeout=5).json()
        if res.get('rates') and 'RUB' in res['rates']:
            return res['rates']['RUB']
    except Exception as e:
        logger.warning(f"API ExchangeRate.host –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: {e}. –ü—Ä–æ–±—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π.")

    try:
        res = requests.get("https://api.exchangerate-api.com/v4/latest/USD", timeout=5).json()
        if res.get('rates') and 'RUB' in res['rates']:
            return res['rates']['RUB']
    except Exception as e:
        logger.error(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π API –∫—É—Ä—Å–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ç–æ–∂–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: {e}")

    return None

def calculate_and_format_profit(electricity_cost_rub: float):
    usd_to_rub_rate = get_usd_to_rub_rate()
    if usd_to_rub_rate is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    electricity_cost_usd = electricity_cost_rub / usd_to_rub_rate
    asics_data = get_top_asics()

    if not asics_data or isinstance(asics_data[0], str):
        error_message = asics_data[0] if asics_data else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞."
        return error_message

    result = [f"üí∞ **–†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ —Ü–µ–Ω–µ —Ä–æ–∑–µ—Ç–∫–∏ {electricity_cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á (~${electricity_cost_usd:.3f}/–∫–í—Ç—á)**\n"]
    successful_calcs = 0
    for asic in asics_data:
        try:
            power_watts = asic['power_watts']
            daily_revenue = asic['daily_revenue']

            daily_power_kwh = (power_watts / 1000) * 24
            daily_electricity_cost = daily_power_kwh * electricity_cost_usd
            net_profit = daily_revenue - daily_electricity_cost

            result.append(
                f"**{asic['name']}**\n"
                f"  - –î–æ—Ö–æ–¥: `${daily_revenue:.2f}`\n"
                f"  - –†–∞—Å—Ö–æ–¥: `${daily_electricity_cost:.2f}`\n"
                f"  - **–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: `${net_profit:.2f}`/–¥–µ–Ω—å**"
            )
            successful_calcs += 1
        except (KeyError, ValueError, TypeError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è ASIC '{asic.get('name', 'N/A')}': {e}")
            continue

    if successful_calcs == 0:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ ASIC. –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω–∏–ª—Å—è —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ."
    
    return "\n".join(result)


# ========================================================================================
# 5. –ó–ê–î–ê–ß–ò, –í–´–ü–û–õ–ù–Ø–ï–ú–´–ï –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ (SCHEDULE)
# ========================================================================================

def keep_alive():
    if WEBHOOK_URL:
        try:
            base_url = WEBHOOK_URL.rsplit('/', 1)[0]
            requests.get(base_url, timeout=10)
            logger.info(f"Keep-alive –ø–∏–Ω–≥ –Ω–∞ {base_url} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ keep-alive –ø–∏–Ω–≥–∞: {e}")

def auto_send_news():
    if not NEWS_CHAT_ID: return
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        news = get_crypto_news()
        bot.send_message(NEWS_CHAT_ID, news, disable_web_page_preview=True, parse_mode='Markdown', reply_markup=get_random_partner_button())
        logger.info(f"–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {NEWS_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        if ADMIN_CHAT_ID:
            bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π:\n{e}")

def auto_check_status():
    if not ADMIN_CHAT_ID: return
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º...")
    errors = []
    # üìå –ò–ó–ú–ï–ù–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GPT
    if "–æ—à–∏–±–∫–∞" in ask_gpt("–¢–µ—Å—Ç", "gpt-3.5-turbo").lower():
        errors.append("API OpenAI (GPT) –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")
    try:
        get_gsheet()
    except Exception as e:
        errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: {e}")
    if get_crypto_price()[0] is None:
        errors.append("API —Ü–µ–Ω—ã (Binance/CoinGecko) –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")

    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if not errors:
        status_msg = f"‚úÖ **–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ({ts})**\n\n–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç."
    else:
        error_list = "\n".join([f"üö® {e}" for e in errors])
        status_msg = f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ ({ts}):**\n{error_list}"
    try:
        bot.send_message(ADMIN_CHAT_ID, status_msg, parse_mode="Markdown")
        logger.info("–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É: {e}")

# ========================================================================================
# 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô TELEGRAM
# ========================================================================================

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    # üìå –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É.\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`/price` - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å BTC (–∏–ª–∏ `/price ETH`).\n"
        "`/gas` - —Ü–µ–Ω–∞ –Ω–∞ –≥–∞–∑ –≤ —Å–µ—Ç–∏ Ethereum.\n"
        "`/news` - —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏.\n\n"
        "**–ü–æ–ª–µ–∑–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã:**\n"
        "`/fear` - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏.\n"
        "`/halving` - —Ç–∞–π–º–µ—Ä –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ BTC.\n"
        "`/chart` - –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑ Google Sheets.\n\n"
        "**–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`/my_rig` - –≤–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ñ–µ—Ä–º–∞.\n"
        "`/collect` - —Å–æ–±—Ä–∞—Ç—å –Ω–∞–º–∞–π–Ω–µ–Ω–Ω–æ–µ (—Ä–∞–∑ –≤ 24—á).\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )
    bot.send_message(msg.chat.id, help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

# üìå –ò–ó–ú–ï–ù–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /price
@bot.message_handler(commands=['price'])
def handle_price(msg):
    try:
        parts = msg.text.split()
        coin_symbol = parts[1].upper() if len(parts) > 1 else "BTC"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –∏ ID –¥–ª—è CoinGecko
        coin_id_map = {'BTC': 'bitcoin', 'ETH': 'ethereum', 'SOL': 'solana'} # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        coin_id = coin_id_map.get(coin_symbol, coin_symbol.lower())
        currency = "usd"

        price, source = get_crypto_price(coin_id, currency)
        if price:
            send_message_with_partner_button(msg.chat.id, f"üíπ –ö—É—Ä—Å {coin_symbol}/USD: **${price:,.2f}**\n_(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})_")
        else:
            bot.send_message(msg.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {coin_symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_price: {e}")
        bot.send_message(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# üöÄ –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
@bot.message_handler(commands=['fear', 'fng'])
def handle_fear_and_greed(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏...")
    photo, text = get_fear_and_greed_index()
    if photo:
        bot.send_photo(msg.chat.id, photo, caption=text, parse_mode="Markdown", reply_markup=get_random_partner_button())
    else:
        send_message_with_partner_button(msg.chat.id, text)

@bot.message_handler(commands=['halving'])
def handle_halving(msg):
    send_message_with_partner_button(msg.chat.id, get_halving_info())
    
@bot.message_handler(commands=['my_rig'])
def handle_my_rig(msg):
    user_id = msg.from_user.id
    if user_id not in user_rigs:
        user_rigs[user_id] = {'last_collected': None, 'balance': 0.0}
        response = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—É!\n\n" \
                   "–¢–µ–ø–µ—Ä—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –Ω–∞–º–∞–π–Ω–µ–Ω–Ω–æ–µ –∫–æ–º–∞–Ω–¥–æ–π `/collect`.\n" \
                   "–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `0.000000` BTC."
    else:
        balance = user_rigs[user_id]['balance']
        response = f"üñ•Ô∏è **–í–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ñ–µ—Ä–º–∞:**\n\n" \
                   f"üí∞ **–ë–∞–ª–∞–Ω—Å:** `{balance:.6f}` BTC\n\n" \
                   f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/collect`, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É."
    
    send_message_with_partner_button(msg.chat.id, response)

@bot.message_handler(commands=['collect'])
def handle_collect(msg):
    user_id = msg.from_user.id
    if user_id not in user_rigs:
        response = "ü§î –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ñ–µ—Ä–º—ã. –°–æ–∑–¥–∞–π—Ç–µ –µ–µ –∫–æ–º–∞–Ω–¥–æ–π `/my_rig`."
        send_message_with_partner_button(msg.chat.id, response)
        return

    user_rig = user_rigs[user_id]
    now = datetime.now()

    if user_rig['last_collected'] and (now - user_rig['last_collected']) < timedelta(hours=24):
        time_left = timedelta(hours=24) - (now - user_rig['last_collected'])
        hours, remainder = divmod(time_left.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        response = f"–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ **{hours}—á {minutes}–º**."
    else:
        # "–ú–∞–π–Ω–∏–º" —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC
        mined_amount = random.uniform(0.00005, 0.00025)
        user_rig['balance'] += mined_amount
        user_rig['last_collected'] = now
        response = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ **{mined_amount:.6f}** BTC!\n\n" \
                   f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{user_rig['balance']:.6f}` BTC."
    
    send_message_with_partner_button(msg.chat.id, response)

@bot.message_handler(commands=['chart'])
def handle_chart(msg):
    bot.send_message(msg.chat.id, "‚è≥ –°—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
    try:
        sheet = get_gsheet()
        records = sheet.get_all_values()[1:]
        dates, profits = [], []
        error_lines = []

        for i, row in enumerate(records):
            try:
                if not row or len(row) < 3 or not row[0] or not row[2]: continue
                date_obj = datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                profit_match = re.search(r'\$([\d\.]+)', row[2])
                if profit_match:
                    profits.append(float(profit_match.group(1)))
                    dates.append(date_obj)
            except (ValueError, IndexError):
                error_lines.append(str(i + 2))
                continue

        if len(dates) < 2:
            bot.send_message(msg.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
            return

        if error_lines:
            bot.send_message(msg.chat.id, f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:** –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏: {', '.join(error_lines)}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°` –∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ü–µ–Ω–∞ –≤ `$`. –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")

        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(dates, profits, marker='o', linestyle='-', color='#00aaff', label='–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å ($)')
        ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞', fontsize=16, color='white')
        ax.set_ylabel('–ü—Ä–∏–±—ã–ª—å, $', color='white')
        ax.tick_params(axis='x', colors='white', rotation=30)
        ax.tick_params(axis='y', colors='white')
        ax.grid(True, which='both', linestyle='--', linewidth=0.5, color='#555555')
        ax.legend()
        fig.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, transparent=True)
        buf.seek(0)
        bot.send_photo(msg.chat.id, buf, caption="üìà –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets.")
        plt.close(fig)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        bot.send_message(msg.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

@bot.message_handler(content_types=['text'])
def handle_all_text_messages(msg):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = msg.from_user.id
    text_lower = msg.text.lower().strip()
    
    # üìå –ò–ó–ú–ï–ù–ï–ù–û: –ë–æ–ª–µ–µ —á–∏—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = user_states.get(user_id, {})

    if current_state.get('weather_request'):
        del user_states[user_id]
        bot.send_message(msg.chat.id, "‚è≥ –ò—â—É –ø–æ–≥–æ–¥—É...", reply_markup=get_main_keyboard())
        send_message_with_partner_button(msg.chat.id, get_weather(msg.text))
        return

    if current_state.get('calculator_request'):
        try:
            electricity_cost = float(text_lower.replace(',', '.'))
            del user_states[user_id]
            bot.send_message(msg.chat.id, "‚è≥ –°—á–∏—Ç–∞—é –ø—Ä–∏–±—ã–ª—å...", reply_markup=get_main_keyboard())
            calculation_result = calculate_and_format_profit(electricity_cost)
            send_message_with_partner_button(msg.chat.id, calculation_result)
        except ValueError:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `7.5` –∏–ª–∏ `3`")
        return

    # –ö–∞—Ä—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    command_map = {
        "üíπ –∫—É—Ä—Å btc": lambda: handle_price(types.Message(message_id=0, from_user=None, date=0, chat=msg.chat, content_type='text', options={}, json_string='{"text": "/price BTC"}')),
        "‚õΩÔ∏è –≥–∞–∑ eth": lambda: send_message_with_partner_button(msg.chat.id, get_eth_gas_price()),
        "üò± –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞": lambda: handle_fear_and_greed(msg),
        "‚è≥ —Ö–∞–ª–≤–∏–Ω–≥": lambda: handle_halving(msg),
        "‚öôÔ∏è —Ç–æ–ø-5 asic": lambda: handle_asics_text(msg),
        "üì∞ –Ω–æ–≤–æ—Å—Ç–∏": lambda: handle_news_text(msg),
    }

    if text_lower in command_map:
        command_map[text_lower]()
        return

    if text_lower in ["‚õèÔ∏è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "/calc"]:
        user_states[user_id] = {'calculator_request': True}
        bot.send_message(msg.chat.id, "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ **—Ä—É–±–ª—è—Ö** –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: `7.5`)", reply_markup=types.ReplyKeyboardRemove())
        return

    if text_lower in ["üå¶Ô∏è –ø–æ–≥–æ–¥–∞", "/weather"]:
        user_states[user_id] = {'weather_request': True}
        bot.send_message(msg.chat.id, "üå¶ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?", reply_markup=types.ReplyKeyboardRemove())
        return

    match = re.search(r'(\S+)\s+(?:–≤|to|–∫)\s+(\S+)', text_lower)
    if match and ('–∫—É—Ä—Å' in text_lower or '–∫–æ–Ω–≤–µ—Ä—Ç' in text_lower):
        base_word, quote_word = match.groups()
        base_currency = CURRENCY_MAP.get(base_word)
        quote_currency = CURRENCY_MAP.get(quote_word)
        if base_currency and quote_currency:
            send_message_with_partner_button(msg.chat.id, get_currency_rate(base_currency, quote_currency))
            return

    sale_words = ["–ø—Ä–æ–¥–∞–º", "–ø—Ä–æ–¥–∞—Ç—å", "–∫—É–ø–ª—é", "–∫—É–ø–∏—Ç—å", "–≤ –Ω–∞–ª–∏—á–∏–∏", "–ø—Ä–µ–¥–∑–∞–∫–∞–∑"]
    item_words = ["asic", "–∞—Å–∏–∫", "whatsminer", "antminer", "–∫–∞—Ä—Ç–∞", "—Ñ–µ—Ä–º–∞"]
    if any(word in text_lower for word in sale_words) and any(word in text_lower for word in item_words):
        log_to_sheet([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), msg.from_user.username or msg.from_user.first_name, msg.text])
        prompt = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—à —á–∞—Ç. "
                  f"–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ö—Ä–∞—Ç–∫–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "
                  f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ü–µ–Ω—ã –≤—ã–≥–ª—è–¥—è—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ' –∏–ª–∏ '—Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'). "
                  f"–ù–ï –ü–†–ï–î–õ–ê–ì–ê–ô —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö (Avito, –Æ–ª–∞ –∏ —Ç.–¥.). "
                  f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –≠–¢–û–ú —á–∞—Ç–µ.\n\n–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n{msg.text}")
        analysis = ask_gpt(prompt)
        send_message_with_partner_button(msg.chat.id, analysis)
        return

    bot.send_chat_action(msg.chat.id, 'typing')
    send_message_with_partner_button(msg.chat.id, ask_gpt(msg.text))

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
def handle_asics_text(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    asics_data = get_top_asics()
    if not asics_data or isinstance(asics_data[0], str):
        error_message = asics_data[0] if asics_data else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
        send_message_with_partner_button(msg.chat.id, error_message)
        return

    formatted_list = [f"‚Ä¢ {asic['name']}: {asic['hashrate']}, {asic['power_str']}, –¥–æ—Ö–æ–¥ ~{asic['revenue_str']}/–¥–µ–Ω—å" for asic in asics_data]
    response_text = "**–¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n" + "\n".join(formatted_list)
    send_message_with_partner_button(msg.chat.id, response_text)

def handle_news_text(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    keywords = [word.upper() for word in msg.text.lower().split() if word.upper() in ['BTC', 'ETH', 'SOL', 'MINING']]
    send_message_with_partner_button(msg.chat.id, get_crypto_news(keywords or None))


# ========================================================================================
# 7. –ó–ê–ü–£–°–ö –ë–û–¢–ê, –í–ï–ë–•–£–ö–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Forbidden', 403

@app.route("/")
def index():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω."""
    return "Bot is running!", 200

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    schedule.every(25).minutes.do(keep_alive)
    schedule.every(4).hours.do(auto_send_news)
    schedule.every(6).hours.do(auto_check_status)
    # üìå –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ ASIC —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    schedule.every(1).hours.do(get_top_asics, force_update=True)

    logger.info("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    get_top_asics(force_update=True)
    auto_check_status()
    keep_alive()

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if WEBHOOK_URL:
        logger.info("–†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞. –£—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        bot.remove_webhook()
        time.sleep(0.5)
        full_webhook_url = WEBHOOK_URL.rstrip("/") + "/webhook"
        bot.set_webhook(url=full_webhook_url)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {full_webhook_url}")

        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

        port = int(os.environ.get('PORT', 10000))
        app.run(host="0.0.0.0", port=port)
    else:
        logger.info("–í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long-polling –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        bot.remove_webhook()
        bot.polling(none_stop=True)
