# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ========================================================================================
import os
import telebot
import requests
import time
import threading
import schedule
import json
from flask import Flask, request
import gspread
from google.oauth2.service_account import Credentials
from telebot import types
from openai import OpenAI
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import matplotlib
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥ Matplotlib, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç GUI. –í–∞–∂–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤.
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
import re
import random
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
    datefmt='%d/%b/%Y %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- –ö–ª—é—á–∏ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
NEWSAPI_KEY = os.getenv("CRYPTO_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY", "YourApiKeyToken")
NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GOOGLE_JSON_STR = os.getenv("GOOGLE_JSON")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
PARTNER_URL = "https://app.leadteh.ru/w/dTeKr"
PARTNER_BUTTON_TEXT_OPTIONS = [
    "üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
]
BOT_HINTS = [
    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/price`", "‚öôÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–æ–ø-5 ASIC'",
    "‚õèÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –ø–æ–º–æ—â—å—é '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'", "üì∞ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–æ–≤–æ—Å—Ç–∏'",
    "ü§ë –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ—é —Ñ–µ—Ä–º—É –∫–æ–º–∞–Ω–¥–æ–π `/upgrade_rig`", "üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π `/fear`",
    "üèÜ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª—É—á—à–∏—Ö –º–∞–π–Ω–µ—Ä–æ–≤: `/top_miners`", "üéì –£–∑–Ω–∞–π—Ç–µ –∫—Ä–∏–ø—Ç–æ-—Ç–µ—Ä–º–∏–Ω –¥–Ω—è: `/word`",
    "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ: `/quiz`"
]
CURRENCY_MAP = {
    '–¥–æ–ª–ª–∞—Ä': 'USD', 'usd': 'USD', '$': 'USD', '–µ–≤—Ä–æ': 'EUR', 'eur': 'EUR', '‚Ç¨': 'EUR',
    '—Ä—É–±–ª—å': 'RUB', 'rub': 'RUB', '‚ÇΩ': 'RUB', '—é–∞–Ω—å': 'CNY', 'cny': 'CNY',
    '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', 'btc': 'BTC', '–±—Ç—Å': 'BTC', '–≤—Ç—Å': 'BTC', '—ç—Ñ–∏—Ä': 'ETH', 'eth': 'ETH',
}
HALVING_INTERVAL = 210000

# --- –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CRYPTO_TERMS = ["–ë–ª–æ–∫—á–µ–π–Ω", "–ì–∞–∑ (Gas)", "–•–∞–ª–≤–∏–Ω–≥", "ICO", "DeFi", "NFT", "–°–∞—Ç–æ—à–∏", "–ö–∏—Ç (Whale)", "HODL", "DEX", "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"]
QUIZ_QUESTIONS = [
    {"question": "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º Bitcoin?", "options": ["–í–∏—Ç–∞–ª–∏–∫ –ë—É—Ç–µ—Ä–∏–Ω", "–°–∞—Ç–æ—à–∏ –ù–∞–∫–∞–º–æ—Ç–æ", "–ò–ª–æ–Ω –ú–∞—Å–∫", "–ü–∞–≤–µ–ª –î—É—Ä–æ–≤"], "correct_index": 1},
    {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ '—Ö–∞–ª–≤–∏–Ω–≥' Bitcoin?", "options": ["–£–¥–≤–æ–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã", "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤–¥–≤–æ–µ", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã"], "correct_index": 1},
    {"question": "–ö–∞–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤—Ç–æ—Ä–æ–π –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ Bitcoin?", "options": ["Solana", "Ripple (XRP)", "Dogecoin", "Ethereum"], "correct_index": 3},
    {"question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ 'NFT'?", "options": ["Non-Fungible Token", "New Financial Technology", "Network Fee Token", "National Fiscal Token"], "correct_index": 0},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ Bitcoin?", "options": ["–ö–æ–ø–µ–π–∫–∞", "–¶–µ–Ω—Ç", "–°–∞—Ç–æ—à–∏", "–í—ç–π"], "correct_index": 2}
]
# üöÄ –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π —Ñ–µ—Ä–º—ã
MINING_RATES = {1: 0.0001, 2: 0.0002, 3: 0.0004, 4: 0.0008, 5: 0.0016} # –ë–∞–∑–æ–≤–∞—è –¥–æ–±—ã—á–∞ –∑–∞ —Å–±–æ—Ä
UPGRADE_COSTS = {2: 0.001, 3: 0.005, 4: 0.02, 5: 0.1} # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
STREAK_BONUS_MULTIPLIER = 0.05 # 5% –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–µ—Ä–∏–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class ExceptionHandler(telebot.ExceptionHandler):
    def handle(self, exception):
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ pyTelegramBotAPI:", exc_info=exception)
        return True # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
if not BOT_TOKEN:
    logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN")
    raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

try:
    bot = telebot.TeleBot(BOT_TOKEN, threaded=False, parse_mode='HTML', exception_handler=ExceptionHandler())
    app = Flask(__name__)
    openai_client = OpenAI(api_key=OPENAI_API_KEY)
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ API: {e}")
    raise

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î) ---
user_states = {} 
asic_cache = {"data": [], "timestamp": None}
user_rigs = {} 

# ========================================================================================
# 2. –†–ê–ë–û–¢–ê –° –í–ù–ï–®–ù–ò–ú–ò –°–ï–†–í–ò–°–ê–ú–ò (API)
# ========================================================================================
def get_gsheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets."""
    try:
        creds_dict = json.loads(GOOGLE_JSON_STR)
        creds = Credentials.from_service_account_info(creds_dict, scopes=['https://www.googleapis.com/auth/spreadsheets'])
        return gspread.authorize(creds).open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    except (json.JSONDecodeError, ValueError, gspread.exceptions.GSpreadException) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        raise

def log_to_sheet(row_data: list):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets."""
    try:
        get_gsheet().append_row(row_data, value_input_option='USER_ENTERED')
        logger.info(f"–ó–∞–ø–∏—Å—å –≤ Google Sheets: {row_data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

def get_crypto_price(coin_id="bitcoin", vs_currency="usd"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    sources = [
        {"name": "CoinGecko", "url": f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies={vs_currency}"},
        {"name": "Binance", "url": f"https://api.binance.com/api/v3/ticker/price?symbol={coin_id.upper()}USDT"}
    ]
    
    # Binance –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã, —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    if coin_id.upper() != "BTC":
        sources.pop(1)
    
    for source in sources:
        try:
            res = requests.get(source["url"], timeout=5).json()
            if source["name"] == "CoinGecko" and res.get(coin_id, {}).get(vs_currency):
                return (float(res[coin_id][vs_currency]), "CoinGecko")
            elif source["name"] == "Binance" and res.get('price'):
                return (float(res['price']), "Binance")
        except requests.RequestException as e:
            logger.warning(f"–û—à–∏–±–∫–∞ API {source['name']}: {e}")
            continue
    return (None, None)

def get_eth_gas_price():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ –≥–∞–∑ –≤ —Å–µ—Ç–∏ Ethereum."""
    try:
        res = requests.get(f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}", timeout=5).json()
        if res.get("status") == "1" and res.get("result"):
            gas = res["result"]
            return (f"‚õΩÔ∏è <b>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ (Gwei):</b>\n\n"
                    f"üê¢ <b>–ú–µ–¥–ª–µ–Ω–Ω–æ:</b> <code>{gas['SafeGasPrice']}</code>\n"
                    f"üö∂‚Äç‚ôÇÔ∏è <b>–°—Ä–µ–¥–Ω–µ:</b> <code>{gas['ProposeGasPrice']}</code>\n"
                    f"üöÄ <b>–ë—ã—Å—Ç—Ä–æ:</b> <code>{gas['FastGasPrice']}</code>")
        return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ]"
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑: {e}")
        return "[‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑]"

def get_weather(city: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å wttr.in."""
    try:
        headers = {'User-Agent': 'Mozilla/5.0', "Accept-Language": "ru"}
        r = requests.get(f"https://wttr.in/{city}?format=j1", headers=headers, timeout=4).json()
        current = r["current_condition"][0]
        weather_desc = current['lang_ru'][0]['value']
        city_name = r['nearest_area'][0]['areaName'][0]['value']
        return (f"üåç {city_name}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temp_C']}¬∞C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current['FeelsLikeC']}¬∞C)\n"
                f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {weather_desc}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}% | üí® –í–µ—Ç–µ—Ä: {current['windspeedKmph']} –∫–º/—á")
    except requests.exceptions.Timeout:
        return "[‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.]"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}': {e}")
        return f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city}'.]"

def ask_gpt(prompt: str, model: str = "gpt-4o"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI GPT."""
    try:
        res = openai_client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è HTML-—Ç–µ–≥–∏: <b>, <i>, <code>, <pre>."},
                {"role": "user", "content": prompt}
            ],
            timeout=20.0
        )
        return res.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {e}")
        return "[‚ùå –û—à–∏–±–∫–∞ GPT: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.]"
        
def get_top_asics(force_update: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-5 ASIC —Å asicminervalue.com —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    global asic_cache
    if not force_update and asic_cache["data"] and (datetime.now() - asic_cache["timestamp"] < timedelta(hours=1)):
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à ASIC.")
        return asic_cache["data"]
    try:
        r = requests.get("https://www.asicminervalue.com/miners/sha-256", timeout=15)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "lxml")
        parsed_asics = []
        for row in soup.select("table tbody tr"):
            cols = [col for col in row.find_all("td")]
            if len(cols) < 5: continue 
            name = cols[1].find('a').get_text(strip=True) if cols[1].find('a') else "Unknown ASIC"
            hashrate = cols[2].get_text(strip=True)
            power = cols[3].get_text(strip=True)
            revenue = cols[4].get_text(strip=True)
            power_watts_match = re.search(r'([\d,]+)', power)
            daily_revenue_match = re.search(r'([\d\.]+)', revenue)
            if power_watts_match and daily_revenue_match:
                power_watts = float(power_watts_match.group(1).replace(',', ''))
                daily_revenue = float(daily_revenue_match.group(1))
                if power_watts > 0 and daily_revenue > 0:
                    parsed_asics.append({
                        'name': name, 'hashrate': hashrate,
                        'power_watts': power_watts, 'daily_revenue': daily_revenue
                    })
        if not parsed_asics: raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ ASIC")
        parsed_asics.sort(key=lambda x: x['daily_revenue'], reverse=True)
        top_5_asics = parsed_asics[:5]
        asic_cache = {"data": top_5_asics, "timestamp": datetime.now()}
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(top_5_asics)} ASIC.")
        return top_5_asics
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC: {e}", exc_info=True)
        return []

def get_crypto_news(keywords: list = None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å CryptoPanic."""
    try:
        params = {"auth_token": NEWSAPI_KEY, "public": "true", "currencies": "BTC,ETH"}
        if keywords: params["currencies"] = ",".join(keywords).upper()
        
        posts = requests.get("https://cryptopanic.com/api/v1/posts/", params=params, timeout=10).json().get("results", [])[:3]
        if not posts: return "[üßê –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]"
        
        items = []
        for post in posts:
            summary = ask_gpt(f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ): '{post['title']}'", 'gpt-3.5-turbo')
            if '[‚ùå' in summary: 
                summary = telebot.util.escape(post['title']) 
            items.append(f'üîπ <a href="{post.get("url", "")}">{summary}</a>')
        return "\n\n".join(items)
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return "[‚ùå –û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π]"

# ========================================================================================
# 3. –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================================================================

def get_fear_and_greed_index():
    """–ü–æ–ª—É—á–∞–µ—Ç '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏' –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É."""
    try:
        data = requests.get("https://api.alternative.me/fng/?limit=1", timeout=5).json()['data'][0]
        value, classification = int(data['value']), data['value_classification']
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(8, 4.5), subplot_kw={'projection': 'polar'})
        ax.set_yticklabels([])
        ax.set_xticklabels([])
        ax.grid(False)
        ax.spines['polar'].set_visible(False)
        ax.set_ylim(0, 1)
        colors = ['#ff0000', '#ff4500', '#ffff00', '#adff2f', '#00ff00']
        for i in range(100):
            ax.barh(1, 0.0314, left=3.14 - (i * 0.0314), height=0.2, 
                    color=colors[min(len(colors) - 1, int(i / 25))])
        angle = 3.14 - (value * 0.0314)
        ax.annotate('', xy=(angle, 1), xytext=(0, 0), arrowprops=dict(facecolor='white', shrink=0.05, width=2, headwidth=8))
        ax.text(0, 0, f"{value}\n{classification}", ha='center', va='center', fontsize=24, color='white', weight='bold')
        fig.tight_layout()
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, transparent=True)
        buf.seek(0)
        plt.close(fig)
        text = f"üò± <b>–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {value} - {classification}</b>\n" \
               f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ —Å–µ–π—á–∞—Å –±–ª–∏–∂–µ –∫ <i>{'—Å—Ç—Ä–∞—Ö—É' if value < 50 else '–∂–∞–¥–Ω–æ—Å—Ç–∏'}</i>."
        return buf, text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}", exc_info=True)
        return None, "[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞]"

def get_halving_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞."""
    try:
        current_block = int(requests.get("https://blockchain.info/q/getblockcount", timeout=5).text)
        current_epoch = current_block // HALVING_INTERVAL
        next_halving_block = (current_epoch + 1) * HALVING_INTERVAL
        blocks_left = next_halving_block - current_block
        if blocks_left <= 0: return f"üéâ <b>–•–∞–ª–≤–∏–Ω–≥ –Ω–∞ –±–ª–æ–∫–µ {next_halving_block - HALVING_INTERVAL} —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª!</b>\n–°–ª–µ–¥—É—é—â–∏–π –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –±–ª–æ–∫–µ {next_halving_block}."
        days_left, rem_minutes = divmod(blocks_left * 10, 1440)
        hours_left, _ = divmod(rem_minutes, 60)
        return (f"‚è≥ <b>–î–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ Bitcoin –æ—Å—Ç–∞–ª–æ—Å—å:</b>\n\n"
                f"üóì <b>–î–Ω–µ–π:</b> <code>{days_left}</code> | ‚è∞ <b>–ß–∞—Å–æ–≤:</b> <code>{hours_left}</code>\n"
                f"üß± <b>–ë–ª–æ–∫–æ–≤ –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞:</b> <code>{blocks_left:,}</code>")
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–∞–ª–≤–∏–Ω–≥–∞: {e}")
        return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ö–∞–ª–≤–∏–Ω–≥–µ]"

# ========================================================================================
# 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –£–¢–ò–õ–ò–¢–´
# ========================================================================================

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ["üíπ –ö—É—Ä—Å BTC", "‚öôÔ∏è –¢–æ–ø-5 ASIC", "‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üì∞ –ù–æ–≤–æ—Å—Ç–∏", 
               "üò± –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞", "‚è≥ –•–∞–ª–≤–∏–Ω–≥", "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "üéì –°–ª–æ–≤–æ –¥–Ω—è",
               "üèÜ –¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤"]
    markup.add(*[types.KeyboardButton(text) for text in buttons])
    return markup

def send_message_with_partner_button(chat_id, text, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π."""
    try:
        full_text = f"{text}\n\n---\n<i>{random.choice(BOT_HINTS)}</i>"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
        bot.send_message(chat_id, full_text, reply_markup=markup, disable_web_page_preview=True, **kwargs)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

def send_photo_with_partner_button(chat_id, photo, caption, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π."""
    try:
        if not photo: raise ValueError("–û–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –ø—É—Å—Ç–æ–π")
        full_caption = f"{caption}\n\n---\n<i>{random.choice(BOT_HINTS)}</i>"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
        bot.send_photo(chat_id, photo, caption=full_caption, reply_markup=markup, **kwargs)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}: {e}")
        send_message_with_partner_button(chat_id, caption, **kwargs)

def calculate_and_format_profit(electricity_cost_rub: float):
    """–†–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ASIC."""
    try:
        response = requests.get("https://api.exchangerate.host/latest?base=USD&symbols=RUB", timeout=5)
        response.raise_for_status()
        rate = response.json().get('rates', {}).get('RUB')
        if not rate: raise ValueError("–ö—É—Ä—Å RUB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    cost_usd = electricity_cost_rub / rate
    asics = get_top_asics()
    if not asics: return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞."
    result = [f"üí∞ <b>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ä–æ–∑–µ—Ç–∫–∞ {electricity_cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á)</b>\n"]
    for asic in asics:
        cost = (asic['power_watts'] / 1000) * 24 * cost_usd
        profit = asic['daily_revenue'] - cost
        result.append(f"<b>{telebot.util.escape(asic['name'])}</b>\n"
                      f"  –î–æ—Ö–æ–¥: ${asic['daily_revenue']:.2f} | –†–∞—Å—Ö–æ–¥: ${cost:.2f}\n"
                      f"  <b>–ü—Ä–æ—Ñ–∏—Ç: ${profit:.2f}/–¥–µ–Ω—å</b>")
    return "\n\n".join(result)

# ========================================================================================
# 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM
# ========================================================================================

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(msg):
    help_text = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
                 "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                 "<code>/price</code> - –∫—É—Ä—Å BTC, <code>/gas</code> - –≥–∞–∑ ETH, <code>/news</code> - –Ω–æ–≤–æ—Å—Ç–∏.\n\n"
                 "<b>–£—Ç–∏–ª–∏—Ç—ã –∏ –∏–≥—Ä–∞:</b>\n"
                 "<code>/fear</code> - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞, <code>/halving</code> - —Ç–∞–π–º–µ—Ä –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞.\n"
                 "<code>/my_rig</code> - –∏–Ω—Ñ–æ –æ —Ñ–µ—Ä–º–µ, <code>/collect</code> - —Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥—ã.\n"
                 "<code>/upgrade_rig</code> - —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–µ—Ä–º—ã.\n"
                 "<code>/top_miners</code> - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤.\n"
                 "<code>/quiz</code> - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, <code>/word</code> - —Å–ª–æ–≤–æ –¥–Ω—è.")
    bot.send_message(msg.chat.id, help_text, reply_markup=get_main_keyboard())

def get_price_and_send(chat_id, coin_symbol="BTC"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    coin_id = CURRENCY_MAP.get(coin_symbol.lower(), coin_symbol.lower())
    price, source = get_crypto_price(coin_id, "usd")
    if price:
        text = f"üíπ –ö—É—Ä—Å {coin_symbol}/USD: <b>${price:,.2f}</b>\n<i>(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})</i>"
        send_message_with_partner_button(chat_id, text)
    else:
        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {coin_symbol}."
        bot.send_message(chat_id, text)

@bot.message_handler(commands=['price'])
def handle_price(msg):
    coin_symbol = msg.text.split()[1].upper() if len(msg.text.split()) > 1 else "BTC"
    get_price_and_send(msg.chat.id, coin_symbol)

@bot.message_handler(commands=['fear', 'fng'])
def handle_fear_and_greed(msg):
    bot.send_message(msg.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞...")
    photo, text = get_fear_and_greed_index()
    send_photo_with_partner_button(msg.chat.id, photo=photo, caption=text)

# --- –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['my_rig'])
def handle_my_rig(msg):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–µ—Ä–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = msg.from_user.id
    if user_id not in user_rigs:
        user_rigs[user_id] = {'last_collected': None, 'balance': 0.0, 'level': 1, 'streak': 0, 'name': msg.from_user.first_name}
        response = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ñ–µ—Ä–º—É!\n\n"
    else:
        response = ""
    rig = user_rigs[user_id]
    next_level = rig['level'] + 1
    upgrade_cost_text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è: <code>{UPGRADE_COSTS.get(next_level, 'N/A')}</code> BTC." if next_level in UPGRADE_COSTS else "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
    response += (f"üñ•Ô∏è <b>–§–µ—Ä–º–∞ {telebot.util.escape(rig['name'])}</b>\n\n"
                 f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {rig['level']}\n"
                 f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{rig['balance']:.6f}</code> BTC\n"
                 f"<b>–î–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è:</b> {rig['streak']} üî• (–¥–∞–µ—Ç –±–æ–Ω—É—Å <b>{rig['streak'] * STREAK_BONUS_MULTIPLIER:.0%}</b>)\n\n"
                 f"{upgrade_cost_text}\n\n"
                 "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/collect</code> –¥–ª—è —Å–±–æ—Ä–∞ –∏ <code>/upgrade_rig</code> –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
    send_message_with_partner_button(msg.chat.id, response)

@bot.message_handler(commands=['collect'])
def handle_collect(msg):
    """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É —Å —Ñ–µ—Ä–º—ã."""
    user_id = msg.from_user.id
    if user_id not in user_rigs:
        return send_message_with_partner_button(msg.chat.id, "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã <code>/my_rig</code>.")
    rig = user_rigs[user_id]
    now = datetime.now()
    if rig['last_collected'] and (now - rig['last_collected']) < timedelta(hours=24):
        time_left = timedelta(hours=24) - (now - rig['last_collected'])
        h, m = divmod(time_left.seconds, 3600)[0], divmod(time_left.seconds % 3600, 60)[0]
        return send_message_with_partner_button(msg.chat.id, f"–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ <b>{h}—á {m}–º</b>.")
    if rig['last_collected'] and (now - rig['last_collected']) < timedelta(hours=48):
        rig['streak'] += 1
    else:
        rig['streak'] = 1
    base_mined = MINING_RATES.get(rig['level'], 0.0001)
    streak_bonus = base_mined * rig['streak'] * STREAK_BONUS_MULTIPLIER
    total_mined = base_mined + streak_bonus
    rig['balance'] += total_mined
    rig['last_collected'] = now
    response = (f"‚úÖ –°–æ–±—Ä–∞–Ω–æ <b>{total_mined:.6f}</b> BTC!\n"
                f"  (–ë–∞–∑–æ–≤–∞—è –¥–æ–±—ã—á–∞: {base_mined:.6f} + –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: {streak_bonus:.6f})\n"
                f"üî• –í–∞—à–∞ —Å–µ—Ä–∏—è: <b>{rig['streak']} –¥–Ω–µ–π!</b>\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{rig['balance']:.6f}</code> BTC.")
    send_message_with_partner_button(msg.chat.id, response)

@bot.message_handler(commands=['upgrade_rig'])
def handle_upgrade_rig(msg):
    """–£–ª—É—á—à–∞–µ—Ç —Ñ–µ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = msg.from_user.id
    if user_id not in user_rigs:
        return send_message_with_partner_button(msg.chat.id, "ü§î –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã <code>/my_rig</code>.")
    rig = user_rigs[user_id]
    next_level = rig['level'] + 1
    cost = UPGRADE_COSTS.get(next_level)
    if not cost:
        return send_message_with_partner_button(msg.chat.id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã!")
    if rig['balance'] >= cost:
        rig['balance'] -= cost
        rig['level'] = next_level
        response = f"üöÄ <b>–£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n–í–∞—à–∞ —Ñ–µ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ <b>{next_level}</b> —É—Ä–æ–≤–Ω—è! " \
                   f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ.\n" \
                   f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{rig['balance']:.6f}</code> BTC."
    else:
        needed = cost - rig['balance']
        response = f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>\n\n" \
                   f"–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ {next_level} —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–±—É–µ—Ç—Å—è <code>{cost}</code> BTC.\n" \
                   f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç <code>{needed:.6f}</code> BTC. –ö–æ–ø–∏—Ç–µ –¥–∞–ª—å—à–µ!"
    send_message_with_partner_button(msg.chat.id, response)

@bot.message_handler(commands=['top_miners'])
def handle_top_miners(msg):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤."""
    if not user_rigs:
        return send_message_with_partner_button(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞.")
    sorted_rigs = sorted(user_rigs.values(), key=lambda r: r['balance'], reverse=True)
    response = ["üèÜ <b>–¢–æ–ø-5 –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ú–∞–π–Ω–µ—Ä–æ–≤:</b>\n"]
    for i, rig in enumerate(sorted_rigs[:5]):
        response.append(f"<b>{i+1}.</b> {telebot.util.escape(rig['name'])} - <code>{rig['balance']:.6f}</code> BTC (–£—Ä. {rig['level']})")
    send_message_with_partner_button(msg.chat.id, "\n".join(response))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ —Å–ª–æ–≤–∞ –¥–Ω—è ---
@bot.message_handler(commands=['word'])
def handle_word_of_the_day(msg):
    term = random.choice(CRYPTO_TERMS)
    prompt = f"–û–±—ä—è—Å–Ω–∏ —Ç–µ—Ä–º–∏–Ω '{term}' –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –û—Ç–≤–µ—Ç –¥–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è HTML-—Ç–µ–≥–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è."
    explanation = ask_gpt(prompt, "gpt-3.5-turbo")
    text = f"üéì <b>–°–ª–æ–≤–æ –¥–Ω—è: {term}</b>\n\n{explanation}"
    send_message_with_partner_button(msg.chat.id, text)
    
@bot.message_handler(commands=['quiz'])
def handle_quiz(msg):
    user_id = msg.from_user.id
    user_states[user_id] = {'quiz_active': True, 'score': 0, 'question_index': 0}
    bot.send_message(msg.chat.id, "üî• <b>–ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∏–ø—Ç–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b>\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=types.ReplyKeyboardRemove())
    send_quiz_question(msg.chat.id, user_id)

def send_quiz_question(chat_id, user_id):
    state = user_states.get(user_id)
    if not state or not state.get('quiz_active'): return
    q_index = state['question_index']
    if q_index >= len(QUIZ_QUESTIONS):
        score = state['score']
        bot.send_message(chat_id, f"üéâ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score} –∏–∑ {len(QUIZ_QUESTIONS)}</b>. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!", reply_markup=get_main_keyboard())
        user_states.pop(user_id, None)
        return
    question_data = QUIZ_QUESTIONS[q_index]
    markup = types.InlineKeyboardMarkup()
    for i, option in enumerate(question_data['options']):
        markup.add(types.InlineKeyboardButton(option, callback_data=f"quiz_{q_index}_{i}"))
    bot.send_message(chat_id, f"<b>–í–æ–ø—Ä–æ—Å {q_index + 1}:</b>\n{question_data['question']}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('quiz_'))
def handle_quiz_answer(call):
    user_id = call.from_user.id
    state = user_states.get(user_id)
    if not state or not state.get('quiz_active'):
        return bot.answer_callback_query(call.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /quiz")
    _, q_index, answer_index = call.data.split('_')
    q_index, answer_index = int(q_index), int(answer_index)
    if q_index != state.get('question_index'):
        return bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
    question_data = QUIZ_QUESTIONS[q_index]
    correct_index = question_data['correct_index']
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    if answer_index == correct_index:
        state['score'] += 1
        bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        correct_answer_text = question_data['options'][correct_index]
        bot.send_message(call.message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer_text}</b>")
    state['question_index'] += 1
    time.sleep(1)
    send_quiz_question(call.message.chat.id, user_id)
    bot.answer_callback_query(call.id)

# ========================================================================================
# 6. –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================================================
@bot.message_handler(content_types=['text'])
def handle_text_messages(msg):
    try:
        user_id = msg.from_user.id
        text_lower = msg.text.lower().strip()
        
        if user_states.get(user_id) == 'weather_request':
            user_states.pop(user_id, None)
            bot.send_message(msg.chat.id, f"‚è≥ –ò—â—É –ø–æ–≥–æ–¥—É –¥–ª—è <b>{telebot.util.escape(msg.text)}</b>...", reply_markup=get_main_keyboard())
            send_message_with_partner_button(msg.chat.id, get_weather(msg.text))
            return

        if user_states.get(user_id) == 'calculator_request':
            try:
                cost = float(text_lower.replace(',', '.'))
                user_states.pop(user_id, None)
                bot.send_message(msg.chat.id, "‚è≥ –°—á–∏—Ç–∞—é –ø—Ä–∏–±—ã–ª—å...", reply_markup=get_main_keyboard())
                send_message_with_partner_button(msg.chat.id, calculate_and_format_profit(cost))
            except ValueError:
                bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>7.5</code>)")
            return

        command_map = {
            "üíπ –∫—É—Ä—Å btc": lambda: get_price_and_send(msg.chat.id, "BTC"),
            "‚öôÔ∏è —Ç–æ–ø-5 asic": lambda: handle_asics_text(msg),
            "‚õèÔ∏è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": lambda: set_user_state(user_id, 'calculator_request', "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ <b>—Ä—É–±–ª—è—Ö</b> –∑–∞ –∫–í—Ç/—á:"),
            "üì∞ –Ω–æ–≤–æ—Å—Ç–∏": lambda: send_message_with_partner_button(msg.chat.id, get_crypto_news()),
            "üò± –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞": lambda: handle_fear_and_greed(msg),
            "‚è≥ —Ö–∞–ª–≤–∏–Ω–≥": lambda: send_message_with_partner_button(msg.chat.id, get_halving_info()),
            "üß† –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞": lambda: handle_quiz(msg),
            "üéì —Å–ª–æ–≤–æ –¥–Ω—è": lambda: handle_word_of_the_day(msg),
            "üèÜ —Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤": lambda: handle_top_miners(msg),
            "üå¶Ô∏è –ø–æ–≥–æ–¥–∞": lambda: set_user_state(user_id, 'weather_request', "üå¶ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?")
        }
        if text_lower in command_map:
            command_map[text_lower]()
            return

        sale_words = ["–ø—Ä–æ–¥–∞–º", "–ø—Ä–æ–¥–∞—Ç—å", "–∫—É–ø–ª—é", "–∫—É–ø–∏—Ç—å", "–≤ –Ω–∞–ª–∏—á–∏–∏"]
        item_words = ["asic", "–∞—Å–∏–∫", "whatsminer", "antminer", "–∫–∞—Ä—Ç–∞", "—Ñ–µ—Ä–º–∞"]
        if any(word in text_lower for word in sale_words) and any(word in text_lower for word in item_words):
            log_to_sheet([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), msg.from_user.username or "N/A", msg.text])
            prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ–≥–æ, –ø–æ–¥–¥–µ—Ä–∂–∏ –¥–∏–∞–ª–æ–≥. –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥—Ä—É–≥–∏–µ –ø–ª–æ—â–∞–¥–∫–∏. –¢–µ–∫—Å—Ç: '{msg.text}'"
            send_message_with_partner_button(msg.chat.id, ask_gpt(prompt))
            return
            
        bot.send_chat_action(msg.chat.id, 'typing')
        send_message_with_partner_button(msg.chat.id, ask_gpt(msg.text))

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_text_messages!", exc_info=e)
        try:
            bot.send_message(msg.chat.id, "üòµ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞.")
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e2}")

def set_user_state(user_id, state, text):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_states[user_id] = state
    bot.send_message(user_id, text, reply_markup=types.ReplyKeyboardRemove())
    
def handle_asics_text(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ ASIC."""
    bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
    asics = get_top_asics()
    if not asics:
        send_message_with_partner_button(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± ASIC.")
        return
    header = "–ú–æ–¥–µ–ª—å              | H/s      | P, W | –î–æ—Ö–æ–¥/–¥–µ–Ω—å"
    divider = "--------------------|----------|------|-----------"
    rows = [f"{a['name']:<20.19}| {a['hashrate']:<9}| {a['power_watts']:<5.0f}| ${a['daily_revenue']:<10.2f}" for a in asics]
    response_text = f"<pre>{header}\n{divider}\n" + "\n".join(rows) + "</pre>"
    gpt_prompt = ("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –º–∞–π–Ω–∏–Ω–≥-—á–∞—Ç–∞. "
                  "–ü–æ–¥—Ç–æ–ª–∫–Ω–∏ –∫ –º—ã—Å–ª–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –Ω–∞–º–µ–∫–∞—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. –ë—É–¥—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º.")
    response_text += f"\n\n{ask_gpt(gpt_prompt, 'gpt-4o')}"
    send_message_with_partner_button(msg.chat.id, response_text)

# ========================================================================================
# 7. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
            return '', 200
        return 'Forbidden', 403
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ!", exc_info=e)
        return "Error", 500

@app.route("/")
def index():
    return "Bot is running!", 200

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏."""
    schedule.every(25).minutes.do(lambda: requests.get(WEBHOOK_URL.rsplit('/', 1)[0]) if WEBHOOK_URL else None)
    schedule.every(4).hours.do(auto_send_news)
    schedule.every(6).hours.do(auto_check_status)
    schedule.every(1).hours.do(get_top_asics, force_update=True)
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á...")
    get_top_asics(force_update=True)
    auto_check_status()
    while True:
        schedule.run_pending()
        time.sleep(1)

def auto_send_news():
    if NEWS_CHAT_ID: send_message_with_partner_button(NEWS_CHAT_ID, get_crypto_news())

def auto_check_status():
    if not ADMIN_CHAT_ID: return
    errors = []
    if get_crypto_price("bitcoin")[0] is None: errors.append("API —Ü–µ–Ω—ã")
    if "[‚ùå" in ask_gpt("–¢–µ—Å—Ç"): errors.append("API OpenAI")
    try: get_gsheet()
    except Exception: errors.append("Google Sheets")
    ts = datetime.now().strftime("%H:%M")
    status = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ." if not errors else f"‚ö†Ô∏è –°–±–æ–π –≤: {', '.join(errors)}"
    bot.send_message(ADMIN_CHAT_ID, f"<b>–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ({ts})</b>\n{status}")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    if WEBHOOK_URL:
        logger.info("–†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞. –£—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=f"{WEBHOOK_URL.rstrip('/')}/webhook")
        app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long-polling...")
        bot.remove_webhook()
        bot.polling(none_stop=Tr
