# -*- coding: utf-8 -*-

# ========================================================================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ========================================================================================
import os
import telebot
import requests
import time
import threading
import schedule
import json
from flask import Flask, request
import gspread
from google.oauth2.service_account import Credentials
from telebot import types
from openai import OpenAI
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import io
import re
import random
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')

# --- –ö–ª—é—á–∏ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) ---
# –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ os.getenv() –≤–º–µ—Å—Ç–æ os.environ.get() –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.
# getenv –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∞ –≤–µ—Ä–Ω–µ—Ç None.
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
NEWSAPI_KEY = os.getenv("CRYPTO_API_KEY") # CryptoPanic API Key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY", "YourApiKeyToken")

NEWS_CHAT_ID = os.getenv("NEWS_CHAT_ID") # –ö–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID") # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤

# –ö–ª—é—á —Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∞ –Ω–µ –∫–∞–∫ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
GOOGLE_JSON_STR = os.getenv("GOOGLE_JSON")
SHEET_ID = os.getenv("SHEET_ID")
SHEET_NAME = os.getenv("SHEET_NAME", "–õ–∏—Å—Ç1")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –°—Å—ã–ª–∫–∏ ---
PARTNER_URL = "https://app.leadteh.ru/w/dTeKr"
PARTNER_BUTTON_TEXT_OPTIONS = [
    "üéÅ –£–∑–Ω–∞—Ç—å —Å–ø–µ—Ü—Ü–µ–Ω—ã", "üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "üí° –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üíé –ü—Ä–∞–π—Å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫—ç—à ---
if not BOT_TOKEN:
    raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN")

# –£–õ–£–ß–®–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API
try:
    bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
    app = Flask(__name__)
    openai_client = OpenAI(api_key=OPENAI_API_KEY)
except Exception as e:
    logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ API: {e}")
    raise

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_weather_requests = {}
pending_calculator_requests = {}
asic_cache = {"data": [], "timestamp": None}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –≤–∞–ª—é—Ç
CURRENCY_MAP = {
    '–¥–æ–ª–ª–∞—Ä': 'USD', 'usd': 'USD', '$': 'USD',
    '–µ–≤—Ä–æ': 'EUR', 'eur': 'EUR', '‚Ç¨': 'EUR',
    '—Ä—É–±–ª—å': 'RUB', 'rub': 'RUB', '‚ÇΩ': 'RUB',
    '—é–∞–Ω—å': 'CNY', 'cny': 'CNY',
    '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', 'btc': 'BTC', '–±—Ç—Å': 'BTC', '–≤—Ç—Å': 'BTC',
    '—ç—Ñ–∏—Ä': 'ETH', 'eth': 'ETH',
}

# ========================================================================================
# 2. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–ù–ï–®–ù–ò–ú–ò API –ò –°–ï–†–í–ò–°–ê–ú–ò
# ========================================================================================

def get_gsheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    if not GOOGLE_JSON_STR:
        logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        raise ValueError("–ö–ª—é—á–∏ Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    try:
        creds_dict = json.loads(GOOGLE_JSON_STR)
        creds = Credentials.from_service_account_info(creds_dict, scopes=['https://www.googleapis.com/auth/spreadsheets'])
        gc = gspread.authorize(creds)
        return gc.open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    except json.JSONDecodeError:
        logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GOOGLE_JSON.")
        raise
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        raise

def log_to_sheet(row_data: list):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É Google Sheets."""
    try:
        sheet = get_gsheet()
        sheet.append_row(row_data, value_input_option='USER_ENTERED')
        logging.info(f"–ó–∞–ø–∏—Å—å –≤ Google Sheets: {row_data}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

def get_crypto_price(coin_id="bitcoin", vs_currency="usd"):
    """
    –¢–†–û–ô–ù–û–ï –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å Binance, –ø—Ä–∏ –æ—à–∏–±–∫–µ -> KuCoin, –ø—Ä–∏ –æ—à–∏–±–∫–µ -> CoinGecko.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Ü–µ–Ω–∞, –∏—Å—Ç–æ—á–Ω–∏–∫).
    """
    # 1. Binance
    try:
        res = requests.get(f"https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT", timeout=5).json()
        if 'price' in res: return (float(res['price']), "Binance")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ API Binance: {e}. –ü—Ä–æ–±—É—é KuCoin.")
    # 2. KuCoin
    try:
        res = requests.get(f"https://api.kucoin.com/api/v1/market/orderbook/level1?symbol=BTC-USDT", timeout=5).json()
        if res.get('data') and res['data'].get('price'): return (float(res['data']['price']), "KuCoin")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ API KuCoin: {e}. –ü—Ä–æ–±—É—é CoinGecko.")
    # 3. CoinGecko
    try:
        res = requests.get(f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies={vs_currency}", timeout=5).json()
        if coin_id in res and vs_currency in res[coin_id]: return (float(res[coin_id][vs_currency]), "CoinGecko")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ API CoinGecko: {e}.")
    return (None, None)

def get_eth_gas_price():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –≤ —Å–µ—Ç–∏ Ethereum."""
    try:
        res = requests.get(f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}", timeout=5).json()
        if res.get("status") == "1" and res.get("result"):
            gas_info = res["result"]
            return (f"‚õΩÔ∏è **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –≤ Ethereum (Gwei):**\n\n"
                    f"üê¢ **–ú–µ–¥–ª–µ–Ω–Ω–æ:** `{gas_info['SafeGasPrice']}` Gwei\n"
                    f"üö∂‚Äç‚ôÇÔ∏è **–°—Ä–µ–¥–Ω–µ:** `{gas_info['ProposeGasPrice']}` Gwei\n"
                    f"üöÄ **–ë—ã—Å—Ç—Ä–æ:** `{gas_info['FastGasPrice']}` Gwei")
        else:
            return "[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ —Å Etherscan]"
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑: {e}")
        return f"[‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑]"
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑: {e}")
        return f"[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑]"

def get_weather(city: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å —Å–µ—Ä–≤–∏—Å–∞ wttr.in."""
    try:
        # –£–õ–£–ß–®–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
        headers = {'User-Agent': 'Mozilla/5.0'}
        r = requests.get(f"https://wttr.in/{city}?format=j1", headers=headers, timeout=7).json()
        current = r["current_condition"][0]
        return (f"üåç {city.title()}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temp_C']}¬∞C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {current['FeelsLikeC']}¬∞C)\n"
                f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {current['lang_ru'][0]['value']}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\n"
                f"üí® –í–µ—Ç–µ—Ä: {current['windspeedKmph']} –∫–º/—á")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}': {e}")
        return f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city}' –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.]"

def get_currency_rate(base="USD", to="RUB"):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç —Å exchangerate.host."""
    try:
        res = requests.get(f"https://api.exchangerate.host/latest?base={base.upper()}&symbols={to.upper()}", timeout=5).json()
        if res.get('rates') and res['rates'].get(to.upper()):
            rate = res['rates'][to.upper()]
            return f"üíπ {base.upper()} ‚Üí {to.upper()} = **{rate:.2f}**"
        return f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {base.upper()} –∫ {to.upper()}]"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
        return f"[‚ùå –û—à–∏–±–∫–∞ API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç]"

def ask_gpt(prompt: str, model: str = "gpt-4o"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI GPT."""
    try:
        # –£–õ–£–ß–®–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Ä–æ–ª–∏
        res = openai_client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            timeout=20.0 # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–æ–ª–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        )
        return res.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {e}")
        return f"[‚ùå –û—à–∏–±–∫–∞ GPT: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.]"

def get_top_asics(force_update: bool = False):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-5 ASIC —Å asicminervalue.com, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à."""
    global asic_cache
    cache_is_valid = asic_cache["data"] and asic_cache["timestamp"] and (datetime.now() - asic_cache["timestamp"] < timedelta(hours=1))
    if cache_is_valid and not force_update:
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à ASIC.")
        return asic_cache["data"]
    try:
        logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ ASIC —Å —Å–∞–π—Ç–∞...")
        r = requests.get("https://www.asicminervalue.com/miners/sha-256", timeout=15)
        r.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        soup = BeautifulSoup(r.text, "html.parser")
        table_rows = soup.select("table tbody tr")
        if not table_rows:
            return ["[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å –∞—Å–∏–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.]"]

        updated_asics = []
        for row in table_rows[:5]:
            cols = row.find_all("td")
            if len(cols) > 3:
                 # –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                name = cols[0].get_text(strip=True)
                th = cols[1].get_text(strip=True)
                power = cols[2].get_text(strip=True)
                profit = cols[3].get_text(strip=True)
                updated_asics.append(f"‚Ä¢ {name}: {th}, {power}, –¥–æ—Ö–æ–¥ ~{profit}/–¥–µ–Ω—å")

        if not updated_asics:
             return ["[‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ.]"]

        asic_cache = {"data": updated_asics, "timestamp": datetime.now()}
        logging.info("–î–∞–Ω–Ω—ã–µ –ø–æ ASIC —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        return updated_asics
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ ASIC: {e}")
        return [f"[‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ ASIC: {e}]"]

def get_crypto_news(keywords: list = None):
    """–ü–æ–ª—É—á–∞–µ—Ç 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å CryptoPanic."""
    try:
        params = {"auth_token": NEWSAPI_KEY, "public": "true"}
        if keywords:
            params["currencies"] = ",".join(keywords).upper()
        else:
             params["currencies"] = "BTC,ETH" # –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        r = requests.get("https://cryptopanic.com/api/v1/posts/", params=params, timeout=10).json()
        posts = r.get("results", [])[:3]

        if not posts:
            return "[üßê –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]"

        # –£–õ–£–ß–®–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPT –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        prompt_for_gpt = (
            "–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ). "
            "–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Ç–∞–∫: '–°–ê–ú–ú–ê–†–ò 1\n–°–ê–ú–ú–ê–†–ò 2\n–°–ê–ú–ú–ê–†–ò 3'.\n\n" +
            "\n".join([f"{i+1}. {p['title']}" for i, p in enumerate(posts)])
        )
        summaries_text = ask_gpt(prompt_for_gpt, 'gpt-3.5-turbo')
        summaries = summaries_text.split('\n') if summaries_text and "–û—à–∏–±–∫–∞" not in summaries_text else [p['title'] for p in posts]

        items = [f"üîπ {summaries[i].strip()}\n[–ò—Å—Ç–æ—á–Ω–∏–∫]({post.get('url', '')})" for i, post in enumerate(posts) if i < len(summaries)]
        return "\n\n".join(items) if items else "[ü§∑‚Äç‚ôÇÔ∏è –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç]"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return f"[‚ùå –û—à–∏–±–∫–∞ API –Ω–æ–≤–æ—Å—Ç–µ–π]"

# ========================================================================================
# 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –£–¢–ò–õ–ò–¢–´
# ========================================================================================

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False)
    buttons = [
        types.KeyboardButton("üíπ –ö—É—Ä—Å BTC"), types.KeyboardButton("‚õΩÔ∏è –ì–∞–∑ ETH"),
        types.KeyboardButton("‚öôÔ∏è –¢–æ–ø-5 ASIC"), types.KeyboardButton("‚õèÔ∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
        types.KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏"), types.KeyboardButton("üå¶Ô∏è –ü–æ–≥–æ–¥–∞")
    ]
    markup.add(*buttons)
    return markup

def get_random_partner_button():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(random.choice(PARTNER_BUTTON_TEXT_OPTIONS), url=PARTNER_URL))
    return markup

def send_message_with_partner_button(chat_id, text, **kwargs):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –∫–Ω–æ–ø–∫–æ–π."""
    try:
        kwargs.setdefault('parse_mode', 'Markdown')
        kwargs.setdefault('reply_markup', get_random_partner_button())
        bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

def calculate_and_format_profit(electricity_cost_rub: float):
    """–†–∞—Å—á–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ASIC —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –∏–∑ —Ä—É–±–ª–µ–π."""
    try:
        rate_info = requests.get(f"https://api.exchangerate.host/latest?base=USD&symbols=RUB", timeout=5).json()
        usd_to_rub_rate = rate_info['rates']['RUB']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    electricity_cost_usd = electricity_cost_rub / usd_to_rub_rate
    asics_data = get_top_asics()
    if not asics_data or "–û—à–∏–±–∫–∞" in asics_data[0]:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ASIC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    result = [f"üí∞ **–†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ —Ü–µ–Ω–µ —Ä–æ–∑–µ—Ç–∫–∏ {electricity_cost_rub:.2f} ‚ÇΩ/–∫–í—Ç—á (~${electricity_cost_usd:.3f}/–∫–í—Ç—á)**\n"]
    for asic_string in asics_data:
        try:
            # –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –æ—à–∏–±–∫–∞–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é regex
            match = re.search(r"‚Ä¢\s*(.*?):\s*.*?(\d+W).*?\$([\d\.]+)", asic_string)
            if not match:
                continue

            name, power_str, revenue_str = match.groups()
            power_watts = float(power_str.replace('W', ''))
            daily_revenue = float(revenue_str)

            daily_power_kwh = (power_watts / 1000) * 24
            daily_electricity_cost = daily_power_kwh * electricity_cost_usd
            net_profit = daily_revenue - daily_electricity_cost

            result.append(
                f"**{name.strip()}**\n"
                f"  - –î–æ—Ö–æ–¥: `${daily_revenue:.2f}`\n"
                f"  - –†–∞—Å—Ö–æ–¥: `${daily_electricity_cost:.2f}`\n"
                f"  - **–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: `${net_profit:.2f}`/–¥–µ–Ω—å**"
            )
        except (ValueError, TypeError, IndexError) as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ASIC –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '{asic_string}': {e}")
            continue

    return "\n".join(result) if len(result) > 1 else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ ASIC."

# ========================================================================================
# 4. –ó–ê–î–ê–ß–ò, –í–´–ü–û–õ–ù–Ø–ï–ú–´–ï –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ (SCHEDULE)
# ========================================================================================

def keep_alive():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ '–∑–∞—Å—ã–ø–∞–ª–æ' –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ."""
    if WEBHOOK_URL:
        try:
            # –£–õ–£–ß–®–ï–ù–û: –ü–∏–Ω–≥—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π URL, –∞ –Ω–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ–±—Ö—É–∫–∞
            base_url = WEBHOOK_URL.rsplit('/', 1)[0]
            requests.get(base_url, timeout=10)
            logging.info(f"Keep-alive –ø–∏–Ω–≥ –Ω–∞ {base_url} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ keep-alive –ø–∏–Ω–≥–∞: {e}")

def auto_send_news():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."""
    if not NEWS_CHAT_ID: return
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        news = get_crypto_news()
        send_message_with_partner_button(NEWS_CHAT_ID, news, disable_web_page_preview=True)
        logging.info(f"–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {NEWS_CHAT_ID}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        if ADMIN_CHAT_ID:
            bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π:\n{e}")

def auto_check_status():
    """–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É."""
    if not ADMIN_CHAT_ID: return
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º...")
    errors = []
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
    if "–æ—à–∏–±–∫–∞" in ask_gpt("–¢–µ—Å—Ç", "gpt-3.5-turbo").lower():
        errors.append("API OpenAI (GPT) –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets
    try:
        get_gsheet()
    except Exception:
        errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets.")
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ API
    if "–æ—à–∏–±–∫–∞" in get_crypto_news().lower():
        errors.append("API –Ω–æ–≤–æ—Å—Ç–µ–π (CryptoPanic) –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")

    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if not errors:
        status_msg = f"‚úÖ **–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ({ts})**\n\n–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç."
    else:
        error_list = "\n".join([f"ÔøΩ {e}" for e in errors])
        status_msg = f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ ({ts}):**\n{error_list}"
    try:
        bot.send_message(ADMIN_CHAT_ID, status_msg, parse_mode="Markdown")
        logging.info("–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É: {e}")

# ========================================================================================
# 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô TELEGRAM
# ========================================================================================

@bot.message_handler(commands=['start', 'help'])
def handle_start_help(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞–π–Ω–∏–Ω–≥–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É.\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "`/price` - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å BTC (–∏–ª–∏ `/price ETH-USDT`).\n"
        "`/chart` - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑ Google Sheets.\n"
        "`/news` - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏.\n"
        "`/gas` - —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –Ω–∞ –≥–∞–∑ –≤ —Å–µ—Ç–∏ Ethereum.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )
    bot.send_message(msg.chat.id, help_text, parse_mode="Markdown", reply_markup=get_main_keyboard())

@bot.message_handler(commands=['price'])
def handle_price(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price."""
    try:
        # –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä—ã
        parts = msg.text.split()
        pair_text = parts[1].upper() if len(parts) > 1 else "BTC-USDT"
        coin, currency = (pair_text.split('-') + ['USD'])[:2]
        # –î–ª—è CoinGecko –Ω—É–∂–µ–Ω ID, –∞ –Ω–µ —Ç–∏–∫–µ—Ä
        coin_id_map = {'BTC': 'bitcoin', 'ETH': 'ethereum'}
        coin_id = coin_id_map.get(coin, coin.lower())
    except IndexError:
        pair_text = "BTC-USDT"
        coin_id, currency = "bitcoin", "usd"

    price, source = get_crypto_price(coin_id, currency.lower())
    if price:
        send_message_with_partner_button(msg.chat.id, f"üíπ –ö—É—Ä—Å {pair_text.replace('-', '/')}: **${price:,.2f}**\n_(–î–∞–Ω–Ω—ã–µ –æ—Ç {source})_")
    else:
        bot.send_message(msg.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {pair_text} –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")

@bot.message_handler(commands=['chart'])
def handle_chart(msg):
    """–°—Ç—Ä–æ–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets."""
    bot.send_message(msg.chat.id, "‚è≥ –°—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
    try:
        sheet = get_gsheet()
        # –£–õ–£–ß–®–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        records = sheet.get_all_values()[1:] # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        dates, profits = [], []
        error_lines = []

        for i, row in enumerate(records):
            try:
                if not row or len(row) < 3 or not row[0] or not row[2]: continue
                date_obj = datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
                # –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–µ–Ω—ã
                profit_match = re.search(r'\$([\d\.]+)', row[2])
                if profit_match:
                    profits.append(float(profit_match.group(1)))
                    dates.append(date_obj)
            except (ValueError, IndexError):
                error_lines.append(str(i + 2)) # +2 —Ç.–∫. –Ω–∞—á–∏–Ω–∞–µ–º —Å 1 –∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue

        if len(dates) < 2:
            bot.send_message(msg.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
            return

        if error_lines:
            bot.send_message(msg.chat.id, f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:** –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏: {', '.join(error_lines)}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°` –∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ü–µ–Ω–∞ –≤ `$`. –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(dates, profits, marker='o', linestyle='-', color='#00aaff', label='–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å ($)')
        ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞', fontsize=16, color='white')
        ax.set_ylabel('–ü—Ä–∏–±—ã–ª—å, $', color='white')
        ax.tick_params(axis='x', colors='white', rotation=30)
        ax.tick_params(axis='y', colors='white')
        ax.grid(True, which='both', linestyle='--', linewidth=0.5, color='#555555')
        ax.legend()
        fig.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, transparent=True)
        buf.seek(0)
        bot.send_photo(msg.chat.id, buf, caption="üìà –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets.")
        plt.close(fig)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        bot.send_message(msg.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

@bot.message_handler(content_types=['text'])
def handle_all_text_messages(msg):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = msg.from_user.id
    text_lower = msg.text.lower().strip()

    # --- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
    if pending_weather_requests.get(user_id):
        del pending_weather_requests[user_id]
        bot.send_message(msg.chat.id, "‚è≥ –ò—â—É –ø–æ–≥–æ–¥—É...", reply_markup=get_main_keyboard())
        send_message_with_partner_button(msg.chat.id, get_weather(msg.text))
        return

    if pending_calculator_requests.get(user_id):
        try:
            electricity_cost = float(text_lower.replace(',', '.'))
            del pending_calculator_requests[user_id]
            bot.send_message(msg.chat.id, "‚è≥ –°—á–∏—Ç–∞—é –ø—Ä–∏–±—ã–ª—å...", reply_markup=get_main_keyboard())
            calculation_result = calculate_and_format_profit(electricity_cost)
            send_message_with_partner_button(msg.chat.id, calculation_result)
        except ValueError:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `7.5` –∏–ª–∏ `3`")
        return

    # --- 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ ---
    if text_lower in ["üíπ –∫—É—Ä—Å btc", "/btc"]:
        price, source = get_crypto_price("bitcoin", "usd")
        if price:
            comment = ask_gpt(f"–ö—É—Ä—Å BTC ${price:,.2f}. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –¥–µ—Ä–∑–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –æ —Ä—ã–Ω–∫–µ.", "gpt-3.5-turbo")
            send_message_with_partner_button(msg.chat.id, f"üí∞ **–ö—É—Ä—Å BTC: ${price:,.2f}** (–¥–∞–Ω–Ω—ã–µ –æ—Ç {source})\n\n*{comment}*")
        else:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
        return

    if text_lower in ["‚õΩÔ∏è –≥–∞–∑ eth", "/gas"]:
        send_message_with_partner_button(msg.chat.id, get_eth_gas_price())
        return

    if text_lower in ["‚õèÔ∏è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "/calc"]:
        pending_calculator_requests[user_id] = True
        # –£–õ–£–ß–®–ï–ù–û: –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
        bot.send_message(msg.chat.id, "üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ **—Ä—É–±–ª—è—Ö** –∑–∞ –∫–í—Ç/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: `7.5`)", reply_markup=types.ReplyKeyboardRemove())
        return

    if text_lower in ["‚öôÔ∏è —Ç–æ–ø-5 asic", "/asics"]:
        bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫...")
        send_message_with_partner_button(msg.chat.id, f"**–¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ö–æ–¥–Ω—ã—Ö ASIC –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n" + "\n".join(get_top_asics()))
        return

    if text_lower in ["üì∞ –Ω–æ–≤–æ—Å—Ç–∏", "/news"]:
        bot.send_message(msg.chat.id, "‚è≥ –ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        keywords = [word.upper() for word in text_lower.split() if word.upper() in ['BTC', 'ETH', 'SOL', 'MINING']]
        send_message_with_partner_button(msg.chat.id, get_crypto_news(keywords or None), disable_web_page_preview=True)
        return

    if text_lower in ["üå¶Ô∏è –ø–æ–≥–æ–¥–∞", "/weather"]:
        pending_weather_requests[user_id] = True
        bot.send_message(msg.chat.id, "üå¶ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?", reply_markup=types.ReplyKeyboardRemove())
        return

    # --- 3. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç ---
    match = re.search(r'(\S+)\s+(?:–≤|to|–∫)\s+(\S+)', text_lower)
    if match and ('–∫—É—Ä—Å' in text_lower or '–∫–æ–Ω–≤–µ—Ä—Ç' in text_lower):
        base_word, quote_word = match.groups()
        base_currency = CURRENCY_MAP.get(base_word)
        quote_currency = CURRENCY_MAP.get(quote_word)
        if base_currency and quote_currency:
            send_message_with_partner_button(msg.chat.id, get_currency_rate(base_currency, quote_currency))
            return

    # --- 4. –ê–Ω–∞–ª–∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ---
    sale_words = ["–ø—Ä–æ–¥–∞–º", "–ø—Ä–æ–¥–∞—Ç—å", "–∫—É–ø–ª—é", "–∫—É–ø–∏—Ç—å", "–≤ –Ω–∞–ª–∏—á–∏–∏", "–ø—Ä–µ–¥–∑–∞–∫–∞–∑"]
    item_words = ["asic", "–∞—Å–∏–∫", "whatsminer", "antminer", "–∫–∞—Ä—Ç–∞", "—Ñ–µ—Ä–º–∞"]
    if any(word in text_lower for word in sale_words) and any(word in text_lower for word in item_words):
        log_to_sheet([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), msg.from_user.username or msg.from_user.first_name, msg.text])
        analysis = ask_gpt(f"–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∞–π—Å –Ω–∞ –º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫. –£–∫–∞–∂–∏ –Ω–∞ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç. –û—Ç–≤–µ—Ç—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ.\n\n–¢–µ–∫—Å—Ç:\n{msg.text}")
        send_message_with_partner_button(msg.chat.id, analysis)
        return

    # --- 5. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT –∫–∞–∫ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å ---
    bot.send_chat_action(msg.chat.id, 'typing')
    send_message_with_partner_button(msg.chat.id, ask_gpt(msg.text))


# ========================================================================================
# 6. –ó–ê–ü–£–°–ö –ë–û–¢–ê, –í–ï–ë–•–£–ö–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ========================================================================================

@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram."""
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Forbidden', 403

@app.route("/")
def index():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω."""
    return "Bot is running!", 200

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    # –ó–∞–¥–∞—á–∏
    schedule.every(25).minutes.do(keep_alive)
    schedule.every(4).hours.do(auto_send_news)
    schedule.every(6).hours.do(auto_check_status)
    schedule.every(1).hours.do(get_top_asics)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    logging.info("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    get_top_asics(force_update=True)
    auto_check_status()
    keep_alive()

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if WEBHOOK_URL:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        logging.info("–†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞. –£—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=WEBHOOK_URL.rstrip("/") + "/" + BOT_TOKEN)
        logging.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {WEBHOOK_URL}")

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

        # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        port = int(os.environ.get('PORT', 10000))
        app.run(host="0.0.0.0", port=port)
    else:
        # –†–µ–∂–∏–º long-polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.info("–í–µ–±—Ö—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long-polling –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        bot.remove_webhook()
        bot.polling(none_stop=True)

